{
  "address": "0x429B0d95647596706f00A87DbD8043FF298Fb21B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ActionNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumOwed",
          "type": "uint256"
        }
      ],
      "name": "PaymentNotMinimum",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "AcceptedBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "CancelledBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "feeType",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "LoanLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "LoanRepayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MarketForwarderApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "MarketOwnerCancelledBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldFee",
          "type": "uint16"
        }
      ],
      "name": "ProtocolFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadataURI",
          "type": "bytes32"
        }
      ],
      "name": "SubmittedBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TrustedMarketForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURRENT_CODE_VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_lenderVolumeFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalVolumeFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        }
      ],
      "name": "addLendingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "approveMarketForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidDefaultDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidExpirationTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketplaceId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_metadataURI",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "lendingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "principal",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payment",
              "name": "totalRepaid",
              "type": "tuple"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "acceptedTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastRepaidTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "loanDuration",
              "type": "uint32"
            }
          ],
          "internalType": "struct LoanDetails",
          "name": "loanDetails",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "paymentCycleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "paymentCycle",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "APR",
              "type": "uint16"
            }
          ],
          "internalType": "struct Terms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "enum BidState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "enum PaymentType",
          "name": "paymentType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowerBids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountDue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payment",
          "name": "due",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountDue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payment",
          "name": "due",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountOwed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payment",
          "name": "owed",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountOwed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payment",
          "name": "owed",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "calculateNextDueDate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "dueDate_",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralManager",
      "outputs": [
        {
          "internalType": "contract ICollateralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "getBidState",
      "outputs": [
        {
          "internalType": "enum BidState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowerActiveLoanIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowerLoanIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "getLoanBorrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "getLoanLender",
      "outputs": [
        {
          "internalType": "address",
          "name": "lender_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "getLoanLendingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "getMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "metadataURI_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasApprovedMarketForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolFee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_marketRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lenderCommitmentForwarder",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_lendingTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_collateralManagerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "isLoanDefaulted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "isLoanExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "isPaymentLate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_trustedMarketForwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedMarketForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "lastRepaidTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "lenderAcceptBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToProtocol",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToMarketplace",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToBorrower",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lenderCommitmentForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenderVolumeFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "liquidateLoanFull",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "marketOwnerCancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketRegistry",
      "outputs": [
        {
          "internalType": "contract IMarketRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        }
      ],
      "name": "removeLendingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "repayLoanFull",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "repayLoanMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reputationManager",
      "outputs": [
        {
          "internalType": "contract IReputationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralManager",
          "type": "address"
        }
      ],
      "name": "setCollateralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newFee",
          "type": "uint16"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationManager",
          "type": "address"
        }
      ],
      "name": "setReputationManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedMarketForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketplaceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_APR",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "submitBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketplaceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_APR",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum CollateralType",
              "name": "_collateralType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_collateralAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Collateral[]",
          "name": "_collateralInfo",
          "type": "tuple[]"
        }
      ],
      "name": "submitBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalVolumeFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f9721ef9d2e2fd8894b2f8e14e00693528e30ab7a871b7b9a5e0b903c0c86f6",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x429B0d95647596706f00A87DbD8043FF298Fb21B",
    "transactionIndex": 79,
    "gasUsed": "4429298",
    "logsBloom": "0x
    "blockHash": "0xc1a49fee3ab331d9a5ea9b8612b900cc3f0c1e944fec1703375e7e23021f28dc",
    "transactionHash": "0x9f9721ef9d2e2fd8894b2f8e14e00693528e30ab7a871b7b9a5e0b903c0c86f6",
    "logs": [],
    "blockNumber": 8252642,
    "cumulativeGasUsed": "17430068",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x98f6D1464f2471a402E9Ae8dEFaEBB242ACcD854"
  ],
  "numDeployments": 6,
  "solcInputHash": "1eb1affba385b48f22811c93706b6dec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ActionNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumOwed\",\"type\":\"uint256\"}],\"name\":\"PaymentNotMinimum\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"AcceptedBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"CancelledBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"LoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"LoanRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MarketForwarderApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"MarketOwnerCancelledBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldFee\",\"type\":\"uint16\"}],\"name\":\"ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadataURI\",\"type\":\"bytes32\"}],\"name\":\"SubmittedBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TrustedMarketForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURRENT_CODE_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lenderVolumeFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalVolumeFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"}],\"name\":\"addLendingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"approveMarketForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidDefaultDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidExpirationTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_metadataURI\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"internalType\":\"struct Payment\",\"name\":\"totalRepaid\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"acceptedTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastRepaidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct LoanDetails\",\"name\":\"loanDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentCycleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"paymentCycle\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"APR\",\"type\":\"uint16\"}],\"internalType\":\"struct Terms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"enum BidState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowerBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateAmountDue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"internalType\":\"struct Payment\",\"name\":\"due\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountDue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"internalType\":\"struct Payment\",\"name\":\"due\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateAmountOwed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"internalType\":\"struct Payment\",\"name\":\"owed\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountOwed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"internalType\":\"struct Payment\",\"name\":\"owed\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"calculateNextDueDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dueDate_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralManager\",\"outputs\":[{\"internalType\":\"contract ICollateralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getBidState\",\"outputs\":[{\"internalType\":\"enum BidState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowerActiveLoanIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowerLoanIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getLoanBorrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getLoanLender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lender_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getLoanLendingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasApprovedMarketForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_marketRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lenderCommitmentForwarder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_lendingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_collateralManagerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"isLoanDefaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"isLoanExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"isPaymentLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trustedMarketForwarder\",\"type\":\"address\"}],\"name\":\"isTrustedMarketForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"lastRepaidTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"lenderAcceptBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToProtocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToMarketplace\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBorrower\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderCommitmentForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderVolumeFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"liquidateLoanFull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"marketOwnerCancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketRegistry\",\"outputs\":[{\"internalType\":\"contract IMarketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"}],\"name\":\"removeLendingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"repayLoanFull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"repayLoanMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationManager\",\"outputs\":[{\"internalType\":\"contract IReputationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralManager\",\"type\":\"address\"}],\"name\":\"setCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationManager\",\"type\":\"address\"}],\"name\":\"setReputationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedMarketForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketplaceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_APR\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"submitBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketplaceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_APR\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum CollateralType\",\"name\":\"_collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"}],\"internalType\":\"struct Collateral[]\",\"name\":\"_collateralInfo\",\"type\":\"tuple[]\"}],\"name\":\"submitBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVolumeFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ActionNotAllowed(uint256,string,string)\":[{\"params\":{\"action\":\"The action string (i.e: 'repayLoan', 'cancelBid', 'etc)\",\"bidId\":\"The id of the bid.\",\"message\":\"The message string to return to the user explaining why the tx was reverted\"}}],\"PaymentNotMinimum(uint256,uint256,uint256)\":[{\"params\":{\"bidId\":\"The id of the bid the borrower is attempting to repay.\",\"minimumOwed\":\"The minimum owed value\",\"payment\":\"The payment made by the borrower\"}}]},\"events\":{\"AcceptedBid(uint256,address)\":{\"params\":{\"bidId\":\"The id of the bid accepted.\",\"lender\":\"The address of the accepted bid lender.\"}},\"CancelledBid(uint256)\":{\"params\":{\"bidId\":\"The id of the cancelled bid.\"}},\"FeePaid(uint256,string,uint256)\":{\"params\":{\"amount\":\"The amount of the fee being paid.\",\"bidId\":\"The id of the bid.\",\"feeType\":\"The name of the fee being paid.\"}},\"LoanLiquidated(uint256,address)\":{\"params\":{\"bidId\":\"The id of the bid/loan which was repaid.\"}},\"LoanRepaid(uint256)\":{\"params\":{\"bidId\":\"The id of the bid/loan which was repaid.\"}},\"LoanRepayment(uint256)\":{\"params\":{\"bidId\":\"The id of the bid/loan to which the payment was made.\"}},\"MarketOwnerCancelledBid(uint256)\":{\"params\":{\"bidId\":\"The id of the bid funded. Note: The `CancelledBid` event will also be emitted.\"}},\"SubmittedBid(uint256,address,address,bytes32)\":{\"params\":{\"bidId\":\"The id of the bid submitted.\",\"borrower\":\"The address of the bid borrower.\",\"metadataURI\":\"URI for additional bid information as part of loan bid.\"}}},\"kind\":\"dev\",\"methods\":{\"addLendingToken(address)\":{\"params\":{\"_lendingToken\":\"The contract address of the lending token.\"}},\"approveMarketForwarder(uint256,address)\":{\"params\":{\"_forwarder\":\"A forwarder contract address.\",\"_marketId\":\"An ID for a lending market.\"}},\"calculateAmountDue(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to get the payment amount for.\"}},\"calculateAmountDue(uint256,uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to get the payment amount for.\",\"_timestamp\":\"The timestamp at which to get the due payment at.\"}},\"calculateAmountOwed(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to calculate the owed amount for.\"}},\"calculateAmountOwed(uint256,uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to calculate the owed amount for.\",\"_timestamp\":\"The timestamp at which to calculate the loan owed amount at.\"}},\"calculateNextDueDate(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid.\"}},\"cancelBid(uint256)\":{\"params\":{\"_bidId\":\"The id of the bid to cancel.\"}},\"getLoanBorrower(uint256)\":{\"params\":{\"_bidId\":\"The id of the bid/loan to get the borrower for.\"},\"returns\":{\"borrower_\":\"The address of the borrower associated with the bid.\"}},\"getLoanLender(uint256)\":{\"params\":{\"_bidId\":\"The id of the bid/loan to get the lender for.\"},\"returns\":{\"lender_\":\"The address of the lender associated with the bid.\"}},\"getMetadataURI(uint256)\":{\"params\":{\"_bidId\":\"The id of the bid to return the metadataURI for\"},\"returns\":{\"metadataURI_\":\"The metadataURI for the bid, as a string.\"}},\"hasApprovedMarketForwarder(uint256,address,address)\":{\"params\":{\"_account\":\"The address to verify set an approval.\",\"_forwarder\":\"A forwarder contract address.\",\"_marketId\":\"An ID for a lending market.\"},\"returns\":{\"_0\":\"A boolean indicating if an approval was set.\"}},\"initialize(uint16,address,address,address,address[],address)\":{\"params\":{\"_collateralManagerAddress\":\"The address of the collateral manager contracts.\",\"_lendingTokens\":\"The list of tokens allowed as lending assets on the protocol.\",\"_protocolFee\":\"The fee collected by the protocol for loan processing.\"}},\"isLoanDefaulted(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to check for.\"}},\"isLoanExpired(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to check for.\"}},\"isPaymentLate(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to check for.\"}},\"isTrustedMarketForwarder(uint256,address)\":{\"params\":{\"_marketId\":\"An ID for a lending market.\",\"_trustedMarketForwarder\":\"An address to check if is a trusted forwarder in the given market.\"},\"returns\":{\"_0\":\"A boolean indicating the forwarder address is trusted in a market.\"}},\"lastRepaidTimestamp(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to get the timestamp for.\"}},\"lenderAcceptBid(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to accept.\"}},\"liquidateLoanFull(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"marketOwnerCancelBid(uint256)\":{\"params\":{\"_bidId\":\"The id of the bid to cancel.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeLendingToken(address)\":{\"params\":{\"_lendingToken\":\"The contract address of the lending token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repayLoan(uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the payment.\",\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"repayLoanFull(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"repayLoanMinimum(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"setProtocolFee(uint16)\":{\"params\":{\"newFee\":\"The new protocol fee to be set.\"}},\"setReputationManager(address)\":{\"params\":{\"_reputationManager\":\"The new contract address.\"}},\"setTrustedMarketForwarder(uint256,address)\":{\"params\":{\"_forwarder\":\"A forwarder contract address.\",\"_marketId\":\"An ID for a lending market.\"}},\"submitBid(address,uint256,uint256,uint32,uint16,string,address)\":{\"params\":{\"_APR\":\"The proposed interest rate for the loan bid.\",\"_duration\":\"The recurrent length of time before which a payment is due.\",\"_lendingToken\":\"The lending token asset requested to be borrowed.\",\"_marketplaceId\":\"The unique id of the marketplace for the bid.\",\"_metadataURI\":\"The URI for additional borrower loan information as part of loan bid.\",\"_principal\":\"The principal amount of the loan bid.\",\"_receiver\":\"The address where the loan amount will be sent to.\"}},\"submitBid(address,uint256,uint256,uint32,uint16,string,address,(uint8,uint256,uint256,address)[])\":{\"params\":{\"_APR\":\"The proposed interest rate for the loan bid.\",\"_collateralInfo\":\"Additional information about the collateral asset.\",\"_duration\":\"The recurrent length of time before which a payment is due.\",\"_lendingToken\":\"The lending token asset requested to be borrowed.\",\"_marketplaceId\":\"The unique id of the marketplace for the bid.\",\"_metadataURI\":\"The URI for additional borrower loan information as part of loan bid.\",\"_principal\":\"The principal amount of the loan bid.\",\"_receiver\":\"The address where the loan amount will be sent to.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ActionNotAllowed(uint256,string,string)\":[{\"notice\":\"This error is reverted when the action isn't allowed\"}],\"PaymentNotMinimum(uint256,uint256,uint256)\":[{\"notice\":\"This error is reverted when repayment amount is less than the required minimum\"}]},\"events\":{\"AcceptedBid(uint256,address)\":{\"notice\":\"This event is emitted when a bid has been accepted by a lender.\"},\"CancelledBid(uint256)\":{\"notice\":\"This event is emitted when a previously submitted bid has been cancelled.\"},\"FeePaid(uint256,string,uint256)\":{\"notice\":\"This event is emitted when a fee has been paid related to a bid.\"},\"LoanLiquidated(uint256,address)\":{\"notice\":\"This event is emitted when a loan has been fully repaid.\"},\"LoanRepaid(uint256)\":{\"notice\":\"This event is emitted when a loan has been fully repaid.\"},\"LoanRepayment(uint256)\":{\"notice\":\"This event is emitted when a payment is made towards an active loan.\"},\"MarketOwnerCancelledBid(uint256)\":{\"notice\":\"This event is emitted when market owner has cancelled a pending bid in their market.\"},\"ProtocolFeeSet(uint16,uint16)\":{\"notice\":\"This event is emitted when the protocol fee has been updated.\"},\"SubmittedBid(uint256,address,address,bytes32)\":{\"notice\":\"This event is emitted when a new bid is submitted.\"}},\"kind\":\"user\",\"methods\":{\"CURRENT_CODE_VERSION()\":{\"notice\":\"Constant Variables *\"},\"addLendingToken(address)\":{\"notice\":\"Lets the DAO/owner of the protocol add an authorized lending token.\"},\"approveMarketForwarder(uint256,address)\":{\"notice\":\"Approves a forwarder contract to use their address as a sender for a specific market.The forwarder given must be trusted by the market given.\"},\"bidId()\":{\"notice\":\"Storage Variables \"},\"calculateAmountDue(uint256)\":{\"notice\":\"Calculates the minimum payment amount due for a loan.\"},\"calculateAmountDue(uint256,uint256)\":{\"notice\":\"Calculates the minimum payment amount due for a loan at a specific timestamp.\"},\"calculateAmountOwed(uint256)\":{\"notice\":\"Calculates the total amount owed for a bid.\"},\"calculateAmountOwed(uint256,uint256)\":{\"notice\":\"Calculates the total amount owed for a loan bid at a specific timestamp.\"},\"calculateNextDueDate(uint256)\":{\"notice\":\"Returns the next due date for a loan payment.\"},\"cancelBid(uint256)\":{\"notice\":\"Function for a borrower to cancel their pending bid.\"},\"constructor\":{\"notice\":\"Constructor *\"},\"getLendingTokens()\":{\"notice\":\"Returns the list of authorized tokens on the protocol.\"},\"getLoanBorrower(uint256)\":{\"notice\":\"Returns the borrower address for a given bid.\"},\"getLoanLender(uint256)\":{\"notice\":\"Returns the lender address for a given bid.\"},\"getMetadataURI(uint256)\":{\"notice\":\"Gets the metadataURI for a bidId.\"},\"hasApprovedMarketForwarder(uint256,address,address)\":{\"notice\":\"Checks if an account has approved a forwarder for a market.\"},\"initialize(uint16,address,address,address,address[],address)\":{\"notice\":\"Initializes the proxy.\"},\"isLoanDefaulted(uint256)\":{\"notice\":\"Checks to see if a borrower is delinquent.\"},\"isLoanExpired(uint256)\":{\"notice\":\"Checks to see if a pending loan has expired so it is no longer able to be accepted.\"},\"isPaymentLate(uint256)\":{\"notice\":\"Checks to see if a borrower is delinquent.\"},\"isTrustedMarketForwarder(uint256,address)\":{\"notice\":\"Checks if an address is a trusted forwarder contract for a given market.\"},\"lastRepaidTimestamp(uint256)\":{\"notice\":\"Returns the last repaid timestamp for a loan.\"},\"lenderAcceptBid(uint256)\":{\"notice\":\"Function for a lender to accept a proposed loan bid.\"},\"liquidateLoanFull(uint256)\":{\"notice\":\"Function for users to liquidate a defaulted loan.\"},\"marketOwnerCancelBid(uint256)\":{\"notice\":\"Function for a market owner to cancel a bid in the market.\"},\"pauseProtocol()\":{\"notice\":\"Lets the DAO/owner of the protocol implement an emergency stop mechanism.\"},\"protocolFee()\":{\"notice\":\"Returns the current protocol fee.\"},\"removeLendingToken(address)\":{\"notice\":\"Lets the DAO/owner of the protocol remove an authorized lending token.\"},\"repayLoan(uint256,uint256)\":{\"notice\":\"Function for users to make a payment towards an active loan.\"},\"repayLoanFull(uint256)\":{\"notice\":\"Function for users to repay an active loan in full.\"},\"repayLoanMinimum(uint256)\":{\"notice\":\"Function for users to make the minimum amount due for an active loan.\"},\"setProtocolFee(uint16)\":{\"notice\":\"Lets the DAO/owner of the protocol to set a new protocol fee.\"},\"setReputationManager(address)\":{\"notice\":\"Lets the DAO/owner of the protocol to set a new reputation manager contract.\"},\"setTrustedMarketForwarder(uint256,address)\":{\"notice\":\"Sets a trusted forwarder for a lending market.The caller must owner the market given. See {MarketRegistry}\"},\"submitBid(address,uint256,uint256,uint32,uint16,string,address)\":{\"notice\":\"Function for a borrower to create a bid for a loan without Collateral.\"},\"submitBid(address,uint256,uint256,uint32,uint16,string,address,(uint8,uint256,uint256,address)[])\":{\"notice\":\"Function for a borrower to create a bid for a loan with Collateral.\"},\"unpauseProtocol()\":{\"notice\":\"Lets the DAO/owner of the protocol undo a previously implemented emergency stop.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TellerV2.sol\":\"TellerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/EAS/TellerAS.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../Types.sol\\\";\\nimport \\\"../interfaces/IEAS.sol\\\";\\nimport \\\"../interfaces/IASRegistry.sol\\\";\\n\\n/**\\n * @title TellerAS - Teller Attestation Service - based on EAS - Ethereum Attestation Service\\n */\\ncontract TellerAS is IEAS {\\n    error AccessDenied();\\n    error AlreadyRevoked();\\n    error InvalidAttestation();\\n    error InvalidExpirationTime();\\n    error InvalidOffset();\\n    error InvalidRegistry();\\n    error InvalidSchema();\\n    error InvalidVerifier();\\n    error NotFound();\\n    error NotPayable();\\n\\n    string public constant VERSION = \\\"0.8\\\";\\n\\n    // A terminator used when concatenating and hashing multiple fields.\\n    string private constant HASH_TERMINATOR = \\\"@\\\";\\n\\n    // The AS global registry.\\n    IASRegistry private immutable _asRegistry;\\n\\n    // The EIP712 verifier used to verify signed attestations.\\n    IEASEIP712Verifier private immutable _eip712Verifier;\\n\\n    // A mapping between attestations and their related attestations.\\n    mapping(bytes32 => bytes32[]) private _relatedAttestations;\\n\\n    // A mapping between an account and its received attestations.\\n    mapping(address => mapping(bytes32 => bytes32[]))\\n        private _receivedAttestations;\\n\\n    // A mapping between an account and its sent attestations.\\n    mapping(address => mapping(bytes32 => bytes32[])) private _sentAttestations;\\n\\n    // A mapping between a schema and its attestations.\\n    mapping(bytes32 => bytes32[]) private _schemaAttestations;\\n\\n    // The global mapping between attestations and their UUIDs.\\n    mapping(bytes32 => Attestation) private _db;\\n\\n    // The global counter for the total number of attestations.\\n    uint256 private _attestationsCount;\\n\\n    bytes32 private _lastUUID;\\n\\n    /**\\n     * @dev Creates a new EAS instance.\\n     *\\n     * @param registry The address of the global AS registry.\\n     * @param verifier The address of the EIP712 verifier.\\n     */\\n    constructor(IASRegistry registry, IEASEIP712Verifier verifier) {\\n        if (address(registry) == address(0x0)) {\\n            revert InvalidRegistry();\\n        }\\n\\n        if (address(verifier) == address(0x0)) {\\n            revert InvalidVerifier();\\n        }\\n\\n        _asRegistry = registry;\\n        _eip712Verifier = verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getASRegistry() external view override returns (IASRegistry) {\\n        return _asRegistry;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getEIP712Verifier()\\n        external\\n        view\\n        override\\n        returns (IEASEIP712Verifier)\\n    {\\n        return _eip712Verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestationsCount() external view override returns (uint256) {\\n        return _attestationsCount;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) public payable virtual override returns (bytes32) {\\n        return\\n            _attest(\\n                recipient,\\n                schema,\\n                expirationTime,\\n                refUUID,\\n                data,\\n                msg.sender\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual override returns (bytes32) {\\n        _eip712Verifier.attest(\\n            recipient,\\n            schema,\\n            expirationTime,\\n            refUUID,\\n            data,\\n            attester,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return\\n            _attest(recipient, schema, expirationTime, refUUID, data, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revoke(bytes32 uuid) public virtual override {\\n        return _revoke(uuid, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        _eip712Verifier.revoke(uuid, attester, v, r, s);\\n\\n        _revoke(uuid, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestation(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (Attestation memory)\\n    {\\n        return _db[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationValid(bytes32 uuid)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _db[uuid].uuid != 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationActive(bytes32 uuid)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            isAttestationValid(uuid) &&\\n            _db[uuid].expirationTime >= block.timestamp &&\\n            _db[uuid].revocationTime == 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getReceivedAttestationUUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _receivedAttestations[recipient][schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getReceivedAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _receivedAttestations[recipient][schema].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSentAttestationUUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _sentAttestations[attester][schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSentAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _sentAttestations[recipient][schema].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getRelatedAttestationUUIDs(\\n        bytes32 uuid,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _relatedAttestations[uuid],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getRelatedAttestationUUIDsCount(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _relatedAttestations[uuid].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSchemaAttestationUUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _schemaAttestations[schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSchemaAttestationUUIDsCount(bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _schemaAttestations[schema].length;\\n    }\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function _attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester\\n    ) private returns (bytes32) {\\n        if (expirationTime <= block.timestamp) {\\n            revert InvalidExpirationTime();\\n        }\\n\\n        IASRegistry.ASRecord memory asRecord = _asRegistry.getAS(schema);\\n        if (asRecord.uuid == EMPTY_UUID) {\\n            revert InvalidSchema();\\n        }\\n\\n        IASResolver resolver = asRecord.resolver;\\n        if (address(resolver) != address(0x0)) {\\n            if (msg.value != 0 && !resolver.isPayable()) {\\n                revert NotPayable();\\n            }\\n\\n            if (\\n                !resolver.resolve{ value: msg.value }(\\n                    recipient,\\n                    asRecord.schema,\\n                    data,\\n                    expirationTime,\\n                    attester\\n                )\\n            ) {\\n                revert InvalidAttestation();\\n            }\\n        }\\n\\n        Attestation memory attestation = Attestation({\\n            uuid: EMPTY_UUID,\\n            schema: schema,\\n            recipient: recipient,\\n            attester: attester,\\n            time: block.timestamp,\\n            expirationTime: expirationTime,\\n            revocationTime: 0,\\n            refUUID: refUUID,\\n            data: data\\n        });\\n\\n        _lastUUID = _getUUID(attestation);\\n        attestation.uuid = _lastUUID;\\n\\n        _receivedAttestations[recipient][schema].push(_lastUUID);\\n        _sentAttestations[attester][schema].push(_lastUUID);\\n        _schemaAttestations[schema].push(_lastUUID);\\n\\n        _db[_lastUUID] = attestation;\\n        _attestationsCount++;\\n\\n        if (refUUID != 0) {\\n            if (!isAttestationValid(refUUID)) {\\n                revert NotFound();\\n            }\\n\\n            _relatedAttestations[refUUID].push(_lastUUID);\\n        }\\n\\n        emit Attested(recipient, attester, _lastUUID, schema);\\n\\n        return _lastUUID;\\n    }\\n\\n    function getLastUUID() external view returns (bytes32) {\\n        return _lastUUID;\\n    }\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     */\\n    function _revoke(bytes32 uuid, address attester) private {\\n        Attestation storage attestation = _db[uuid];\\n        if (attestation.uuid == EMPTY_UUID) {\\n            revert NotFound();\\n        }\\n\\n        if (attestation.attester != attester) {\\n            revert AccessDenied();\\n        }\\n\\n        if (attestation.revocationTime != 0) {\\n            revert AlreadyRevoked();\\n        }\\n\\n        attestation.revocationTime = block.timestamp;\\n\\n        emit Revoked(attestation.recipient, attester, uuid, attestation.schema);\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given attestation.\\n     *\\n     * @param attestation The input attestation.\\n     *\\n     * @return Attestation UUID.\\n     */\\n    function _getUUID(Attestation memory attestation)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    attestation.schema,\\n                    attestation.recipient,\\n                    attestation.attester,\\n                    attestation.time,\\n                    attestation.expirationTime,\\n                    attestation.data,\\n                    HASH_TERMINATOR,\\n                    _attestationsCount\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns a slice in an array of attestation UUIDs.\\n     *\\n     * @param uuids The array of attestation UUIDs.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function _sliceUUIDs(\\n        bytes32[] memory uuids,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) private pure returns (bytes32[] memory) {\\n        uint256 attestationsLength = uuids.length;\\n        if (attestationsLength == 0) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (start >= attestationsLength) {\\n            revert InvalidOffset();\\n        }\\n\\n        uint256 len = length;\\n        if (attestationsLength < start + length) {\\n            len = attestationsLength - start;\\n        }\\n\\n        bytes32[] memory res = new bytes32[](len);\\n\\n        for (uint256 i = 0; i < len; ++i) {\\n            res[i] = uuids[\\n                reverseOrder ? attestationsLength - (start + i + 1) : start + i\\n            ];\\n        }\\n\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x01848d2b9b7815144137d3ad654ac3246dd740f03e9e951ecf70374d71f8e354\",\"license\":\"MIT\"},\"contracts/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n * @dev This is modified from the OZ library to remove the gap of storage variables at the end.\\n */\\nabstract contract ERC2771ContextUpgradeable is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca6e53699cb6e4001eff7527dc3fcea591be3b04514ab899933fc0f107de4933\",\"license\":\"MIT\"},\"contracts/ProtocolFee.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract ProtocolFee is OwnableUpgradeable {\\n    // Protocol fee set for loan processing.\\n    uint16 private _protocolFee;\\n\\n    /**\\n     * @notice This event is emitted when the protocol fee has been updated.\\n     * @param newFee The new protocol fee set.\\n     * @param oldFee The previously set protocol fee.\\n     */\\n    event ProtocolFeeSet(uint16 newFee, uint16 oldFee);\\n\\n    /**\\n     * @notice Initialized the protocol fee.\\n     * @param initFee The initial protocol fee to be set on the protocol.\\n     */\\n    function __ProtocolFee_init(uint16 initFee) internal onlyInitializing {\\n        __Ownable_init();\\n        __ProtocolFee_init_unchained(initFee);\\n    }\\n\\n    function __ProtocolFee_init_unchained(uint16 initFee)\\n        internal\\n        onlyInitializing\\n    {\\n        setProtocolFee(initFee);\\n    }\\n\\n    /**\\n     * @notice Returns the current protocol fee.\\n     */\\n    function protocolFee() public view virtual returns (uint16) {\\n        return _protocolFee;\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol to set a new protocol fee.\\n     * @param newFee The new protocol fee to be set.\\n     */\\n    function setProtocolFee(uint16 newFee) public virtual onlyOwner {\\n        // Skip if the fee is the same\\n        if (newFee == _protocolFee) return;\\n\\n        uint16 oldFee = _protocolFee;\\n        _protocolFee = newFee;\\n        emit ProtocolFeeSet(newFee, oldFee);\\n    }\\n}\\n\",\"keccak256\":\"0x8a4fbca87131233a11efc1c5006a9b9d5ea45b82078c85726ce9e07ef13e2893\",\"license\":\"MIT\"},\"contracts/TellerV2.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n// Contracts\\nimport \\\"./ProtocolFee.sol\\\";\\nimport \\\"./TellerV2Storage.sol\\\";\\nimport \\\"./TellerV2Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"./interfaces/ITellerV2.sol\\\";\\nimport { Collateral } from \\\"./interfaces/escrow/ICollateralEscrowV1.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/NumbersLib.sol\\\";\\nimport { V2Calculations } from \\\"./libraries/V2Calculations.sol\\\";\\n\\n/* Errors */\\n/**\\n * @notice This error is reverted when the action isn't allowed\\n * @param bidId The id of the bid.\\n * @param action The action string (i.e: 'repayLoan', 'cancelBid', 'etc)\\n * @param message The message string to return to the user explaining why the tx was reverted\\n */\\nerror ActionNotAllowed(uint256 bidId, string action, string message);\\n\\n/**\\n * @notice This error is reverted when repayment amount is less than the required minimum\\n * @param bidId The id of the bid the borrower is attempting to repay.\\n * @param payment The payment made by the borrower\\n * @param minimumOwed The minimum owed value\\n */\\nerror PaymentNotMinimum(uint256 bidId, uint256 payment, uint256 minimumOwed);\\n\\ncontract TellerV2 is\\n    ITellerV2,\\n    OwnableUpgradeable,\\n    ProtocolFee,\\n    PausableUpgradeable,\\n    TellerV2Storage,\\n    TellerV2Context\\n{\\n    using Address for address;\\n    using SafeERC20 for ERC20;\\n    using NumbersLib for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /** Events */\\n\\n    /**\\n     * @notice This event is emitted when a new bid is submitted.\\n     * @param bidId The id of the bid submitted.\\n     * @param borrower The address of the bid borrower.\\n     * @param metadataURI URI for additional bid information as part of loan bid.\\n     */\\n    event SubmittedBid(\\n        uint256 indexed bidId,\\n        address indexed borrower,\\n        address receiver,\\n        bytes32 indexed metadataURI\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a bid has been accepted by a lender.\\n     * @param bidId The id of the bid accepted.\\n     * @param lender The address of the accepted bid lender.\\n     */\\n    event AcceptedBid(uint256 indexed bidId, address indexed lender);\\n\\n    /**\\n     * @notice This event is emitted when a previously submitted bid has been cancelled.\\n     * @param bidId The id of the cancelled bid.\\n     */\\n    event CancelledBid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when market owner has cancelled a pending bid in their market.\\n     * @param bidId The id of the bid funded.\\n     *\\n     * Note: The `CancelledBid` event will also be emitted.\\n     */\\n    event MarketOwnerCancelledBid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a payment is made towards an active loan.\\n     * @param bidId The id of the bid/loan to which the payment was made.\\n     */\\n    event LoanRepayment(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a loan has been fully repaid.\\n     * @param bidId The id of the bid/loan which was repaid.\\n     */\\n    event LoanRepaid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a loan has been fully repaid.\\n     * @param bidId The id of the bid/loan which was repaid.\\n     */\\n    event LoanLiquidated(uint256 indexed bidId, address indexed liquidator);\\n\\n    /**\\n     * @notice This event is emitted when a fee has been paid related to a bid.\\n     * @param bidId The id of the bid.\\n     * @param feeType The name of the fee being paid.\\n     * @param amount The amount of the fee being paid.\\n     */\\n    event FeePaid(\\n        uint256 indexed bidId,\\n        string indexed feeType,\\n        uint256 indexed amount\\n    );\\n\\n    /** Modifiers */\\n\\n    /**\\n     * @notice This modifier is used to check if the state of a bid is pending, before running an action.\\n     * @param _bidId The id of the bid to check the state for.\\n     * @param _action The desired action to run on the bid.\\n     */\\n    modifier pendingBid(uint256 _bidId, string memory _action) {\\n        if (bids[_bidId].state != BidState.PENDING) {\\n            revert ActionNotAllowed(_bidId, _action, \\\"Bid must be pending\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice This modifier is used to check if the state of a loan has been accepted, before running an action.\\n     * @param _bidId The id of the bid to check the state for.\\n     * @param _action The desired action to run on the bid.\\n     */\\n    modifier acceptedLoan(uint256 _bidId, string memory _action) {\\n        if (bids[_bidId].state != BidState.ACCEPTED) {\\n            revert ActionNotAllowed(_bidId, _action, \\\"Loan must be accepted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /** Constant Variables **/\\n\\n    uint8 public constant CURRENT_CODE_VERSION = 7;\\n\\n    /** Constructor **/\\n\\n    constructor(address trustedForwarder) TellerV2Context(trustedForwarder) {}\\n\\n    /** External Functions **/\\n\\n    /**\\n     * @notice Initializes the proxy.\\n     * @param _protocolFee The fee collected by the protocol for loan processing.\\n     * @param _lendingTokens The list of tokens allowed as lending assets on the protocol.\\n     * @param _collateralManagerAddress The address of the collateral manager contracts.\\n     */\\n    function initialize(\\n        uint16 _protocolFee,\\n        address _marketRegistry,\\n        address _reputationManager,\\n        address _lenderCommitmentForwarder,\\n        address[] calldata _lendingTokens,\\n        address _collateralManagerAddress\\n    ) external initializer {\\n        __ProtocolFee_init(_protocolFee);\\n\\n        __Pausable_init();\\n\\n        lenderCommitmentForwarder = _lenderCommitmentForwarder;\\n        marketRegistry = IMarketRegistry(_marketRegistry);\\n        reputationManager = IReputationManager(_reputationManager);\\n        _setCollateralManager(_collateralManagerAddress);\\n\\n        require(_lendingTokens.length > 0, \\\"No lending tokens specified\\\");\\n        for (uint256 i = 0; i < _lendingTokens.length; i++) {\\n            require(\\n                _lendingTokens[i].isContract(),\\n                \\\"lending token not contract\\\"\\n            );\\n            addLendingToken(_lendingTokens[i]);\\n        }\\n    }\\n\\n    function setCollateralManager(address _collateralManager)\\n        public\\n        reinitializer(CURRENT_CODE_VERSION)\\n        onlyOwner\\n    {\\n        _setCollateralManager(_collateralManager);\\n    }\\n\\n    function _setCollateralManager(address _collateralManager)\\n        internal\\n        onlyInitializing\\n    {\\n        require(\\n            address(collateralManager) == address(0),\\n            \\\"Collateral Manager already set\\\"\\n        );\\n        require(\\n            _collateralManager.isContract(),\\n            \\\"Collateral Manager must be a contract\\\"\\n        );\\n        collateralManager = ICollateralManager(_collateralManager);\\n    }\\n\\n    /**\\n     * @notice Gets the metadataURI for a bidId.\\n     * @param _bidId The id of the bid to return the metadataURI for\\n     * @return metadataURI_ The metadataURI for the bid, as a string.\\n     */\\n    function getMetadataURI(uint256 _bidId)\\n        public\\n        view\\n        returns (string memory metadataURI_)\\n    {\\n        // Check uri mapping first\\n        metadataURI_ = uris[_bidId];\\n        // If the URI is not present in the mapping\\n        if (\\n            keccak256(abi.encodePacked(metadataURI_)) ==\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 // hardcoded constant of keccak256('')\\n        ) {\\n            // Return depreciated bytes32 uri as a string\\n            uint256 convertedURI = uint256(bids[_bidId]._metadataURI);\\n            metadataURI_ = StringsUpgradeable.toHexString(convertedURI, 32);\\n        }\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol to set a new reputation manager contract.\\n     * @param _reputationManager The new contract address.\\n     */\\n    function setReputationManager(address _reputationManager) public onlyOwner {\\n        reputationManager = IReputationManager(_reputationManager);\\n    }\\n\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan without Collateral.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _marketplaceId The unique id of the marketplace for the bid.\\n     * @param _principal The principal amount of the loan bid.\\n     * @param _duration The recurrent length of time before which a payment is due.\\n     * @param _APR The proposed interest rate for the loan bid.\\n     * @param _metadataURI The URI for additional borrower loan information as part of loan bid.\\n     * @param _receiver The address where the loan amount will be sent to.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver\\n    ) public override whenNotPaused returns (uint256 bidId_) {\\n        bidId_ = _submitBid(\\n            _lendingToken,\\n            _marketplaceId,\\n            _principal,\\n            _duration,\\n            _APR,\\n            _metadataURI,\\n            _receiver\\n        );\\n    }\\n\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan with Collateral.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _marketplaceId The unique id of the marketplace for the bid.\\n     * @param _principal The principal amount of the loan bid.\\n     * @param _duration The recurrent length of time before which a payment is due.\\n     * @param _APR The proposed interest rate for the loan bid.\\n     * @param _metadataURI The URI for additional borrower loan information as part of loan bid.\\n     * @param _receiver The address where the loan amount will be sent to.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver,\\n        Collateral[] calldata _collateralInfo\\n    ) public override whenNotPaused returns (uint256 bidId_) {\\n        bidId_ = _submitBid(\\n            _lendingToken,\\n            _marketplaceId,\\n            _principal,\\n            _duration,\\n            _APR,\\n            _metadataURI,\\n            _receiver\\n        );\\n\\n        bool validation = collateralManager.commitCollateral(\\n            bidId_,\\n            _collateralInfo\\n        );\\n\\n        require(\\n            validation == true,\\n            \\\"Collateral balance could not be validated\\\"\\n        );\\n    }\\n\\n    function _submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver\\n    ) internal returns (uint256 bidId_) {\\n        address sender = _msgSenderForMarket(_marketplaceId);\\n        (bool isVerified, ) = marketRegistry.isVerifiedBorrower(\\n            _marketplaceId,\\n            sender\\n        );\\n        require(isVerified, \\\"Not verified borrower\\\");\\n        require(\\n            !marketRegistry.isMarketClosed(_marketplaceId),\\n            \\\"Market is closed\\\"\\n        );\\n        require(\\n            lendingTokensSet.contains(_lendingToken),\\n            \\\"Lending token not authorized\\\"\\n        );\\n\\n        // Set response bid ID.\\n        bidId_ = bidId;\\n\\n        // Create and store our bid into the mapping\\n        Bid storage bid = bids[bidId];\\n        bid.borrower = sender;\\n        bid.receiver = _receiver != address(0) ? _receiver : bid.borrower;\\n        bid.marketplaceId = _marketplaceId;\\n        bid.loanDetails.lendingToken = ERC20(_lendingToken);\\n        bid.loanDetails.principal = _principal;\\n        bid.loanDetails.loanDuration = _duration;\\n        bid.loanDetails.timestamp = uint32(block.timestamp);\\n\\n        bid.terms.paymentCycle = marketRegistry.getPaymentCycleDuration(\\n            _marketplaceId\\n        );\\n        bid.terms.APR = _APR;\\n\\n        bidDefaultDuration[bidId] = marketRegistry.getPaymentDefaultDuration(\\n            _marketplaceId\\n        );\\n\\n        bidExpirationTime[bidId] = marketRegistry.getBidExpirationTime(\\n            _marketplaceId\\n        );\\n\\n        bid.paymentType = marketRegistry.getPaymentType(_marketplaceId);\\n\\n        bid.terms.paymentCycleAmount = V2Calculations\\n            .calculatePaymentCycleAmount(\\n                bid.paymentType,\\n                _principal,\\n                _duration,\\n                bid.terms.paymentCycle,\\n                _APR\\n            );\\n\\n        uris[bidId] = _metadataURI;\\n        bid.state = BidState.PENDING;\\n\\n        emit SubmittedBid(\\n            bidId,\\n            bid.borrower,\\n            bid.receiver,\\n            keccak256(abi.encodePacked(_metadataURI))\\n        );\\n\\n        // Store bid inside borrower bids mapping\\n        borrowerBids[bid.borrower].push(bidId);\\n\\n        // Increment bid id counter\\n        bidId++;\\n    }\\n\\n    /**\\n     * @notice Function for a borrower to cancel their pending bid.\\n     * @param _bidId The id of the bid to cancel.\\n     */\\n    function cancelBid(uint256 _bidId) external {\\n        if (\\n            _msgSenderForMarket(bids[_bidId].marketplaceId) !=\\n            bids[_bidId].borrower\\n        ) {\\n            revert ActionNotAllowed({\\n                bidId: _bidId,\\n                action: \\\"cancelBid\\\",\\n                message: \\\"Only the bid owner can cancel!\\\"\\n            });\\n        }\\n        _cancelBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for a market owner to cancel a bid in the market.\\n     * @param _bidId The id of the bid to cancel.\\n     */\\n    function marketOwnerCancelBid(uint256 _bidId) external {\\n        if (\\n            _msgSender() !=\\n            marketRegistry.getMarketOwner(bids[_bidId].marketplaceId)\\n        ) {\\n            revert ActionNotAllowed({\\n                bidId: _bidId,\\n                action: \\\"marketOwnerCancelBid\\\",\\n                message: \\\"Only the market owner can cancel!\\\"\\n            });\\n        }\\n        _cancelBid(_bidId);\\n        emit MarketOwnerCancelledBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for users to cancel a bid.\\n     * @param _bidId The id of the bid to be cancelled.\\n     */\\n    function _cancelBid(uint256 _bidId)\\n        internal\\n        pendingBid(_bidId, \\\"cancelBid\\\")\\n    {\\n        // Set the bid state to CANCELLED\\n        bids[_bidId].state = BidState.CANCELLED;\\n\\n        // Emit CancelledBid event\\n        emit CancelledBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for a lender to accept a proposed loan bid.\\n     * @param _bidId The id of the loan bid to accept.\\n     */\\n    function lenderAcceptBid(uint256 _bidId)\\n        external\\n        override\\n        pendingBid(_bidId, \\\"lenderAcceptBid\\\")\\n        whenNotPaused\\n        returns (\\n            uint256 amountToProtocol,\\n            uint256 amountToMarketplace,\\n            uint256 amountToBorrower\\n        )\\n    {\\n        // Retrieve bid\\n        Bid storage bid = bids[_bidId];\\n\\n        address sender = _msgSenderForMarket(bid.marketplaceId);\\n        (bool isVerified, ) = marketRegistry.isVerifiedLender(\\n            bid.marketplaceId,\\n            sender\\n        );\\n        require(isVerified, \\\"Not verified lender\\\");\\n\\n        require(\\n            !marketRegistry.isMarketClosed(bid.marketplaceId),\\n            \\\"Market is closed\\\"\\n        );\\n\\n        require(!isLoanExpired(_bidId), \\\"Bid has expired\\\");\\n\\n        // Set timestamp\\n        bid.loanDetails.acceptedTimestamp = uint32(block.timestamp);\\n        bid.loanDetails.lastRepaidTimestamp = uint32(block.timestamp);\\n\\n        // Mark borrower's request as accepted\\n        bid.state = BidState.ACCEPTED;\\n\\n        // Declare the bid acceptor as the lender of the bid\\n        bid.lender = sender;\\n\\n        // Tell the collateral manager to deploy the escrow and pull funds from the borrower if applicable\\n        collateralManager.deployAndDeposit(_bidId);\\n\\n        // Transfer funds to borrower from the lender\\n        amountToProtocol = bid.loanDetails.principal.percent(protocolFee());\\n        amountToMarketplace = bid.loanDetails.principal.percent(\\n            marketRegistry.getMarketplaceFee(bid.marketplaceId)\\n        );\\n        amountToBorrower =\\n            bid.loanDetails.principal -\\n            amountToProtocol -\\n            amountToMarketplace;\\n        //transfer fee to protocol\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            bid.lender,\\n            owner(),\\n            amountToProtocol\\n        );\\n\\n        //transfer fee to marketplace\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            bid.lender,\\n            marketRegistry.getMarketFeeRecipient(bid.marketplaceId),\\n            amountToMarketplace\\n        );\\n\\n        //transfer funds to borrower\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            bid.lender,\\n            bid.receiver,\\n            amountToBorrower\\n        );\\n\\n        // Record volume filled by lenders\\n        lenderVolumeFilled[address(bid.loanDetails.lendingToken)][\\n            bid.lender\\n        ] += bid.loanDetails.principal;\\n        totalVolumeFilled[address(bid.loanDetails.lendingToken)] += bid\\n            .loanDetails\\n            .principal;\\n\\n        // Add borrower's active bid\\n        _borrowerBidsActive[bid.borrower].add(_bidId);\\n\\n        // Emit AcceptedBid\\n        emit AcceptedBid(_bidId, bid.lender);\\n\\n        emit FeePaid(_bidId, \\\"protocol\\\", amountToProtocol);\\n        emit FeePaid(_bidId, \\\"marketplace\\\", amountToMarketplace);\\n    }\\n\\n    /**\\n     * @notice Function for users to make the minimum amount due for an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanMinimum(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        (\\n            uint256 owedPrincipal,\\n            uint256 duePrincipal,\\n            uint256 interest\\n        ) = V2Calculations.calculateAmountOwed(bids[_bidId], block.timestamp);\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: duePrincipal, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n    }\\n\\n    /**\\n     * @notice Function for users to repay an active loan in full.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanFull(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bids[_bidId], block.timestamp);\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: owedPrincipal, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n    }\\n\\n    // function that the borrower (ideally) sends to repay the loan\\n    /**\\n     * @notice Function for users to make a payment towards an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _amount The amount of the payment.\\n     */\\n    function repayLoan(uint256 _bidId, uint256 _amount)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        (\\n            uint256 owedPrincipal,\\n            uint256 duePrincipal,\\n            uint256 interest\\n        ) = V2Calculations.calculateAmountOwed(bids[_bidId], block.timestamp);\\n        uint256 minimumOwed = duePrincipal + interest;\\n\\n        // If amount is less than minimumOwed, we revert\\n        if (_amount < minimumOwed) {\\n            revert PaymentNotMinimum(_bidId, _amount, minimumOwed);\\n        }\\n\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: _amount - interest, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol implement an emergency stop mechanism.\\n     */\\n    function pauseProtocol() public virtual onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol undo a previously implemented emergency stop.\\n     */\\n    function unpauseProtocol() public virtual onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    //TODO: add an incentive for liquidator\\n    /**\\n     * @notice Function for users to liquidate a defaulted loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function liquidateLoanFull(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"liquidateLoan\\\")\\n    {\\n        require(isLoanDefaulted(_bidId), \\\"Loan must be defaulted.\\\");\\n\\n        Bid storage bid = bids[_bidId];\\n\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bid, block.timestamp);\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: owedPrincipal, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n\\n        bid.state = BidState.LIQUIDATED;\\n\\n        // If loan is backed by collateral, withdraw and send to the liquidator\\n        address liquidator = _msgSenderForMarket(bid.marketplaceId);\\n        collateralManager.liquidateCollateral(_bidId, liquidator);\\n\\n        emit LoanLiquidated(_bidId, liquidator);\\n    }\\n\\n    /**\\n     * @notice Internal function to make a loan payment.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _payment The Payment struct with payments amounts towards principal and interest respectively.\\n     * @param _owedAmount The total amount owed on the loan.\\n     */\\n    function _repayLoan(\\n        uint256 _bidId,\\n        Payment memory _payment,\\n        uint256 _owedAmount\\n    ) internal {\\n        Bid storage bid = bids[_bidId];\\n        uint256 paymentAmount = _payment.principal + _payment.interest;\\n\\n        RepMark mark = reputationManager.updateAccountReputation(\\n            bid.borrower,\\n            _bidId\\n        );\\n\\n        // Check if we are sending a payment or amount remaining\\n        if (paymentAmount >= _owedAmount) {\\n            paymentAmount = _owedAmount;\\n            bid.state = BidState.PAID;\\n\\n            // Remove borrower's active bid\\n            _borrowerBidsActive[bid.borrower].remove(_bidId);\\n\\n            // If loan is backed by collateral, withdraw and send to borrower\\n            collateralManager.withdraw(_bidId);\\n\\n            emit LoanRepaid(_bidId);\\n        } else {\\n            emit LoanRepayment(_bidId);\\n        }\\n        // Send payment to the lender\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            _msgSenderForMarket(bid.marketplaceId),\\n            bid.lender,\\n            paymentAmount\\n        );\\n\\n        // update our mappings\\n        bid.loanDetails.totalRepaid.principal += _payment.principal;\\n        bid.loanDetails.totalRepaid.interest += _payment.interest;\\n        bid.loanDetails.lastRepaidTimestamp = uint32(block.timestamp);\\n\\n        // If the loan is paid in full and has a mark, we should update the current reputation\\n        if (mark != RepMark.Good) {\\n            reputationManager.updateAccountReputation(bid.borrower, _bidId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount owed for a bid.\\n     * @param _bidId The id of the loan bid to calculate the owed amount for.\\n     */\\n    function calculateAmountOwed(uint256 _bidId)\\n        public\\n        view\\n        returns (Payment memory owed)\\n    {\\n        if (bids[_bidId].state != BidState.ACCEPTED) return owed;\\n\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bids[_bidId], block.timestamp);\\n        owed.principal = owedPrincipal;\\n        owed.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount owed for a loan bid at a specific timestamp.\\n     * @param _bidId The id of the loan bid to calculate the owed amount for.\\n     * @param _timestamp The timestamp at which to calculate the loan owed amount at.\\n     */\\n    function calculateAmountOwed(uint256 _bidId, uint256 _timestamp)\\n        public\\n        view\\n        returns (Payment memory owed)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        if (\\n            bid.state != BidState.ACCEPTED ||\\n            bid.loanDetails.acceptedTimestamp >= _timestamp\\n        ) return owed;\\n\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bid, _timestamp);\\n        owed.principal = owedPrincipal;\\n        owed.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Calculates the minimum payment amount due for a loan.\\n     * @param _bidId The id of the loan bid to get the payment amount for.\\n     */\\n    function calculateAmountDue(uint256 _bidId)\\n        public\\n        view\\n        returns (Payment memory due)\\n    {\\n        if (bids[_bidId].state != BidState.ACCEPTED) return due;\\n\\n        (, uint256 duePrincipal, uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bids[_bidId], block.timestamp);\\n        due.principal = duePrincipal;\\n        due.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Calculates the minimum payment amount due for a loan at a specific timestamp.\\n     * @param _bidId The id of the loan bid to get the payment amount for.\\n     * @param _timestamp The timestamp at which to get the due payment at.\\n     */\\n    function calculateAmountDue(uint256 _bidId, uint256 _timestamp)\\n        public\\n        view\\n        returns (Payment memory due)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        if (\\n            bids[_bidId].state != BidState.ACCEPTED ||\\n            bid.loanDetails.acceptedTimestamp >= _timestamp\\n        ) return due;\\n\\n        (, uint256 duePrincipal, uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bid, _timestamp);\\n        due.principal = duePrincipal;\\n        due.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Returns the next due date for a loan payment.\\n     * @param _bidId The id of the loan bid.\\n     */\\n    function calculateNextDueDate(uint256 _bidId)\\n        public\\n        view\\n        returns (uint32 dueDate_)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        if (bids[_bidId].state != BidState.ACCEPTED) return dueDate_;\\n\\n        // Start with the original due date being 1 payment cycle since bid was accepted\\n        dueDate_ = bid.loanDetails.acceptedTimestamp + bid.terms.paymentCycle;\\n\\n        // Calculate the cycle number the last repayment was made\\n        uint32 delta = lastRepaidTimestamp(_bidId) -\\n            bid.loanDetails.acceptedTimestamp;\\n        if (delta > 0) {\\n            uint32 repaymentCycle = 1 + (delta / bid.terms.paymentCycle);\\n            dueDate_ += (repaymentCycle * bid.terms.paymentCycle);\\n        }\\n\\n        //if we are in the last payment cycle, the next due date is the end of loan duration\\n        if (\\n            dueDate_ >\\n            bid.loanDetails.acceptedTimestamp + bid.loanDetails.loanDuration\\n        ) {\\n            dueDate_ =\\n                bid.loanDetails.acceptedTimestamp +\\n                bid.loanDetails.loanDuration;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isPaymentLate(uint256 _bidId) public view override returns (bool) {\\n        if (bids[_bidId].state != BidState.ACCEPTED) return false;\\n        return uint32(block.timestamp) > calculateNextDueDate(_bidId);\\n    }\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isLoanDefaulted(uint256 _bidId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        Bid storage bid = bids[_bidId];\\n\\n        // Make sure loan cannot be liquidated if it is not active\\n        if (bid.state != BidState.ACCEPTED) return false;\\n\\n        if (bidDefaultDuration[_bidId] == 0) return false;\\n\\n        return (uint32(block.timestamp) - lastRepaidTimestamp(_bidId) >\\n            bidDefaultDuration[_bidId]);\\n    }\\n\\n    function getBidState(uint256 _bidId)\\n        external\\n        view\\n        override\\n        returns (BidState)\\n    {\\n        return bids[_bidId].state;\\n    }\\n\\n    function getBorrowerActiveLoanIds(address _borrower)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _borrowerBidsActive[_borrower].values();\\n    }\\n\\n    function getBorrowerLoanIds(address _borrower)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return borrowerBids[_borrower];\\n    }\\n\\n    /**\\n     * @notice Checks to see if a pending loan has expired so it is no longer able to be accepted.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isLoanExpired(uint256 _bidId) public view returns (bool) {\\n        Bid storage bid = bids[_bidId];\\n\\n        if (bid.state != BidState.PENDING) return false;\\n        if (bidExpirationTime[_bidId] == 0) return false;\\n\\n        return (uint32(block.timestamp) >\\n            bid.loanDetails.timestamp + bidExpirationTime[_bidId]);\\n    }\\n\\n    /**\\n     * @notice Returns the last repaid timestamp for a loan.\\n     * @param _bidId The id of the loan bid to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(uint256 _bidId) public view returns (uint32) {\\n        return V2Calculations.lastRepaidTimestamp(bids[_bidId]);\\n    }\\n\\n    /**\\n     * @notice Returns the list of authorized tokens on the protocol.\\n     */\\n    function getLendingTokens() public view returns (address[] memory) {\\n        return lendingTokensSet.values();\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol add an authorized lending token.\\n     * @param _lendingToken The contract address of the lending token.\\n     */\\n    function addLendingToken(address _lendingToken) public onlyOwner {\\n        require(_lendingToken.isContract(), \\\"Incorrect lending token address\\\");\\n        lendingTokensSet.add(_lendingToken);\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol remove an authorized lending token.\\n     * @param _lendingToken The contract address of the lending token.\\n     */\\n    function removeLendingToken(address _lendingToken) public onlyOwner {\\n        lendingTokensSet.remove(_lendingToken);\\n    }\\n\\n    /**\\n     * @notice Returns the borrower address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the borrower for.\\n     * @return borrower_ The address of the borrower associated with the bid.\\n     */\\n    function getLoanBorrower(uint256 _bidId)\\n        external\\n        view\\n        returns (address borrower_)\\n    {\\n        borrower_ = bids[_bidId].borrower;\\n    }\\n\\n    /**\\n     * @notice Returns the lender address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the lender for.\\n     * @return lender_ The address of the lender associated with the bid.\\n     */\\n    function getLoanLender(uint256 _bidId)\\n        external\\n        view\\n        returns (address lender_)\\n    {\\n        lender_ = bids[_bidId].lender;\\n    }\\n\\n    function getLoanLendingToken(uint256 _bidId)\\n        external\\n        view\\n        returns (address token_)\\n    {\\n        token_ = address(bids[_bidId].loanDetails.lendingToken);\\n    }\\n\\n    /** OpenZeppelin Override Functions **/\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextUpgradeable, ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        sender = ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextUpgradeable, ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xda6b685bf529e70ce9849bddbc808df4def2dccb146a77e480e232950c68ec8f\",\"license\":\"MIT\"},\"contracts/TellerV2Context.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./TellerV2Storage.sol\\\";\\nimport \\\"./ERC2771ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev This contract should not use any storage\\n */\\n\\nabstract contract TellerV2Context is\\n    ERC2771ContextUpgradeable,\\n    TellerV2Storage\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event TrustedMarketForwarderSet(\\n        uint256 indexed marketId,\\n        address forwarder,\\n        address sender\\n    );\\n    event MarketForwarderApproved(\\n        uint256 indexed marketId,\\n        address indexed forwarder,\\n        address sender\\n    );\\n\\n    constructor(address trustedForwarder)\\n        ERC2771ContextUpgradeable(trustedForwarder)\\n    {}\\n\\n    /**\\n     * @notice Checks if an address is a trusted forwarder contract for a given market.\\n     * @param _marketId An ID for a lending market.\\n     * @param _trustedMarketForwarder An address to check if is a trusted forwarder in the given market.\\n     * @return A boolean indicating the forwarder address is trusted in a market.\\n     */\\n    function isTrustedMarketForwarder(\\n        uint256 _marketId,\\n        address _trustedMarketForwarder\\n    ) public view returns (bool) {\\n        return\\n            _trustedMarketForwarders[_marketId] == _trustedMarketForwarder ||\\n            lenderCommitmentForwarder == _trustedMarketForwarder;\\n    }\\n\\n    /**\\n     * @notice Checks if an account has approved a forwarder for a market.\\n     * @param _marketId An ID for a lending market.\\n     * @param _forwarder A forwarder contract address.\\n     * @param _account The address to verify set an approval.\\n     * @return A boolean indicating if an approval was set.\\n     */\\n    function hasApprovedMarketForwarder(\\n        uint256 _marketId,\\n        address _forwarder,\\n        address _account\\n    ) public view returns (bool) {\\n        return\\n            isTrustedMarketForwarder(_marketId, _forwarder) &&\\n            _approvedForwarderSenders[_forwarder].contains(_account);\\n    }\\n\\n    /**\\n     * @notice Sets a trusted forwarder for a lending market.\\n     * @notice The caller must owner the market given. See {MarketRegistry}\\n     * @param _marketId An ID for a lending market.\\n     * @param _forwarder A forwarder contract address.\\n     */\\n    function setTrustedMarketForwarder(uint256 _marketId, address _forwarder)\\n        external\\n    {\\n        require(\\n            marketRegistry.getMarketOwner(_marketId) == _msgSender(),\\n            \\\"Caller must be the market owner\\\"\\n        );\\n        _trustedMarketForwarders[_marketId] = _forwarder;\\n        emit TrustedMarketForwarderSet(_marketId, _forwarder, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Approves a forwarder contract to use their address as a sender for a specific market.\\n     * @notice The forwarder given must be trusted by the market given.\\n     * @param _marketId An ID for a lending market.\\n     * @param _forwarder A forwarder contract address.\\n     */\\n    function approveMarketForwarder(uint256 _marketId, address _forwarder)\\n        external\\n    {\\n        require(\\n            isTrustedMarketForwarder(_marketId, _forwarder),\\n            \\\"Forwarder must be trusted by the market\\\"\\n        );\\n        _approvedForwarderSenders[_forwarder].add(_msgSender());\\n        emit MarketForwarderApproved(_marketId, _forwarder, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Retrieves the function caller address by checking the appended calldata if the _actual_ caller is a trusted forwarder.\\n     * @param _marketId An ID for a lending market.\\n     * @return sender The address to use as the function caller.\\n     */\\n    function _msgSenderForMarket(uint256 _marketId)\\n        internal\\n        view\\n        virtual\\n        returns (address)\\n    {\\n        if (isTrustedMarketForwarder(_marketId, _msgSender())) {\\n            address sender;\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n            // Ensure the appended sender address approved the forwarder\\n            require(\\n                _approvedForwarderSenders[_msgSender()].contains(sender),\\n                \\\"Sender must approve market forwarder\\\"\\n            );\\n            return sender;\\n        }\\n\\n        return _msgSender();\\n    }\\n\\n    /**\\n     * @notice Retrieves the actual function calldata from a trusted forwarder call.\\n     * @param _marketId An ID for a lending market to verify if the caller is a trusted forwarder.\\n     * @return calldata The modified bytes array of the function calldata without the appended sender's address.\\n     */\\n    function _msgDataForMarket(uint256 _marketId)\\n        internal\\n        view\\n        virtual\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedMarketForwarder(_marketId, _msgSender())) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return _msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac04758cc31571352e976d2b33e660d8161176fdf712c76049fb1eda2289f551\",\"license\":\"MIT\"},\"contracts/TellerV2Storage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport { IMarketRegistry } from \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/ICollateralManager.sol\\\";\\nimport { PaymentType } from \\\"./libraries/V2Calculations.sol\\\";\\n\\nenum BidState {\\n    NONEXISTENT,\\n    PENDING,\\n    CANCELLED,\\n    ACCEPTED,\\n    PAID,\\n    LIQUIDATED\\n}\\n\\n/**\\n * @notice Represents a total amount for a payment.\\n * @param principal Amount that counts towards the principal.\\n * @param interest  Amount that counts toward interest.\\n */\\nstruct Payment {\\n    uint256 principal;\\n    uint256 interest;\\n}\\n\\n/**\\n * @notice Details about a loan request.\\n * @param borrower Account address who is requesting a loan.\\n * @param receiver Account address who will receive the loan amount.\\n * @param lender Account address who accepted and funded the loan request.\\n * @param marketplaceId ID of the marketplace the bid was submitted to.\\n * @param metadataURI ID of off chain metadata to find additional information of the loan request.\\n * @param loanDetails Struct of the specific loan details.\\n * @param terms Struct of the loan request terms.\\n * @param state Represents the current state of the loan.\\n */\\nstruct Bid {\\n    address borrower;\\n    address receiver;\\n    address lender;\\n    uint256 marketplaceId;\\n    bytes32 _metadataURI; // DEPRECATED\\n    LoanDetails loanDetails;\\n    Terms terms;\\n    BidState state;\\n    PaymentType paymentType;\\n}\\n\\n/**\\n * @notice Details about the loan.\\n * @param lendingToken The token address for the loan.\\n * @param principal The amount of tokens initially lent out.\\n * @param totalRepaid Payment struct that represents the total principal and interest amount repaid.\\n * @param timestamp Timestamp, in seconds, of when the bid was submitted by the borrower.\\n * @param acceptedTimestamp Timestamp, in seconds, of when the bid was accepted by the lender.\\n * @param lastRepaidTimestamp Timestamp, in seconds, of when the last payment was made\\n * @param loanDuration The duration of the loan.\\n */\\nstruct LoanDetails {\\n    ERC20 lendingToken;\\n    uint256 principal;\\n    Payment totalRepaid;\\n    uint32 timestamp;\\n    uint32 acceptedTimestamp;\\n    uint32 lastRepaidTimestamp;\\n    uint32 loanDuration;\\n}\\n\\n/**\\n * @notice Information on the terms of a loan request\\n * @param paymentCycleAmount Value of tokens expected to be repaid every payment cycle.\\n * @param paymentCycle Duration, in seconds, of how often a payment must be made.\\n * @param APR Annual percentage rating to be applied on repayments. (10000 == 100%)\\n */\\nstruct Terms {\\n    uint256 paymentCycleAmount;\\n    uint32 paymentCycle;\\n    uint16 APR;\\n}\\n\\nabstract contract TellerV2Storage_G0 {\\n\\n    /** Storage Variables */\\n\\n    // Current number of bids.\\n    uint256 public bidId = 0;\\n\\n    // Mapping of bidId to bid information.\\n    mapping(uint256 => Bid) public bids;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => uint256[]) public borrowerBids;\\n\\n    // Mapping of volume filled by lenders.\\n    mapping(address => uint256) public _lenderVolumeFilled; // DEPRECIATED\\n\\n    // Volume filled by all lenders.\\n    uint256 public _totalVolumeFilled; // DEPRECIATED\\n\\n    // List of allowed lending tokens\\n    EnumerableSet.AddressSet internal lendingTokensSet;\\n\\n    IMarketRegistry public marketRegistry;\\n    IReputationManager public reputationManager;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => EnumerableSet.UintSet) internal _borrowerBidsActive;\\n\\n    mapping(uint256 => uint32) public bidDefaultDuration;\\n    mapping(uint256 => uint32) public bidExpirationTime;\\n\\n    // Mapping of volume filled by lenders.\\n    // Asset address => Lender address => Volume amount\\n    mapping(address => mapping(address => uint256)) public lenderVolumeFilled;\\n\\n    // Volume filled by all lenders.\\n    // Asset address => Volume amount\\n    mapping(address => uint256) public totalVolumeFilled;\\n\\n    uint256 public version;\\n\\n    // Mapping of metadataURIs by bidIds.\\n    // Bid Id => metadataURI string\\n    mapping(uint256 => string) public uris;\\n}\\n\\nabstract contract TellerV2Storage_G1 is TellerV2Storage_G0 {\\n    // market ID => trusted forwarder\\n    mapping(uint256 => address) internal _trustedMarketForwarders;\\n    // trusted forwarder => set of pre-approved senders\\n    mapping(address => EnumerableSet.AddressSet)\\n        internal _approvedForwarderSenders;\\n}\\n\\nabstract contract TellerV2Storage_G2 is TellerV2Storage_G1 {\\n    address public lenderCommitmentForwarder;\\n}\\n\\nabstract contract TellerV2Storage_G3 is TellerV2Storage_G2 {\\n    ICollateralManager public collateralManager;\\n}\\n\\nabstract contract TellerV2Storage is TellerV2Storage_G3 {}\\n\",\"keccak256\":\"0xf22cf7ad01c859d781d1b3447154e3d4ed5a1a1466c208f0e4856133f3a9f9f4\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0x2e4bcf4a965f840193af8729251386c1826cd050411ba4a9e85984a2551fd2ff\",\"license\":\"MIT\"},\"contracts/interfaces/IASRegistry.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title The global AS registry interface.\\n */\\ninterface IASRegistry {\\n    /**\\n     * @title A struct representing a record for a submitted AS (Attestation Schema).\\n     */\\n    struct ASRecord {\\n        // A unique identifier of the AS.\\n        bytes32 uuid;\\n        // Optional schema resolver.\\n        IASResolver resolver;\\n        // Auto-incrementing index for reference, assigned by the registry itself.\\n        uint256 index;\\n        // Custom specification of the AS (e.g., an ABI).\\n        bytes schema;\\n    }\\n\\n    /**\\n     * @dev Triggered when a new AS has been registered\\n     *\\n     * @param uuid The AS UUID.\\n     * @param index The AS index.\\n     * @param schema The AS schema.\\n     * @param resolver An optional AS schema resolver.\\n     * @param attester The address of the account used to register the AS.\\n     */\\n    event Registered(\\n        bytes32 indexed uuid,\\n        uint256 indexed index,\\n        bytes schema,\\n        IASResolver resolver,\\n        address attester\\n    );\\n\\n    /**\\n     * @dev Submits and reserve a new AS\\n     *\\n     * @param schema The AS data schema.\\n     * @param resolver An optional AS schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, IASResolver resolver)\\n        external\\n        returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing AS by UUID\\n     *\\n     * @param uuid The UUID of the AS to retrieve.\\n     *\\n     * @return The AS data members.\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getASCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x74752921f592df45c8717d7084627e823b1dbc93bad7187cd3023c9690df7e60\",\"license\":\"MIT\"},\"contracts/interfaces/IASResolver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title The interface of an optional AS resolver.\\n */\\ninterface IASResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The AS data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint256 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xfce671ea099d9f997a69c3447eb4a9c9693d37c5b97e43ada376e614e1c7cb61\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralManager.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { Collateral } from \\\"./escrow/ICollateralEscrowV1.sol\\\";\\n\\ninterface ICollateralManager {\\n    /**\\n     * @notice Checks the validity of a borrower's collateral balance.\\n     * @param _bidId The id of the associated bid.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function commitCollateral(\\n        uint256 _bidId,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (bool validation_);\\n\\n    /**\\n     * @notice Checks the validity of a borrower's collateral balance and commits it to a bid.\\n     * @param _bidId The id of the associated bid.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function commitCollateral(\\n        uint256 _bidId,\\n        Collateral calldata _collateralInfo\\n    ) external returns (bool validation_);\\n\\n    function checkBalances(\\n        address _borrowerAddress,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (bool validated_, bool[] memory checks_);\\n\\n    /**\\n     * @notice Deploys a new collateral escrow.\\n     * @param _bidId The associated bidId of the collateral escrow.\\n     */\\n    function deployAndDeposit(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Gets the address of a deployed escrow.\\n     * @notice _bidId The bidId to return the escrow for.\\n     * @return The address of the escrow.\\n     */\\n    function getEscrow(uint256 _bidId) external view returns (address);\\n\\n    /**\\n     * @notice Gets the collateral info for a given bid id.\\n     * @param _bidId The bidId to return the collateral info for.\\n     * @return The stored collateral info.\\n     */\\n    function getCollateralInfo(uint256 _bidId)\\n        external\\n        view\\n        returns (Collateral[] memory);\\n\\n    /**\\n     * @notice Withdraws deposited collateral from the created escrow of a bid.\\n     * @param _bidId The id of the bid to withdraw collateral for.\\n     */\\n    function withdraw(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Re-checks the validity of a borrower's collateral balance committed to a bid.\\n     * @param _bidId The id of the associated bid.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function revalidateCollateral(uint256 _bidId) external returns (bool);\\n\\n    /**\\n     * @notice Allows collateral to be claimed for a defaulted loan.\\n     * @param _bidId The id of the bid to claim the collateral for.\\n     */\\n    function claimCollateral(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Sends the deposited collateral to a liquidator of a bid.\\n     * @notice Can only be called by the protocol.\\n     * @param _bidId The id of the liquidated bid.\\n     * @param _liquidatorAddress The address of the liquidator to send the collateral to.\\n     */\\n    function liquidateCollateral(\\n        uint256 _bidId,\\n        address _liquidatorAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68aa145a58fa9046503186825f5c4b80a37f06ff7b18fc3a16d920dda133be38\"},\"contracts/interfaces/IEAS.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASRegistry.sol\\\";\\nimport \\\"./IEASEIP712Verifier.sol\\\";\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface\\n */\\ninterface IEAS {\\n    /**\\n     * @dev A struct representing a single attestation.\\n     */\\n    struct Attestation {\\n        // A unique identifier of the attestation.\\n        bytes32 uuid;\\n        // A unique identifier of the AS.\\n        bytes32 schema;\\n        // The recipient of the attestation.\\n        address recipient;\\n        // The attester/sender of the attestation.\\n        address attester;\\n        // The time when the attestation was created (Unix timestamp).\\n        uint256 time;\\n        // The time when the attestation expires (Unix timestamp).\\n        uint256 expirationTime;\\n        // The time when the attestation was revoked (Unix timestamp).\\n        uint256 revocationTime;\\n        // The UUID of the related attestation.\\n        bytes32 refUUID;\\n        // Custom attestation data.\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Triggered when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uuid The UUID the revoked attestation.\\n     * @param schema The UUID of the AS.\\n     */\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uuid,\\n        bytes32 indexed schema\\n    );\\n\\n    /**\\n     * @dev Triggered when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param uuid The UUID the revoked attestation.\\n     */\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uuid,\\n        bytes32 indexed schema\\n    );\\n\\n    /**\\n     * @dev Returns the address of the AS global registry.\\n     *\\n     * @return The address of the AS global registry.\\n     */\\n    function getASRegistry() external view returns (IASRegistry);\\n\\n    /**\\n     * @dev Returns the address of the EIP712 verifier used to verify signed attestations.\\n     *\\n     * @return The address of the EIP712 verifier used to verify signed attestations.\\n     */\\n    function getEIP712Verifier() external view returns (IEASEIP712Verifier);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations.\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getAttestationsCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     */\\n    function revoke(bytes32 uuid) external;\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns an existing attestation by UUID.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uuid)\\n        external\\n        view\\n        returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uuid) external view returns (bool);\\n\\n    /**\\n     * @dev Checks whether an attestation is active.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation is active.\\n     */\\n    function isAttestationActive(bytes32 uuid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all received attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getReceivedAttestationUUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of received attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getReceivedAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all sent attestation UUIDs.\\n     *\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getSentAttestationUUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of sent attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getSentAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all attestations related to a specific attestation.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getRelatedAttestationUUIDs(\\n        bytes32 uuid,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of related attestation UUIDs.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The number of related attestations.\\n     */\\n    function getRelatedAttestationUUIDsCount(bytes32 uuid)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all per-schema attestation UUIDs.\\n     *\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getSchemaAttestationUUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of per-schema  attestation UUIDs.\\n     *\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getSchemaAttestationUUIDsCount(bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5db90829269f806ed14a6c638f38d4aac1fa0f85829b34a2fcddd5200261c148\",\"license\":\"MIT\"},\"contracts/interfaces/IEASEIP712Verifier.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title EIP712 typed signatures verifier for EAS delegated attestations interface.\\n */\\ninterface IEASEIP712Verifier {\\n    /**\\n     * @dev Returns the current nonce per-account.\\n     *\\n     * @param account The requested accunt.\\n     *\\n     * @return The current nonce.\\n     */\\n    function getNonce(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Verifies signed attestation.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Verifies signed revocations.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revoke(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeca3ac3bacec52af15b2c86c5bf1a1be315aade51fa86f95da2b426b28486b1e\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../EAS/TellerAS.sol\\\";\\nimport { PaymentType } from \\\"../libraries/V2Calculations.sol\\\";\\n\\ninterface IMarketRegistry {\\n    function initialize(TellerAS tellerAs) external;\\n\\n    function isVerifiedLender(uint256 _marketId, address _lender)\\n        external\\n        returns (bool, bytes32);\\n\\n    function isMarketClosed(uint256 _marketId) external returns (bool);\\n\\n    function isVerifiedBorrower(uint256 _marketId, address _borrower)\\n        external\\n        returns (bool, bytes32);\\n\\n    function getMarketOwner(uint256 _marketId) external returns (address);\\n\\n    function getMarketFeeRecipient(uint256 _marketId)\\n        external\\n        returns (address);\\n\\n    function getMarketURI(uint256 _marketId) external returns (string memory);\\n\\n    function getPaymentCycleDuration(uint256 _marketId)\\n        external\\n        returns (uint32);\\n\\n    function getPaymentDefaultDuration(uint256 _marketId)\\n        external\\n        returns (uint32);\\n\\n    function getBidExpirationTime(uint256 _marketId) external returns (uint32);\\n\\n    function getMarketplaceFee(uint256 _marketId) external returns (uint16);\\n\\n    function getPaymentType(uint256 _marketId)\\n        external\\n        view\\n        returns (PaymentType);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        PaymentType _paymentType,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_);\\n}\\n\",\"keccak256\":\"0x1224c0fce5178dacee0df44c42fc6afb65ce8f811142b3d9aa4318ca6511bf29\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RepMark {\\n    Good,\\n    Delinquent,\\n    Default\\n}\\n\\ninterface IReputationManager {\\n    function initialize(address protocolAddress) external;\\n\\n    function getDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getDefaultedLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDefaultLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function updateAccountReputation(address _account) external;\\n\\n    function updateAccountReputation(address _account, uint256 _bidId)\\n        external\\n        returns (RepMark);\\n}\\n\",\"keccak256\":\"0x8d6e50fd460912231e53135b4459aa2f6f16007ae8deb32bc2cee1e88311a8d8\",\"license\":\"MIT\"},\"contracts/interfaces/ITellerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Payment, BidState } from \\\"../TellerV2Storage.sol\\\";\\nimport { Collateral } from \\\"./escrow/ICollateralEscrowV1.sol\\\";\\n\\ninterface ITellerV2 {\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _marketplaceId The unique id of the marketplace for the bid.\\n     * @param _principal The principal amount of the loan bid.\\n     * @param _duration The recurrent length of time before which a payment is due.\\n     * @param _APR The proposed interest rate for the loan bid.\\n     * @param _metadataURI The URI for additional borrower loan information as part of loan bid.\\n     * @param _receiver The address where the loan amount will be sent to.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver\\n    ) external returns (uint256 bidId_);\\n\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan with Collateral.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _marketplaceId The unique id of the marketplace for the bid.\\n     * @param _principal The principal amount of the loan bid.\\n     * @param _duration The recurrent length of time before which a payment is due.\\n     * @param _APR The proposed interest rate for the loan bid.\\n     * @param _metadataURI The URI for additional borrower loan information as part of loan bid.\\n     * @param _receiver The address where the loan amount will be sent to.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (uint256 bidId_);\\n\\n    /**\\n     * @notice Function for a lender to accept a proposed loan bid.\\n     * @param _bidId The id of the loan bid to accept.\\n     */\\n    function lenderAcceptBid(uint256 _bidId)\\n        external\\n        returns (\\n            uint256 amountToProtocol,\\n            uint256 amountToMarketplace,\\n            uint256 amountToBorrower\\n        );\\n\\n    function calculateAmountDue(uint256 _bidId)\\n        external\\n        view\\n        returns (Payment memory due);\\n\\n    /**\\n     * @notice Function for users to make the minimum amount due for an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanMinimum(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Function for users to repay an active loan in full.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanFull(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Function for users to make a payment towards an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _amount The amount of the payment.\\n     */\\n    function repayLoan(uint256 _bidId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isLoanDefaulted(uint256 _bidId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isPaymentLate(uint256 _bidId) external view returns (bool);\\n\\n    function getBidState(uint256 _bidId) external view returns (BidState);\\n\\n    function getBorrowerActiveLoanIds(address _borrower)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the borrower address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the borrower for.\\n     * @return borrower_ The address of the borrower associated with the bid.\\n     */\\n    function getLoanBorrower(uint256 _bidId)\\n        external\\n        view\\n        returns (address borrower_);\\n\\n    /**\\n     * @notice Returns the lender address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the lender for.\\n     * @return lender_ The address of the lender associated with the bid.\\n     */\\n    function getLoanLender(uint256 _bidId)\\n        external\\n        view\\n        returns (address lender_);\\n\\n    function getLoanLendingToken(uint256 _bidId)\\n        external\\n        view\\n        returns (address token_);\\n}\\n\",\"keccak256\":\"0x8b8344fa1e308e89b085eabe89a983e250242819ea29e15e026d132049595c09\",\"license\":\"MIT\"},\"contracts/interfaces/escrow/ICollateralEscrowV1.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum CollateralType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct Collateral {\\n    CollateralType _collateralType;\\n    uint256 _amount;\\n    uint256 _tokenId;\\n    address _collateralAddress;\\n}\\n\\ninterface ICollateralEscrowV1 {\\n\\n    /**\\n     * @notice Deposits a collateral ERC20 token into the escrow.\\n     * @param _collateralAddress The address of the collateral token.\\n     * @param _amount The amount to deposit.\\n     */\\n    function depositToken(address _collateralAddress, uint256 _amount)\\n        external;\\n\\n    /**\\n     * @notice Deposits a collateral asset into the escrow.\\n     * @param _collateralType The type of collateral asset to deposit (ERC721, ERC1155).\\n     * @param _collateralAddress The address of the collateral token.\\n     * @param _amount The amount to deposit.\\n     */\\n    function depositAsset(\\n        CollateralType _collateralType,\\n        address _collateralAddress,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws a collateral asset from the escrow.\\n     * @param _collateralAddress The address of the collateral contract.\\n     * @param _amount The amount to withdraw.\\n     * @param _recipient The address to send the assets to.\\n     */\\n    function withdraw(\\n        address _collateralAddress,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n\\n    function getBid() external view returns (uint256);\\n\\n    function initialize(uint256 _bidId) external;\\n}\\n\",\"keccak256\":\"0xb1187e3ef2d8abd09894cd9d62afc103c71010636b942412a99b99f350ad7901\"},\"contracts/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    using WadRayMath for uint256;\\n\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint16 internal constant PCT_100 = 10000;\\n\\n    function percentFactor(uint256 decimals) internal pure returns (uint256) {\\n        return 100 * (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return percent(self, percentage, 2);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with.\\n     * @param decimals The number of decimals the percentage value is in.\\n     */\\n    function percent(uint256 self, uint256 percentage, uint256 decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self * percentage) / percentFactor(decimals);\\n    }\\n\\n    /**\\n     * @notice it returns the absolute number of a specified parameter\\n     * @param self the number to be returned in it's absolute\\n     * @return the absolute number\\n     */\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @dev Returned value is type uint16.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return SafeCast.toUint16(ratioOf(num1, num2, 2));\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @param decimals The number of decimals the percentage value is returned in.\\n     * @return Ratio percentage value.\\n     */\\n    function ratioOf(uint256 num1, uint256 num2, uint256 decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (num2 == 0) return 0;\\n        return (num1 * percentFactor(decimals)) / num2;\\n    }\\n\\n    /**\\n     * @notice Calculates the payment amount for a cycle duration.\\n     *  The formula is calculated based on the standard Estimated Monthly Installment (https://en.wikipedia.org/wiki/Equated_monthly_installment)\\n     *  EMI = [P x R x (1+R)^N]/[(1+R)^N-1]\\n     * @param principal The starting amount that is owed on the loan.\\n     * @param loanDuration The length of the loan.\\n     * @param cycleDuration The length of the loan's payment cycle.\\n     * @param apr The annual percentage rate of the loan.\\n     */\\n    function pmt(\\n        uint256 principal,\\n        uint32 loanDuration,\\n        uint32 cycleDuration,\\n        uint16 apr\\n    ) internal pure returns (uint256) {\\n        uint256 n = loanDuration / cycleDuration;\\n        if (apr == 0) return (principal / n);\\n\\n        uint256 one = WadRayMath.wad();\\n        uint256 r = WadRayMath.pctToWad(apr).wadMul(cycleDuration).wadDiv(\\n            365 days\\n        );\\n        uint256 exp = (one + r).wadPow(n);\\n        uint256 numerator = principal.wadMul(r).wadMul(exp);\\n        uint256 denominator = exp - one;\\n\\n        return numerator.wadDiv(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0xa0e0c5b1ce2f801b36ce32677d678ebbc44fac66a310fee3ee2912f443b0ebc6\",\"license\":\"MIT\"},\"contracts/libraries/V2Calculations.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n// Libraries\\nimport \\\"./NumbersLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Bid } from \\\"../TellerV2Storage.sol\\\";\\n\\nenum PaymentType {\\n    EMI,\\n    Bullet\\n}\\n\\nlibrary V2Calculations {\\n    using NumbersLib for uint256;\\n\\n    /**\\n     * @notice Returns the timestamp of the last payment made for a loan.\\n     * @param _bid The loan bid struct to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(Bid storage _bid)\\n    internal\\n    view\\n    returns (uint32)\\n    {\\n        return\\n        _bid.loanDetails.lastRepaidTimestamp == 0\\n        ? _bid.loanDetails.acceptedTimestamp\\n        : _bid.loanDetails.lastRepaidTimestamp;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan.\\n     * @param _bid The loan bid struct to get the owed amount for.\\n     * @param _timestamp The timestamp at which to get the owed amount at.\\n     */\\n    function calculateAmountOwed(Bid storage _bid, uint256 _timestamp)\\n    internal\\n    view\\n    returns (\\n        uint256 owedPrincipal_,\\n        uint256 duePrincipal_,\\n        uint256 interest_\\n    )\\n    {\\n        // Total principal left to pay\\n        return\\n        calculateAmountOwed(\\n            _bid.loanDetails.principal,\\n            _bid.loanDetails.totalRepaid.principal,\\n            _bid.terms.APR,\\n            _bid.terms.paymentCycleAmount,\\n            _bid.terms.paymentCycle,\\n            lastRepaidTimestamp(_bid),\\n            _timestamp,\\n            _bid.loanDetails.acceptedTimestamp,\\n            _bid.loanDetails.loanDuration,\\n            _bid.paymentType\\n        );\\n    }\\n\\n    function calculateAmountOwed(\\n        uint256 principal,\\n        uint256 totalRepaidPrincipal,\\n        uint16 _interestRate,\\n        uint256 _paymentCycleAmount,\\n        uint256 _paymentCycle,\\n        uint256 _lastRepaidTimestamp,\\n        uint256 _timestamp,\\n        uint256 _startTimestamp,\\n        uint256 _loanDuration,\\n        PaymentType _paymentType\\n    )\\n    internal\\n    pure\\n    returns (\\n        uint256 owedPrincipal_,\\n        uint256 duePrincipal_,\\n        uint256 interest_\\n    )\\n    {\\n        owedPrincipal_ = principal - totalRepaidPrincipal;\\n\\n        uint256 interestOwedInAYear = owedPrincipal_.percent(_interestRate);\\n        uint256 owedTime = _timestamp - uint256(_lastRepaidTimestamp);\\n        interest_ = (interestOwedInAYear * owedTime) / 365 days;\\n\\n        // Cast to int265 to avoid underflow errors (negative means loan duration has passed)\\n        int256 durationLeftOnLoan = int256(_loanDuration) -\\n        (int256(_timestamp) - int256(_startTimestamp));\\n        bool isLastPaymentCycle = durationLeftOnLoan < int256(_paymentCycle) || // Check if current payment cycle is within or beyond the last one\\n        owedPrincipal_ + interest_ <= _paymentCycleAmount; // Check if what is left to pay is less than the payment cycle amount\\n\\n        if (_paymentType == PaymentType.Bullet) {\\n            if (isLastPaymentCycle) {\\n                duePrincipal_ = owedPrincipal_;\\n            }\\n        } else {\\n            // Default to PaymentType.EMI\\n            // Max payable amount in a cycle\\n            // NOTE: the last cycle could have less than the calculated payment amount\\n            uint256 maxCycleOwed = isLastPaymentCycle\\n            ? owedPrincipal_ + interest_\\n            : _paymentCycleAmount;\\n\\n            // Calculate accrued amount due since last repayment\\n            uint256 owedAmount = (maxCycleOwed * owedTime) / _paymentCycle;\\n            duePrincipal_ = Math.min(owedAmount - interest_, owedPrincipal_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan for the next payment cycle.\\n     * @param _type The payment type of the loan.\\n     * @param _principal The starting amount that is owed on the loan.\\n     * @param _duration The length of the loan.\\n     * @param _paymentCycle The length of the loan's payment cycle.\\n     * @param _apr The annual percentage rate of the loan.\\n     */\\n    function calculatePaymentCycleAmount(\\n        PaymentType _type,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint32 _paymentCycle,\\n        uint16 _apr\\n    ) internal returns (uint256) {\\n        if (_type == PaymentType.Bullet) {\\n            return\\n            _principal.percent(_apr).percent(\\n                uint256(_paymentCycle).ratioOf(365 days, 10),\\n                10\\n            );\\n        }\\n        // Default to PaymentType.EMI\\n        return NumbersLib.pmt(_principal, _duration, _paymentCycle, _apr);\\n    }\\n}\",\"keccak256\":\"0x54022c4ce72e1c145df1a2ad70c4eb0b9fca4dc303c5815d0fff9a3f6ac874a3\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Multiplier Finance\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n    uint256 internal constant PCT_WAD_RATIO = 1e14;\\n    uint256 internal constant PCT_RAY_RATIO = 1e23;\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function rayToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_RAY_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_RAY_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_WAD_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_WAD_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    function pctToRay(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(RAY).div(1e4);\\n    }\\n\\n    function pctToWad(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(WAD).div(1e4);\\n    }\\n\\n    /**\\n     * @dev calculates base^duration. The code uses the ModExp precompile\\n     * @return z base^duration, in ray\\n     */\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, RAY, rayMul);\\n    }\\n\\n    function wadPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, WAD, wadMul);\\n    }\\n\\n    function _pow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 p,\\n        function(uint256, uint256) internal pure returns (uint256) mul\\n    ) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : p;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = mul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2781319be7a96f56966c601c061849fa94dbf9af5ad80a20c40b879a8d03f14a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006097553480156200001657600080fd5b5060405162004fb838038062004fb883398101604081905262000039916200004b565b6001600160a01b03166080526200007d565b6000602082840312156200005e57600080fd5b81516001600160a01b03811681146200007657600080fd5b9392505050565b608051614f18620000a0600039600081816107630152613ab40152614f186000f3fe608060405234801561001057600080fd5b50600436106103a45760003560e01c8063706a43c3116101e9578063b0e21e8a1161010f578063d87569cc116100ad578063e8cbab091161007c578063e8cbab0914610a33578063ecb96fe614610a46578063f2fde38b14610a59578063f93b6be514610a6c57600080fd5b8063d87569cc146109f2578063d974cc5714610a05578063dbf6248914610a18578063e4467f3514610a2057600080fd5b8063bde644fb116100e9578063bde644fb14610986578063bf77ffae14610999578063d4eda4cf146109cc578063d76ac91f146109df57600080fd5b8063b0e21e8a1461093d578063b5d34fcd14610953578063ba6d5b151461097357600080fd5b80638ac4731911610187578063a10905ea11610156578063a10905ea146108bd578063a51e2bad146108e9578063a75021ba146108fc578063a8cb5d681461090f57600080fd5b80638ac473191461087d5780638da5cb5b146108865780639703ef35146108975780639a11e339146108aa57600080fd5b80638288da8a116101c35780638288da8a14610831578063837c0bf614610844578063842a05d4146108575780638a700b531461086a57600080fd5b8063706a43c314610803578063715018a6146108165780637bbd53d71461081e57600080fd5b806323be345c116102ce57806354fd4d501161026c5780636aedfe681161023b5780636aedfe68146107a45780636b76c085146107b75780636b868afb146107dd5780636c6ca79c146107f057600080fd5b806354fd4d501461073757806356a837f414610740578063572b6c05146107535780635c975abb1461079357600080fd5b80633819bcdc116102a85780633819bcdc146105c55780633ef0a2f7146105d85780634148f94c146106015780634423c5f11461061b57600080fd5b806323be345c1461057f5780632519dc79146105925780632e9332d4146105b257600080fd5b8063127caa881161034657806319b353de1161031557806319b353de146105315780631d12363314610544578063206c54c714610557578063235d5a7b1461056a57600080fd5b8063127caa88146104945780631289b396146104cf5780631420a266146104d857806314573033146104ed57600080fd5b8063093f561711610382578063093f56171461041e5780631042b85f1461044157806310618223146104615780631253c5461461047457600080fd5b8063054de0ff146103a957806306f33a92146103d2578063089487b5146103f3575b600080fd5b6103bc6103b7366004614274565b610a74565b6040516103c99190614291565b60405180910390f35b6103e56103e0366004614340565b610a9e565b6040519081526020016103c9565b6103e56104013660046143e2565b60a360209081526000928352604080842090915290825290205481565b61043161042c36600461441b565b610ac5565b60405190151581526020016103c9565b61045461044f366004614434565b610b1a565b6040516103c99190614456565b61043161046f36600461441b565b610b9f565b61048761048236600461441b565b610c35565b6040516103c991906144c5565b6104ba6104a236600461441b565b60a26020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016103c9565b6103e5609b5481565b6104eb6104e63660046144d8565b610ccf565b005b6105196104fb36600461441b565b6000908152609860205260409020600501546001600160a01b031690565b6040516001600160a01b0390911681526020016103c9565b61043161053f3660046144fd565b610e2d565b6103bc610552366004614274565b610e6c565b6104eb61056536600461441b565b610ed8565b61057261104b565b6040516103c9919061453f565b60aa54610519906001600160a01b031681565b6103e56105a0366004614274565b60a46020526000908152604090205481565b6104eb6105c03660046144d8565b61105c565b6103e56105d3366004614580565b61113f565b6105196105e636600461441b565b6000908152609860205260409020546001600160a01b031690565b610609600781565b60405160ff90911681526020016103c9565b61072261062936600461441b565b60986020908152600091825260409182902080546001820154600283015460038401546004850154875160e08101895260058701546001600160a01b0390811682526006880154828a01528951808b018b52600789015481526008890154818b0152828b0152600988015463ffffffff808216606080860191909152600160201b80840483166080870152600160401b8404831660a0870152600160601b909304821660c08601528c519081018d52600a8b01548152600b8b01549182169b81019b909b520461ffff1699890199909952600c909601549488169793841696939092169490939192909160ff8082169161010090041689565b6040516103c9999897969594939291906145e6565b6103e560a55481565b6104eb61074e366004614274565b611170565b610431610761366004614274565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60655462010000900460ff16610431565b6104546107b2366004614434565b61119a565b6104ba6107c536600461441b565b60a16020526000908152604090205463ffffffff1681565b609f54610519906001600160a01b031681565b6104546107fe36600461441b565b61121f565b6104ba61081136600461441b565b611290565b6104eb6113d2565b6103e561082c3660046146df565b6113e6565b6104eb61083f36600461441b565b611501565b6104eb6108523660046147df565b6116d6565b6104eb610865366004614274565b611910565b6104eb610878366004614434565b6119b9565b6103e560975481565b6033546001600160a01b0316610519565b6104eb6108a536600461441b565b611ab4565b6104eb6108b836600461441b565b611b69565b6105196108cb36600461441b565b6000908152609860205260409020600201546001600160a01b031690565b6104ba6108f736600461441b565b611c20565b6104eb61090a366004614274565b611c37565b61092261091d36600461441b565b611c4e565b604080519384526020840192909252908201526060016103c9565b60655460405161ffff90911681526020016103c9565b6103e5610961366004614274565b609a6020526000908152604090205481565b60a954610519906001600160a01b031681565b61048761099436600461441b565b612308565b6109bf6109a736600461441b565b6000908152609860205260409020600c015460ff1690565b6040516103c991906148b0565b6104eb6109da36600461441b565b612420565b6104eb6109ed366004614274565b6124db565b610431610a003660046144d8565b612545565b610454610a1336600461441b565b61257f565b6104eb6125f0565b6104eb610a2e3660046148be565b612608565b610431610a4136600461441b565b612672565b609e54610519906001600160a01b031681565b6104eb610a67366004614274565b612701565b6104eb612777565b6001600160a01b038116600090815260a060205260409020606090610a989061278f565b92915050565b6000610aa861279c565b610ab889898989898989896127e8565b9998505050505050505050565b600060036000838152609860205260409020600c015460ff166005811115610aef57610aef6145ac565b14610afc57506000919050565b610b0582611290565b63ffffffff164263ffffffff16119050919050565b604080518082019091526000808252602082015260008381526098602052604090206003600c82015460ff166005811115610b5757610b576145ac565b141580610b7557506009810154600160201b900463ffffffff168311155b15610b805750610a98565b600080610b8d8386612e58565b91865250602085015250505092915050565b60008181526098602052604081206001600c82015460ff166005811115610bc857610bc86145ac565b14610bd65750600092915050565b600083815260a2602052604090205463ffffffff16610bf85750600092915050565b600083815260a260205260409020546009820154610c1f9163ffffffff90811691166148f1565b63ffffffff164263ffffffff1611915050919050565b60a66020526000908152604090208054610c4e90614919565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90614919565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b505050505081565b610cd7612ed7565b609e54604051633d36902960e01b8152600481018590526001600160a01b039283169290911690633d36902990602401602060405180830381600087803b158015610d2157600080fd5b505af1158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190614954565b6001600160a01b031614610db45760405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206d75737420626520746865206d61726b6574206f776e65720060448201526064015b60405180910390fd5b600082815260a76020526040902080546001600160a01b0319166001600160a01b038316179055817fa593acf9edc343669c7fc50d2caa3911326adef438361f0fa911be85c9e296a482610e06612ed7565b604080516001600160a01b0393841681529290911660208301520160405180910390a25050565b6000610e398484612545565b8015610e6257506001600160a01b038316600090815260a860205260409020610e629083612ee1565b90505b9392505050565b6001600160a01b038116600090815260996020908152604091829020805483518184028101840190945280845260609392830182828015610ecc57602002820191906000526020600020905b815481526020019060010190808311610eb8575b50505050509050919050565b609e5460008281526098602052604090819020600301549051633d36902960e01b81526001600160a01b0390921691633d36902991610f1d9160040190815260200190565b602060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f9190614954565b6001600160a01b0316610f80612ed7565b6001600160a01b031614611014576040516347bc33cb60e11b8152600481018290526060602482015260146064820152731b585c9ad95d13dddb995c90d85b98d95b109a5960621b608482015260a06044820152602160a48201527f4f6e6c7920746865206d61726b6574206f776e65722063616e2063616e63656c60c4820152602160f81b60e482015261010401610dab565b61101d81612f03565b60405181907ff3f271d754f5264e0d143bf9be577d6eba153b0d833bd3a127d7b1a280bb13f190600090a250565b6060611057609c61278f565b905090565b6110668282612545565b6110c25760405162461bcd60e51b815260206004820152602760248201527f466f72776172646572206d757374206265207472757374656420627920746865604482015266081b585c9ad95d60ca1b6064820152608401610dab565b6110eb6110cd612ed7565b6001600160a01b038316600090815260a86020526040902090612fb7565b50806001600160a01b0316827f65d6b5305e8c0e58e88454a1aeecae0f55975222338b25abd0997b4d305056a1611120612ed7565b6040516001600160a01b03909116815260200160405180910390a35050565b6099602052816000526040600020818154811061115b57600080fd5b90600052602060002001600091509150505481565b611178612fcc565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b604080518082018252600080825260208083018290528582526098905291909120600c81015460039060ff1660058111156111d7576111d76145ac565b1415806111f557506009810154600160201b900463ffffffff168311155b156112005750610a98565b60008061120d8386612e58565b90865260208601525050505092915050565b604080518082019091526000808252602082015260036000838152609860205260409020600c015460ff16600581111561125b5761125b6145ac565b1461126557919050565b6000828152609860205260408120819061127f9042612e58565b918552506020840152509092915050565b6000818152609860205260408120600c81015460039060ff1660058111156112ba576112ba6145ac565b146112c55750919050565b600b81015460098201546112e99163ffffffff90811691600160201b9004166148f1565b6009820154909250600090600160201b900463ffffffff1661130a85611c20565b6113149190614971565b905063ffffffff81161561136b57600b82015460009061133a9063ffffffff16836149ac565b6113459060016148f1565b600b84015490915061135d9063ffffffff16826149cf565b61136790856148f1565b9350505b60098201546113909063ffffffff600160601b8204811691600160201b9004166148f1565b63ffffffff168363ffffffff1611156113cb5760098201546113c89063ffffffff600160601b8204811691600160201b9004166148f1565b92505b5050919050565b6113da612fcc565b6113e46000613045565b565b60006113f061279c565b6114008b8b8b8b8b8b8b8b6127e8565b60aa54604051631532dc4560e01b81529192506000916001600160a01b0390911690631532dc459061143a90859088908890600401614a08565b602060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c9190614aa9565b90506001811515146114f25760405162461bcd60e51b815260206004820152602960248201527f436f6c6c61746572616c2062616c616e636520636f756c64206e6f74206265206044820152681d985b1a59185d195960ba1b6064820152608401610dab565b509a9950505050505050505050565b60408051808201909152600d81526c3634b8bab4b230ba32a637b0b760991b6020820152819060036000838152609860205260409020600c015460ff16600581111561154f5761154f6145ac565b146115715781816040516347bc33cb60e11b8152600401610dab929190614ac4565b61157a83612672565b6115c65760405162461bcd60e51b815260206004820152601760248201527f4c6f616e206d7573742062652064656661756c7465642e0000000000000000006044820152606401610dab565b600083815260986020526040812090806115e08342612e58565b925050915061160f86604051806040016040528085815260200184815250838561160a9190614b13565b613097565b600c8301805460ff19166005179055600383015460009061162f90613370565b60aa5460405163f0472c4960e01b8152600481018a90526001600160a01b03808416602483015292935091169063f0472c4990604401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50506040516001600160a01b03841692508991507f73de9acc561f27528ab0a3b5dd63fefb4e59f95575891299a6f862a78779817690600090a350505050505050565b600054610100900460ff16158080156116f65750600054600160ff909116105b806117105750303b158015611710575060005460ff166001145b61172c5760405162461bcd60e51b8152600401610dab90614b2b565b6000805460ff19166001179055801561174f576000805461ff0019166101001790555b6117588861341b565b611760613453565b60a980546001600160a01b038088166001600160a01b031992831617909255609e80548a8416908316179055609f8054928916929091169190911790556117a682613482565b826117f35760405162461bcd60e51b815260206004820152601b60248201527f4e6f206c656e64696e6720746f6b656e732073706563696669656400000000006044820152606401610dab565b60005b838110156118bf5761183785858381811061181357611813614b79565b90506020020160208101906118289190614274565b6001600160a01b03163b151590565b6118835760405162461bcd60e51b815260206004820152601a60248201527f6c656e64696e6720746f6b656e206e6f7420636f6e74726163740000000000006044820152606401610dab565b6118ad85858381811061189857611898614b79565b90506020020160208101906109ed9190614274565b806118b781614b8f565b9150506117f6565b508015611906576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600054600790610100900460ff16158015611932575060005460ff8083169116105b61194e5760405162461bcd60e51b8152600401610dab90614b2b565b6000805461ffff191660ff83161761010017905561196a612fcc565b61197382613482565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152829060036000838152609860205260409020600c015460ff166005811115611a0357611a036145ac565b14611a255781816040516347bc33cb60e11b8152600401610dab929190614ac4565b600084815260986020526040812081908190611a419042612e58565b919450925090506000611a548284614b13565b905080871015611a875760405162dd9d0f60e61b8152600481018990526024810188905260448101829052606401610dab565b611906886040518060400160405280858b611aa29190614baa565b815260200185905261160a8588614b13565b600081815260986020526040902080546003909101546001600160a01b0390911690611adf90613370565b6001600160a01b031614611b5d576040516347bc33cb60e11b81526004810182905260606024820152600960648201526818d85b98d95b109a5960ba1b608482015260a06044820152601e60a48201527f4f6e6c792074686520626964206f776e65722063616e2063616e63656c21000060c482015260e401610dab565b611b6681612f03565b50565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152609860205260409020600c015460ff166005811115611bb357611bb36145ac565b14611bd55781816040516347bc33cb60e11b8152600401610dab929190614ac4565b60008381526098602052604081208190611bef9042612e58565b9250509150611c1985604051806040016040528085815260200184815250838561160a9190614b13565b5050505050565b6000818152609860205260408120610a9890613589565b611c3f612fcc565b611c4a609c826135cf565b5050565b6000806000836040518060400160405280600f81526020016e1b195b99195c9058d8d95c1d109a59608a1b81525060016005811115611c8f57611c8f6145ac565b6000838152609860205260409020600c015460ff166005811115611cb557611cb56145ac565b14611cd75781816040516347bc33cb60e11b8152600401610dab929190614bc1565b611cdf61279c565b60008681526098602052604081206003810154909190611cfe90613370565b609e546003840154604051633ef19a9b60e01b815260048101919091526001600160a01b03808416602483015292935060009290911690633ef19a9b906044016040805180830381600087803b158015611d5757600080fd5b505af1158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190614c0e565b50905080611dd55760405162461bcd60e51b81526020600482015260136024820152722737ba103b32b934b334b2b2103632b73232b960691b6044820152606401610dab565b609e546003840154604051631cc672df60e01b81526001600160a01b0390921691631cc672df91611e0c9160040190815260200190565b602060405180830381600087803b158015611e2657600080fd5b505af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190614aa9565b15611e9e5760405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc818db1bdcd95960821b6044820152606401610dab565b611ea789610b9f565b15611ee65760405162461bcd60e51b815260206004820152600f60248201526e109a59081a185cc8195e1c1a5c9959608a1b6044820152606401610dab565b6009830180546bffffffffffffffff000000001916600160201b4263ffffffff1690810263ffffffff60401b191691909117600160401b91909102179055600c830180546003919060ff191660018302179055506002830180546001600160a01b0319166001600160a01b038481169190911790915560aa546040516346f0b08b60e11b8152600481018c9052911690638de1611690602401600060405180830381600087803b158015611f9957600080fd5b505af1158015611fad573d6000803e3d6000fd5b50505050611fcc611fc160655461ffff1690565b6006850154906135e4565b609e54600385015460405163028ba63960e21b8152929a5061205c926001600160a01b0390921691630a2e98e49161200a9160040190815260200190565b602060405180830381600087803b15801561202457600080fd5b505af1158015612038573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc19190614c3a565b9650868884600501600101546120729190614baa565b61207c9190614baa565b60028401549096506120b9906001600160a01b03166120a36033546001600160a01b031690565b60058601546001600160a01b031691908b6135f6565b6002830154609e5460038501546040516332209bcb60e11b8152600481019190915261215e926001600160a01b03908116921690636441379690602401602060405180830381600087803b15801561211057600080fd5b505af1158015612124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121489190614954565b60058601546001600160a01b031691908a6135f6565b600283015460018401546005850154612188926001600160a01b03918216929082169116896135f6565b600683015460058401546001600160a01b03908116600090815260a3602090815260408083206002890154909416835292905290812080549091906121ce908490614b13565b9091555050600683015460058401546001600160a01b0316600090815260a4602052604081208054909190612204908490614b13565b909155505082546001600160a01b0316600090815260a06020526040902061222c908a613656565b5060028301546040516001600160a01b03909116908a907fde9d3bfa8771df6761c0afac2375c88c70a3aa30478e1bd15363294033b470ed90600090a3604051671c1c9bdd1bd8dbdb60c21b81528890600801604051908190038120908b907f476a21a61ac4a7da250e040733aa10facd2eeee584b2c009d178c3de3d8a12dc90600090a46040516a6d61726b6574706c61636560a81b81528790600b01604051908190038120908b907f476a21a61ac4a7da250e040733aa10facd2eeee584b2c009d178c3de3d8a12dc90600090a450505050509193909250565b600081815260a66020526040902080546060919061232590614919565b80601f016020809104026020016040519081016040528092919081815260200182805461235190614919565b801561239e5780601f106123735761010080835404028352916020019161239e565b820191906000526020600020905b81548152906001019060200180831161238157829003601f168201915b50505050509050806040516020016123b69190614c57565b604051602081830303815290604052805190602001207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b141561241b5760008281526098602090815260409091206004015490612417908290613662565b9150505b919050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152609860205260409020600c015460ff16600581111561246a5761246a6145ac565b1461248c5781816040516347bc33cb60e11b8152600401610dab929190614ac4565b6000838152609860205260408120819081906124a89042612e58565b9250925092506124d386604051806040016040528085815260200184815250838661160a9190614b13565b505050505050565b6124e3612fcc565b6001600160a01b0381163b61253a5760405162461bcd60e51b815260206004820152601f60248201527f496e636f7272656374206c656e64696e6720746f6b656e2061646472657373006044820152606401610dab565b611c4a609c82612fb7565b600082815260a760205260408120546001600160a01b0383811691161480610e6557505060a9546001600160a01b03908116911614919050565b604080518082019091526000808252602082015260036000838152609860205260409020600c015460ff1660058111156125bb576125bb6145ac565b146125c557919050565b600082815260986020526040812081906125df9042612e58565b908552602085015250919392505050565b6125f8612fcc565b61260061279c565b6113e46137fe565b612610612fcc565b60655461ffff828116911614156126245750565b6065805461ffff83811661ffff198316811790935560408051938452911660208301819052917f4810ece076cee6c6042808956f3f65dad1bc72b75181341d7bed810d39deda0f91016119ad565b60008181526098602052604081206003600c82015460ff16600581111561269b5761269b6145ac565b146126a95750600092915050565b600083815260a1602052604090205463ffffffff166126cb5750600092915050565b600083815260a1602052604090205463ffffffff166126e984611c20565b6126f39042614971565b63ffffffff16119392505050565b612709612fcc565b6001600160a01b03811661276e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dab565b611b6681613045565b61277f612fcc565b61278761385d565b6113e46138ac565b60606000610e65836138e9565b60655462010000900460ff16156113e45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610dab565b6000806127f489613370565b609e5460405163066e751360e01b8152600481018c90526001600160a01b0380841660248301529293506000929091169063066e7513906044016040805180830381600087803b15801561284757600080fd5b505af115801561285b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287f9190614c0e565b509050806128c75760405162461bcd60e51b81526020600482015260156024820152742737ba103b32b934b334b2b2103137b93937bbb2b960591b6044820152606401610dab565b609e54604051631cc672df60e01b8152600481018c90526001600160a01b0390911690631cc672df90602401602060405180830381600087803b15801561290d57600080fd5b505af1158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190614aa9565b156129855760405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc818db1bdcd95960821b6044820152606401610dab565b612990609c8c612ee1565b6129dc5760405162461bcd60e51b815260206004820152601c60248201527f4c656e64696e6720746f6b656e206e6f7420617574686f72697a6564000000006044820152606401610dab565b609754600081815260986020526040902080546001600160a01b0319166001600160a01b03858116919091178255919450908516612a245780546001600160a01b0316612a26565b845b6001820180546001600160a01b03199081166001600160a01b0393841617909155600383018d90556005830180549091168e8316179055600682018b90556009820180546fffffffff0000000000000000ffffffff1916600160601b63ffffffff8d81169190910263ffffffff1916919091174291909116179055609e5460405163805deb5360e01b8152600481018e905291169063805deb5390602401602060405180830381600087803b158015612ade57600080fd5b505af1158015612af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b169190614c73565b600b8201805463ffffffff9290921665ffffffffffff1990921691909117600160201b61ffff8b1602179055609e546040516311bed5bb60e01b8152600481018d90526001600160a01b03909116906311bed5bb90602401602060405180830381600087803b158015612b8857600080fd5b505af1158015612b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc09190614c73565b609754600090815260a1602052604090819020805463ffffffff191663ffffffff9390931692909217909155609e54905163082fc54d60e01b8152600481018d90526001600160a01b039091169063082fc54d90602401602060405180830381600087803b158015612c3157600080fd5b505af1158015612c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c699190614c73565b609754600090815260a2602052604090819020805463ffffffff191663ffffffff9390931692909217909155609e54905163d6e794dd60e01b8152600481018d90526001600160a01b039091169063d6e794dd9060240160206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d109190614c90565b600c8201805461ff001916610100836001811115612d3057612d306145ac565b0217905550600c810154600b820154612d5c91610100900460ff16908c908c9063ffffffff168c613943565b600a820155609754600090815260a660205260409020612d7d9088886141bb565b50600c8101805460ff19166001179055604051612da09088908890602001614cb1565b60408051808303601f19018152908290528051602091820120835460975460018601546001600160a01b0390811686529294929091169290917ff887b1f393f43fb94c5d50483df4bd410ffbf286128c5f24ff56c580ac7f731c910160405180910390a480546001600160a01b03166000908152609960209081526040822060978054825460018101845592855292842090910191909155805491612e4483614b8f565b919050555050505098975050505050505050565b60068201546007830154600b840154600a85015460009384938493612eca9361ffff600160201b8304169163ffffffff16612e928b613589565b60098c0154600c8d015463ffffffff928316928d92600160201b8104821692600160601b90910490911690610100900460ff166139af565b9250925092509250925092565b6000611057613ab0565b6001600160a01b03811660009081526001830160205260408120541515610e65565b60408051808201909152600981526818d85b98d95b109a5960ba1b6020820152819060016000838152609860205260409020600c015460ff166005811115612f4d57612f4d6145ac565b14612f6f5781816040516347bc33cb60e11b8152600401610dab929190614bc1565b600083815260986020526040808220600c01805460ff191660021790555184917fa0633b09ac3029a6746aa27d4db1407f5f287a10c41a6b2ad2859f4da9b2680b91a2505050565b6000610e65836001600160a01b038416613af5565b612fd4612ed7565b6001600160a01b0316612fef6033546001600160a01b031690565b6001600160a01b0316146113e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610dab565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600083815260986020908152604082209084015184519192916130ba9190614b13565b609f54835460405163c7312e4760e01b81526001600160a01b0391821660048201526024810189905292935060009291169063c7312e4790604401602060405180830381600087803b15801561310f57600080fd5b505af1158015613123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131479190614cc1565b905083821061321457600c8301805460ff1916600417905582546001600160a01b0316600090815260a0602052604090208492506131859087613b44565b5060aa54604051632e1a7d4d60e01b8152600481018890526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156131cc57600080fd5b505af11580156131e0573d6000803e3d6000fd5b50506040518892507f9a7851747cd7ffb3fe0a32caf3da48b31f27cebe131267051640f8b72fc471869150600090a2613240565b60405186907f68ca97895fe2d09eab47e752271728ade667e72dda27e68c20eaa191a9c2187d90600090a25b61326e6132508460030154613370565b600285015460058601546001600160a01b03908116929116856135f6565b8451600784018054600090613284908490614b13565b909155505060208501516008840180546000906132a2908490614b13565b909155505060098301805463ffffffff60401b1916600160401b4263ffffffff160217905560008160028111156132db576132db6145ac565b146124d357609f54835460405163c7312e4760e01b81526001600160a01b0391821660048201526024810189905291169063c7312e4790604401602060405180830381600087803b15801561332f57600080fd5b505af1158015613343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133679190614cc1565b50505050505050565b600061337e82610a00612ed7565b156134135760131936013560601c6133bb8160a8600061339c612ed7565b6001600160a01b03168152602081019190915260400160002090612ee1565b610a985760405162461bcd60e51b8152602060048201526024808201527f53656e646572206d75737420617070726f7665206d61726b657420666f727761604482015263393232b960e11b6064820152608401610dab565b610a98612ed7565b600054610100900460ff166134425760405162461bcd60e51b8152600401610dab90614cde565b61344a613b50565b611b6681613b7f565b600054610100900460ff1661347a5760405162461bcd60e51b8152600401610dab90614cde565b6113e4613baf565b600054610100900460ff166134a95760405162461bcd60e51b8152600401610dab90614cde565b60aa546001600160a01b0316156135025760405162461bcd60e51b815260206004820152601e60248201527f436f6c6c61746572616c204d616e6167657220616c72656164792073657400006044820152606401610dab565b6001600160a01b0381163b6135675760405162461bcd60e51b815260206004820152602560248201527f436f6c6c61746572616c204d616e61676572206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610dab565b60aa80546001600160a01b0319166001600160a01b0392909216919091179055565b6009810154600090600160401b900463ffffffff16156135ba576009820154600160401b900463ffffffff16610a98565b5060090154600160201b900463ffffffff1690565b6000610e65836001600160a01b038416613be4565b6000610e65838361ffff166002613cd7565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613650908590613cf6565b50505050565b6000610e658383613af5565b60606000613671836002614d29565b61367c906002614b13565b67ffffffffffffffff81111561369457613694614d48565b6040519080825280601f01601f1916602001820160405280156136be576020820181803683370190505b509050600360fc1b816000815181106136d9576136d9614b79565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061370857613708614b79565b60200101906001600160f81b031916908160001a905350600061372c846002614d29565b613737906001614b13565b90505b60018111156137af576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061376b5761376b614b79565b1a60f81b82828151811061378157613781614b79565b60200101906001600160f81b031916908160001a90535060049490941c936137a881614d5e565b905061373a565b508315610e655760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610dab565b61380661279c565b6065805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613840612ed7565b6040516001600160a01b03909116815260200160405180910390a1565b60655462010000900460ff166113e45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610dab565b6138b461385d565b6065805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613840612ed7565b606081600001805480602002602001604051908101604052809291908181526020018280548015610ecc5760200282019190600052602060002090815481526020019060010190808311610eb85750505050509050919050565b60006001866001811115613959576139596145ac565b14156139975761399061397d63ffffffff808616906301e1338090600a90613dcd16565b600a61398988866135e4565b9190613cd7565b90506139a6565b6139a385858585613df0565b90505b95945050505050565b600080806139bd8c8e614baa565b925060006139cb848d6135e4565b905060006139d98a8a614baa565b90506301e133806139ea8284614d29565b6139f49190614d75565b92506000613a02898b614d89565b613a0c9089614d89565b905060008c821280613a2757508d613a248689614b13565b11155b90506001886001811115613a3d57613a3d6145ac565b1415613a52578015613a4d578695505b613a9c565b600081613a5f578e613a69565b613a698689614b13565b905060008e613a788684614d29565b613a829190614d75565b9050613a97613a918883614baa565b8a613ea7565b975050505b505050509a509a509a975050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415613af0575060131936013560601c90565b503390565b6000818152600183016020526040812054613b3c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a98565b506000610a98565b6000610e658383613be4565b600054610100900460ff16613b775760405162461bcd60e51b8152600401610dab90614cde565b6113e4613ebd565b600054610100900460ff16613ba65760405162461bcd60e51b8152600401610dab90614cde565b611b6681612608565b600054610100900460ff16613bd65760405162461bcd60e51b8152600401610dab90614cde565b6065805462ff000019169055565b60008181526001830160205260408120548015613ccd576000613c08600183614baa565b8554909150600090613c1c90600190614baa565b9050818114613c81576000866000018281548110613c3c57613c3c614b79565b9060005260206000200154905080876000018481548110613c5f57613c5f614b79565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c9257613c92614dc8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a98565b6000915050610a98565b6000613ce282613ef4565b613cec8486614d29565b610e629190614d75565b6000613d4b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f0c9092919063ffffffff16565b805190915015613dc85780806020019051810190613d699190614aa9565b613dc85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610dab565b505050565b600082613ddc57506000610e65565b82613de683613ef4565b613cec9086614d29565b600080613dfd84866149ac565b63ffffffff16905061ffff8316613e2057613e188187614d75565b915050613e9f565b670de0b6b3a76400006000613e526301e13380613e4c63ffffffff8916613e4689613f1b565b90613f3f565b90613f73565b90506000613e6a84613e648486614b13565b90613fa3565b90506000613e7c82613e468c86613f3f565b90506000613e8a8584614baa565b9050613e968282613f73565b96505050505050505b949350505050565b6000818310613eb65781610e65565b5090919050565b600054610100900460ff16613ee45760405162461bcd60e51b8152600401610dab90614cde565b6113e4613eef612ed7565b613045565b6000613f0182600a614ec2565b610a98906064614d29565b6060610e628484600085613fbb565b6000610a98612710613f3961ffff8516670de0b6b3a76400006140ec565b906140f8565b6000610e65670de0b6b3a7640000613f39613f5a86866140ec565b613f6d6002670de0b6b3a7640000614d75565b90614104565b600080613f81600284614d75565b9050613e9f83613f39613f9c87670de0b6b3a76400006140ec565b8490614104565b6000610e658383670de0b6b3a7640000613f3f614110565b60608247101561401c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610dab565b6001600160a01b0385163b6140735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610dab565b600080866001600160a01b0316858760405161408f9190614c57565b60006040518083038185875af1925050503d80600081146140cc576040519150601f19603f3d011682016040523d82523d6000602084013e6140d1565b606091505b50915091506140e1828286614182565b979650505050505050565b6000610e658284614d29565b6000610e658284614d75565b6000610e658284614b13565b600061411d600285614ece565b6141275782614129565b845b9050614136600285614d75565b93505b8315613e9f5761414d85868463ffffffff16565b945061415a600285614ece565b156141705761416d81868463ffffffff16565b90505b61417b600285614d75565b9350614139565b60608315614191575081610e65565b8251156141a15782518084602001fd5b8160405162461bcd60e51b8152600401610dab91906144c5565b8280546141c790614919565b90600052602060002090601f0160209004810192826141e9576000855561422f565b82601f106142025782800160ff1982351617855561422f565b8280016001018555821561422f579182015b8281111561422f578235825591602001919060010190614214565b5061423b92915061423f565b5090565b5b8082111561423b5760008155600101614240565b6001600160a01b0381168114611b6657600080fd5b803561241b81614254565b60006020828403121561428657600080fd5b8135610e6581614254565b6020808252825182820181905260009190848201906040850190845b818110156142c9578351835292840192918401916001016142ad565b50909695505050505050565b63ffffffff81168114611b6657600080fd5b61ffff81168114611b6657600080fd5b60008083601f84011261430957600080fd5b50813567ffffffffffffffff81111561432157600080fd5b60208301915083602082850101111561433957600080fd5b9250929050565b60008060008060008060008060e0898b03121561435c57600080fd5b883561436781614254565b975060208901359650604089013595506060890135614385816142d5565b94506080890135614395816142e7565b935060a089013567ffffffffffffffff8111156143b157600080fd5b6143bd8b828c016142f7565b90945092505060c08901356143d181614254565b809150509295985092959890939650565b600080604083850312156143f557600080fd5b823561440081614254565b9150602083013561441081614254565b809150509250929050565b60006020828403121561442d57600080fd5b5035919050565b6000806040838503121561444757600080fd5b50508035926020909101359150565b815181526020808301519082015260408101610a98565b60005b83811015614488578181015183820152602001614470565b838111156136505750506000910152565b600081518084526144b181602086016020860161446d565b601f01601f19169290920160200192915050565b602081526000610e656020830184614499565b600080604083850312156144eb57600080fd5b82359150602083013561441081614254565b60008060006060848603121561451257600080fd5b83359250602084013561452481614254565b9150604084013561453481614254565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156142c95783516001600160a01b03168352928401929184019160010161455b565b6000806040838503121561459357600080fd5b823561459e81614254565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600681106145d2576145d26145ac565b9052565b600281106145d2576145d26145ac565b60006102408201905060018060a01b03808c168352808b166020840152808a1660408401528860608401528760808401528087511660a084015250602086015160c0830152604086015161464760e084018280518252602090810151910152565b50606086015163ffffffff9081166101208401526080870151811661014084015260a08701511661016083015260c086015161468c61018084018263ffffffff169052565b5084516101a0830152602085015163ffffffff166101c0830152604085015161ffff166101e08301526146c36102008301856145c2565b6146d16102208301846145d6565b9a9950505050505050505050565b6000806000806000806000806000806101008b8d0312156146ff57600080fd5b8a3561470a81614254565b995060208b0135985060408b0135975060608b0135614728816142d5565b965060808b0135614738816142e7565b955060a08b013567ffffffffffffffff8082111561475557600080fd5b6147618e838f016142f7565b909750955060c08d0135915061477682614254565b90935060e08c0135908082111561478c57600080fd5b818d0191508d601f8301126147a057600080fd5b8135818111156147af57600080fd5b8e60208260071b85010111156147c457600080fd5b6020830194508093505050509295989b9194979a5092959850565b600080600080600080600060c0888a0312156147fa57600080fd5b8735614805816142e7565b9650602088013561481581614254565b9550604088013561482581614254565b9450606088013561483581614254565b9350608088013567ffffffffffffffff8082111561485257600080fd5b818a0191508a601f83011261486657600080fd5b81358181111561487557600080fd5b8b60208260051b850101111561488a57600080fd5b6020830195508094505050506148a260a08901614269565b905092959891949750929550565b60208101610a9882846145c2565b6000602082840312156148d057600080fd5b8135610e65816142e7565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115614910576149106148db565b01949350505050565b600181811c9082168061492d57607f821691505b6020821081141561494e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561496657600080fd5b8151610e6581614254565b600063ffffffff8381169083168181101561498e5761498e6148db565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806149c3576149c3614996565b92169190910492915050565b600063ffffffff808316818516818304811182151516156149f2576149f26148db565b02949350505050565b60038110611b6657600080fd5b838152604060208083018290528282018490526000919060609081850187855b88811015614a8a578135614a3b816149fb565b60038110614a4b57614a4b6145ac565b83528184013584840152858201358684015284820135614a6a81614254565b6001600160a01b0316838601526080928301929190910190600101614a28565b50909998505050505050505050565b8051801515811461241b57600080fd5b600060208284031215614abb57600080fd5b610e6582614a99565b828152606060208201526000614add6060830184614499565b8281036040938401526015815274131bd85b881b5d5cdd081899481858d8d95c1d1959605a1b6020820152919091019392505050565b60008219821115614b2657614b266148db565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614ba357614ba36148db565b5060010190565b600082821015614bbc57614bbc6148db565b500390565b828152606060208201526000614bda6060830184614499565b8281036040938401526013815272426964206d7573742062652070656e64696e6760681b6020820152919091019392505050565b60008060408385031215614c2157600080fd5b614c2a83614a99565b9150602083015190509250929050565b600060208284031215614c4c57600080fd5b8151610e65816142e7565b60008251614c6981846020870161446d565b9190910192915050565b600060208284031215614c8557600080fd5b8151610e65816142d5565b600060208284031215614ca257600080fd5b815160028110610e6557600080fd5b8183823760009101908152919050565b600060208284031215614cd357600080fd5b8151610e65816149fb565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615614d4357614d436148db565b500290565b634e487b7160e01b600052604160045260246000fd5b600081614d6d57614d6d6148db565b506000190190565b600082614d8457614d84614996565b500490565b60008083128015600160ff1b850184121615614da757614da76148db565b6001600160ff1b0384018313811615614dc257614dc26148db565b50500390565b634e487b7160e01b600052603160045260246000fd5b600181815b80851115614e19578160001904821115614dff57614dff6148db565b80851615614e0c57918102915b93841c9390800290614de3565b509250929050565b600082614e3057506001610a98565b81614e3d57506000610a98565b8160018114614e535760028114614e5d57614e79565b6001915050610a98565b60ff841115614e6e57614e6e6148db565b50506001821b610a98565b5060208310610133831016604e8410600b8410161715614e9c575081810a610a98565b614ea68383614dde565b8060001904821115614eba57614eba6148db565b029392505050565b6000610e658383614e21565b600082614edd57614edd614996565b50069056fea264697066735822122034e3c87705f782dafaf54cf16b68fbfb1cf5b2d9b4d35f1e590e09d75a716ce964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103a45760003560e01c8063706a43c3116101e9578063b0e21e8a1161010f578063d87569cc116100ad578063e8cbab091161007c578063e8cbab0914610a33578063ecb96fe614610a46578063f2fde38b14610a59578063f93b6be514610a6c57600080fd5b8063d87569cc146109f2578063d974cc5714610a05578063dbf6248914610a18578063e4467f3514610a2057600080fd5b8063bde644fb116100e9578063bde644fb14610986578063bf77ffae14610999578063d4eda4cf146109cc578063d76ac91f146109df57600080fd5b8063b0e21e8a1461093d578063b5d34fcd14610953578063ba6d5b151461097357600080fd5b80638ac4731911610187578063a10905ea11610156578063a10905ea146108bd578063a51e2bad146108e9578063a75021ba146108fc578063a8cb5d681461090f57600080fd5b80638ac473191461087d5780638da5cb5b146108865780639703ef35146108975780639a11e339146108aa57600080fd5b80638288da8a116101c35780638288da8a14610831578063837c0bf614610844578063842a05d4146108575780638a700b531461086a57600080fd5b8063706a43c314610803578063715018a6146108165780637bbd53d71461081e57600080fd5b806323be345c116102ce57806354fd4d501161026c5780636aedfe681161023b5780636aedfe68146107a45780636b76c085146107b75780636b868afb146107dd5780636c6ca79c146107f057600080fd5b806354fd4d501461073757806356a837f414610740578063572b6c05146107535780635c975abb1461079357600080fd5b80633819bcdc116102a85780633819bcdc146105c55780633ef0a2f7146105d85780634148f94c146106015780634423c5f11461061b57600080fd5b806323be345c1461057f5780632519dc79146105925780632e9332d4146105b257600080fd5b8063127caa881161034657806319b353de1161031557806319b353de146105315780631d12363314610544578063206c54c714610557578063235d5a7b1461056a57600080fd5b8063127caa88146104945780631289b396146104cf5780631420a266146104d857806314573033146104ed57600080fd5b8063093f561711610382578063093f56171461041e5780631042b85f1461044157806310618223146104615780631253c5461461047457600080fd5b8063054de0ff146103a957806306f33a92146103d2578063089487b5146103f3575b600080fd5b6103bc6103b7366004614274565b610a74565b6040516103c99190614291565b60405180910390f35b6103e56103e0366004614340565b610a9e565b6040519081526020016103c9565b6103e56104013660046143e2565b60a360209081526000928352604080842090915290825290205481565b61043161042c36600461441b565b610ac5565b60405190151581526020016103c9565b61045461044f366004614434565b610b1a565b6040516103c99190614456565b61043161046f36600461441b565b610b9f565b61048761048236600461441b565b610c35565b6040516103c991906144c5565b6104ba6104a236600461441b565b60a26020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016103c9565b6103e5609b5481565b6104eb6104e63660046144d8565b610ccf565b005b6105196104fb36600461441b565b6000908152609860205260409020600501546001600160a01b031690565b6040516001600160a01b0390911681526020016103c9565b61043161053f3660046144fd565b610e2d565b6103bc610552366004614274565b610e6c565b6104eb61056536600461441b565b610ed8565b61057261104b565b6040516103c9919061453f565b60aa54610519906001600160a01b031681565b6103e56105a0366004614274565b60a46020526000908152604090205481565b6104eb6105c03660046144d8565b61105c565b6103e56105d3366004614580565b61113f565b6105196105e636600461441b565b6000908152609860205260409020546001600160a01b031690565b610609600781565b60405160ff90911681526020016103c9565b61072261062936600461441b565b60986020908152600091825260409182902080546001820154600283015460038401546004850154875160e08101895260058701546001600160a01b0390811682526006880154828a01528951808b018b52600789015481526008890154818b0152828b0152600988015463ffffffff808216606080860191909152600160201b80840483166080870152600160401b8404831660a0870152600160601b909304821660c08601528c519081018d52600a8b01548152600b8b01549182169b81019b909b520461ffff1699890199909952600c909601549488169793841696939092169490939192909160ff8082169161010090041689565b6040516103c9999897969594939291906145e6565b6103e560a55481565b6104eb61074e366004614274565b611170565b610431610761366004614274565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60655462010000900460ff16610431565b6104546107b2366004614434565b61119a565b6104ba6107c536600461441b565b60a16020526000908152604090205463ffffffff1681565b609f54610519906001600160a01b031681565b6104546107fe36600461441b565b61121f565b6104ba61081136600461441b565b611290565b6104eb6113d2565b6103e561082c3660046146df565b6113e6565b6104eb61083f36600461441b565b611501565b6104eb6108523660046147df565b6116d6565b6104eb610865366004614274565b611910565b6104eb610878366004614434565b6119b9565b6103e560975481565b6033546001600160a01b0316610519565b6104eb6108a536600461441b565b611ab4565b6104eb6108b836600461441b565b611b69565b6105196108cb36600461441b565b6000908152609860205260409020600201546001600160a01b031690565b6104ba6108f736600461441b565b611c20565b6104eb61090a366004614274565b611c37565b61092261091d36600461441b565b611c4e565b604080519384526020840192909252908201526060016103c9565b60655460405161ffff90911681526020016103c9565b6103e5610961366004614274565b609a6020526000908152604090205481565b60a954610519906001600160a01b031681565b61048761099436600461441b565b612308565b6109bf6109a736600461441b565b6000908152609860205260409020600c015460ff1690565b6040516103c991906148b0565b6104eb6109da36600461441b565b612420565b6104eb6109ed366004614274565b6124db565b610431610a003660046144d8565b612545565b610454610a1336600461441b565b61257f565b6104eb6125f0565b6104eb610a2e3660046148be565b612608565b610431610a4136600461441b565b612672565b609e54610519906001600160a01b031681565b6104eb610a67366004614274565b612701565b6104eb612777565b6001600160a01b038116600090815260a060205260409020606090610a989061278f565b92915050565b6000610aa861279c565b610ab889898989898989896127e8565b9998505050505050505050565b600060036000838152609860205260409020600c015460ff166005811115610aef57610aef6145ac565b14610afc57506000919050565b610b0582611290565b63ffffffff164263ffffffff16119050919050565b604080518082019091526000808252602082015260008381526098602052604090206003600c82015460ff166005811115610b5757610b576145ac565b141580610b7557506009810154600160201b900463ffffffff168311155b15610b805750610a98565b600080610b8d8386612e58565b91865250602085015250505092915050565b60008181526098602052604081206001600c82015460ff166005811115610bc857610bc86145ac565b14610bd65750600092915050565b600083815260a2602052604090205463ffffffff16610bf85750600092915050565b600083815260a260205260409020546009820154610c1f9163ffffffff90811691166148f1565b63ffffffff164263ffffffff1611915050919050565b60a66020526000908152604090208054610c4e90614919565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90614919565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b505050505081565b610cd7612ed7565b609e54604051633d36902960e01b8152600481018590526001600160a01b039283169290911690633d36902990602401602060405180830381600087803b158015610d2157600080fd5b505af1158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190614954565b6001600160a01b031614610db45760405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206d75737420626520746865206d61726b6574206f776e65720060448201526064015b60405180910390fd5b600082815260a76020526040902080546001600160a01b0319166001600160a01b038316179055817fa593acf9edc343669c7fc50d2caa3911326adef438361f0fa911be85c9e296a482610e06612ed7565b604080516001600160a01b0393841681529290911660208301520160405180910390a25050565b6000610e398484612545565b8015610e6257506001600160a01b038316600090815260a860205260409020610e629083612ee1565b90505b9392505050565b6001600160a01b038116600090815260996020908152604091829020805483518184028101840190945280845260609392830182828015610ecc57602002820191906000526020600020905b815481526020019060010190808311610eb8575b50505050509050919050565b609e5460008281526098602052604090819020600301549051633d36902960e01b81526001600160a01b0390921691633d36902991610f1d9160040190815260200190565b602060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f9190614954565b6001600160a01b0316610f80612ed7565b6001600160a01b031614611014576040516347bc33cb60e11b8152600481018290526060602482015260146064820152731b585c9ad95d13dddb995c90d85b98d95b109a5960621b608482015260a06044820152602160a48201527f4f6e6c7920746865206d61726b6574206f776e65722063616e2063616e63656c60c4820152602160f81b60e482015261010401610dab565b61101d81612f03565b60405181907ff3f271d754f5264e0d143bf9be577d6eba153b0d833bd3a127d7b1a280bb13f190600090a250565b6060611057609c61278f565b905090565b6110668282612545565b6110c25760405162461bcd60e51b815260206004820152602760248201527f466f72776172646572206d757374206265207472757374656420627920746865604482015266081b585c9ad95d60ca1b6064820152608401610dab565b6110eb6110cd612ed7565b6001600160a01b038316600090815260a86020526040902090612fb7565b50806001600160a01b0316827f65d6b5305e8c0e58e88454a1aeecae0f55975222338b25abd0997b4d305056a1611120612ed7565b6040516001600160a01b03909116815260200160405180910390a35050565b6099602052816000526040600020818154811061115b57600080fd5b90600052602060002001600091509150505481565b611178612fcc565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b604080518082018252600080825260208083018290528582526098905291909120600c81015460039060ff1660058111156111d7576111d76145ac565b1415806111f557506009810154600160201b900463ffffffff168311155b156112005750610a98565b60008061120d8386612e58565b90865260208601525050505092915050565b604080518082019091526000808252602082015260036000838152609860205260409020600c015460ff16600581111561125b5761125b6145ac565b1461126557919050565b6000828152609860205260408120819061127f9042612e58565b918552506020840152509092915050565b6000818152609860205260408120600c81015460039060ff1660058111156112ba576112ba6145ac565b146112c55750919050565b600b81015460098201546112e99163ffffffff90811691600160201b9004166148f1565b6009820154909250600090600160201b900463ffffffff1661130a85611c20565b6113149190614971565b905063ffffffff81161561136b57600b82015460009061133a9063ffffffff16836149ac565b6113459060016148f1565b600b84015490915061135d9063ffffffff16826149cf565b61136790856148f1565b9350505b60098201546113909063ffffffff600160601b8204811691600160201b9004166148f1565b63ffffffff168363ffffffff1611156113cb5760098201546113c89063ffffffff600160601b8204811691600160201b9004166148f1565b92505b5050919050565b6113da612fcc565b6113e46000613045565b565b60006113f061279c565b6114008b8b8b8b8b8b8b8b6127e8565b60aa54604051631532dc4560e01b81529192506000916001600160a01b0390911690631532dc459061143a90859088908890600401614a08565b602060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c9190614aa9565b90506001811515146114f25760405162461bcd60e51b815260206004820152602960248201527f436f6c6c61746572616c2062616c616e636520636f756c64206e6f74206265206044820152681d985b1a59185d195960ba1b6064820152608401610dab565b509a9950505050505050505050565b60408051808201909152600d81526c3634b8bab4b230ba32a637b0b760991b6020820152819060036000838152609860205260409020600c015460ff16600581111561154f5761154f6145ac565b146115715781816040516347bc33cb60e11b8152600401610dab929190614ac4565b61157a83612672565b6115c65760405162461bcd60e51b815260206004820152601760248201527f4c6f616e206d7573742062652064656661756c7465642e0000000000000000006044820152606401610dab565b600083815260986020526040812090806115e08342612e58565b925050915061160f86604051806040016040528085815260200184815250838561160a9190614b13565b613097565b600c8301805460ff19166005179055600383015460009061162f90613370565b60aa5460405163f0472c4960e01b8152600481018a90526001600160a01b03808416602483015292935091169063f0472c4990604401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50506040516001600160a01b03841692508991507f73de9acc561f27528ab0a3b5dd63fefb4e59f95575891299a6f862a78779817690600090a350505050505050565b600054610100900460ff16158080156116f65750600054600160ff909116105b806117105750303b158015611710575060005460ff166001145b61172c5760405162461bcd60e51b8152600401610dab90614b2b565b6000805460ff19166001179055801561174f576000805461ff0019166101001790555b6117588861341b565b611760613453565b60a980546001600160a01b038088166001600160a01b031992831617909255609e80548a8416908316179055609f8054928916929091169190911790556117a682613482565b826117f35760405162461bcd60e51b815260206004820152601b60248201527f4e6f206c656e64696e6720746f6b656e732073706563696669656400000000006044820152606401610dab565b60005b838110156118bf5761183785858381811061181357611813614b79565b90506020020160208101906118289190614274565b6001600160a01b03163b151590565b6118835760405162461bcd60e51b815260206004820152601a60248201527f6c656e64696e6720746f6b656e206e6f7420636f6e74726163740000000000006044820152606401610dab565b6118ad85858381811061189857611898614b79565b90506020020160208101906109ed9190614274565b806118b781614b8f565b9150506117f6565b508015611906576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600054600790610100900460ff16158015611932575060005460ff8083169116105b61194e5760405162461bcd60e51b8152600401610dab90614b2b565b6000805461ffff191660ff83161761010017905561196a612fcc565b61197382613482565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152829060036000838152609860205260409020600c015460ff166005811115611a0357611a036145ac565b14611a255781816040516347bc33cb60e11b8152600401610dab929190614ac4565b600084815260986020526040812081908190611a419042612e58565b919450925090506000611a548284614b13565b905080871015611a875760405162dd9d0f60e61b8152600481018990526024810188905260448101829052606401610dab565b611906886040518060400160405280858b611aa29190614baa565b815260200185905261160a8588614b13565b600081815260986020526040902080546003909101546001600160a01b0390911690611adf90613370565b6001600160a01b031614611b5d576040516347bc33cb60e11b81526004810182905260606024820152600960648201526818d85b98d95b109a5960ba1b608482015260a06044820152601e60a48201527f4f6e6c792074686520626964206f776e65722063616e2063616e63656c21000060c482015260e401610dab565b611b6681612f03565b50565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152609860205260409020600c015460ff166005811115611bb357611bb36145ac565b14611bd55781816040516347bc33cb60e11b8152600401610dab929190614ac4565b60008381526098602052604081208190611bef9042612e58565b9250509150611c1985604051806040016040528085815260200184815250838561160a9190614b13565b5050505050565b6000818152609860205260408120610a9890613589565b611c3f612fcc565b611c4a609c826135cf565b5050565b6000806000836040518060400160405280600f81526020016e1b195b99195c9058d8d95c1d109a59608a1b81525060016005811115611c8f57611c8f6145ac565b6000838152609860205260409020600c015460ff166005811115611cb557611cb56145ac565b14611cd75781816040516347bc33cb60e11b8152600401610dab929190614bc1565b611cdf61279c565b60008681526098602052604081206003810154909190611cfe90613370565b609e546003840154604051633ef19a9b60e01b815260048101919091526001600160a01b03808416602483015292935060009290911690633ef19a9b906044016040805180830381600087803b158015611d5757600080fd5b505af1158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190614c0e565b50905080611dd55760405162461bcd60e51b81526020600482015260136024820152722737ba103b32b934b334b2b2103632b73232b960691b6044820152606401610dab565b609e546003840154604051631cc672df60e01b81526001600160a01b0390921691631cc672df91611e0c9160040190815260200190565b602060405180830381600087803b158015611e2657600080fd5b505af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190614aa9565b15611e9e5760405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc818db1bdcd95960821b6044820152606401610dab565b611ea789610b9f565b15611ee65760405162461bcd60e51b815260206004820152600f60248201526e109a59081a185cc8195e1c1a5c9959608a1b6044820152606401610dab565b6009830180546bffffffffffffffff000000001916600160201b4263ffffffff1690810263ffffffff60401b191691909117600160401b91909102179055600c830180546003919060ff191660018302179055506002830180546001600160a01b0319166001600160a01b038481169190911790915560aa546040516346f0b08b60e11b8152600481018c9052911690638de1611690602401600060405180830381600087803b158015611f9957600080fd5b505af1158015611fad573d6000803e3d6000fd5b50505050611fcc611fc160655461ffff1690565b6006850154906135e4565b609e54600385015460405163028ba63960e21b8152929a5061205c926001600160a01b0390921691630a2e98e49161200a9160040190815260200190565b602060405180830381600087803b15801561202457600080fd5b505af1158015612038573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc19190614c3a565b9650868884600501600101546120729190614baa565b61207c9190614baa565b60028401549096506120b9906001600160a01b03166120a36033546001600160a01b031690565b60058601546001600160a01b031691908b6135f6565b6002830154609e5460038501546040516332209bcb60e11b8152600481019190915261215e926001600160a01b03908116921690636441379690602401602060405180830381600087803b15801561211057600080fd5b505af1158015612124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121489190614954565b60058601546001600160a01b031691908a6135f6565b600283015460018401546005850154612188926001600160a01b03918216929082169116896135f6565b600683015460058401546001600160a01b03908116600090815260a3602090815260408083206002890154909416835292905290812080549091906121ce908490614b13565b9091555050600683015460058401546001600160a01b0316600090815260a4602052604081208054909190612204908490614b13565b909155505082546001600160a01b0316600090815260a06020526040902061222c908a613656565b5060028301546040516001600160a01b03909116908a907fde9d3bfa8771df6761c0afac2375c88c70a3aa30478e1bd15363294033b470ed90600090a3604051671c1c9bdd1bd8dbdb60c21b81528890600801604051908190038120908b907f476a21a61ac4a7da250e040733aa10facd2eeee584b2c009d178c3de3d8a12dc90600090a46040516a6d61726b6574706c61636560a81b81528790600b01604051908190038120908b907f476a21a61ac4a7da250e040733aa10facd2eeee584b2c009d178c3de3d8a12dc90600090a450505050509193909250565b600081815260a66020526040902080546060919061232590614919565b80601f016020809104026020016040519081016040528092919081815260200182805461235190614919565b801561239e5780601f106123735761010080835404028352916020019161239e565b820191906000526020600020905b81548152906001019060200180831161238157829003601f168201915b50505050509050806040516020016123b69190614c57565b604051602081830303815290604052805190602001207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b141561241b5760008281526098602090815260409091206004015490612417908290613662565b9150505b919050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152609860205260409020600c015460ff16600581111561246a5761246a6145ac565b1461248c5781816040516347bc33cb60e11b8152600401610dab929190614ac4565b6000838152609860205260408120819081906124a89042612e58565b9250925092506124d386604051806040016040528085815260200184815250838661160a9190614b13565b505050505050565b6124e3612fcc565b6001600160a01b0381163b61253a5760405162461bcd60e51b815260206004820152601f60248201527f496e636f7272656374206c656e64696e6720746f6b656e2061646472657373006044820152606401610dab565b611c4a609c82612fb7565b600082815260a760205260408120546001600160a01b0383811691161480610e6557505060a9546001600160a01b03908116911614919050565b604080518082019091526000808252602082015260036000838152609860205260409020600c015460ff1660058111156125bb576125bb6145ac565b146125c557919050565b600082815260986020526040812081906125df9042612e58565b908552602085015250919392505050565b6125f8612fcc565b61260061279c565b6113e46137fe565b612610612fcc565b60655461ffff828116911614156126245750565b6065805461ffff83811661ffff198316811790935560408051938452911660208301819052917f4810ece076cee6c6042808956f3f65dad1bc72b75181341d7bed810d39deda0f91016119ad565b60008181526098602052604081206003600c82015460ff16600581111561269b5761269b6145ac565b146126a95750600092915050565b600083815260a1602052604090205463ffffffff166126cb5750600092915050565b600083815260a1602052604090205463ffffffff166126e984611c20565b6126f39042614971565b63ffffffff16119392505050565b612709612fcc565b6001600160a01b03811661276e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dab565b611b6681613045565b61277f612fcc565b61278761385d565b6113e46138ac565b60606000610e65836138e9565b60655462010000900460ff16156113e45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610dab565b6000806127f489613370565b609e5460405163066e751360e01b8152600481018c90526001600160a01b0380841660248301529293506000929091169063066e7513906044016040805180830381600087803b15801561284757600080fd5b505af115801561285b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287f9190614c0e565b509050806128c75760405162461bcd60e51b81526020600482015260156024820152742737ba103b32b934b334b2b2103137b93937bbb2b960591b6044820152606401610dab565b609e54604051631cc672df60e01b8152600481018c90526001600160a01b0390911690631cc672df90602401602060405180830381600087803b15801561290d57600080fd5b505af1158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190614aa9565b156129855760405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc818db1bdcd95960821b6044820152606401610dab565b612990609c8c612ee1565b6129dc5760405162461bcd60e51b815260206004820152601c60248201527f4c656e64696e6720746f6b656e206e6f7420617574686f72697a6564000000006044820152606401610dab565b609754600081815260986020526040902080546001600160a01b0319166001600160a01b03858116919091178255919450908516612a245780546001600160a01b0316612a26565b845b6001820180546001600160a01b03199081166001600160a01b0393841617909155600383018d90556005830180549091168e8316179055600682018b90556009820180546fffffffff0000000000000000ffffffff1916600160601b63ffffffff8d81169190910263ffffffff1916919091174291909116179055609e5460405163805deb5360e01b8152600481018e905291169063805deb5390602401602060405180830381600087803b158015612ade57600080fd5b505af1158015612af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b169190614c73565b600b8201805463ffffffff9290921665ffffffffffff1990921691909117600160201b61ffff8b1602179055609e546040516311bed5bb60e01b8152600481018d90526001600160a01b03909116906311bed5bb90602401602060405180830381600087803b158015612b8857600080fd5b505af1158015612b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc09190614c73565b609754600090815260a1602052604090819020805463ffffffff191663ffffffff9390931692909217909155609e54905163082fc54d60e01b8152600481018d90526001600160a01b039091169063082fc54d90602401602060405180830381600087803b158015612c3157600080fd5b505af1158015612c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c699190614c73565b609754600090815260a2602052604090819020805463ffffffff191663ffffffff9390931692909217909155609e54905163d6e794dd60e01b8152600481018d90526001600160a01b039091169063d6e794dd9060240160206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d109190614c90565b600c8201805461ff001916610100836001811115612d3057612d306145ac565b0217905550600c810154600b820154612d5c91610100900460ff16908c908c9063ffffffff168c613943565b600a820155609754600090815260a660205260409020612d7d9088886141bb565b50600c8101805460ff19166001179055604051612da09088908890602001614cb1565b60408051808303601f19018152908290528051602091820120835460975460018601546001600160a01b0390811686529294929091169290917ff887b1f393f43fb94c5d50483df4bd410ffbf286128c5f24ff56c580ac7f731c910160405180910390a480546001600160a01b03166000908152609960209081526040822060978054825460018101845592855292842090910191909155805491612e4483614b8f565b919050555050505098975050505050505050565b60068201546007830154600b840154600a85015460009384938493612eca9361ffff600160201b8304169163ffffffff16612e928b613589565b60098c0154600c8d015463ffffffff928316928d92600160201b8104821692600160601b90910490911690610100900460ff166139af565b9250925092509250925092565b6000611057613ab0565b6001600160a01b03811660009081526001830160205260408120541515610e65565b60408051808201909152600981526818d85b98d95b109a5960ba1b6020820152819060016000838152609860205260409020600c015460ff166005811115612f4d57612f4d6145ac565b14612f6f5781816040516347bc33cb60e11b8152600401610dab929190614bc1565b600083815260986020526040808220600c01805460ff191660021790555184917fa0633b09ac3029a6746aa27d4db1407f5f287a10c41a6b2ad2859f4da9b2680b91a2505050565b6000610e65836001600160a01b038416613af5565b612fd4612ed7565b6001600160a01b0316612fef6033546001600160a01b031690565b6001600160a01b0316146113e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610dab565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600083815260986020908152604082209084015184519192916130ba9190614b13565b609f54835460405163c7312e4760e01b81526001600160a01b0391821660048201526024810189905292935060009291169063c7312e4790604401602060405180830381600087803b15801561310f57600080fd5b505af1158015613123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131479190614cc1565b905083821061321457600c8301805460ff1916600417905582546001600160a01b0316600090815260a0602052604090208492506131859087613b44565b5060aa54604051632e1a7d4d60e01b8152600481018890526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156131cc57600080fd5b505af11580156131e0573d6000803e3d6000fd5b50506040518892507f9a7851747cd7ffb3fe0a32caf3da48b31f27cebe131267051640f8b72fc471869150600090a2613240565b60405186907f68ca97895fe2d09eab47e752271728ade667e72dda27e68c20eaa191a9c2187d90600090a25b61326e6132508460030154613370565b600285015460058601546001600160a01b03908116929116856135f6565b8451600784018054600090613284908490614b13565b909155505060208501516008840180546000906132a2908490614b13565b909155505060098301805463ffffffff60401b1916600160401b4263ffffffff160217905560008160028111156132db576132db6145ac565b146124d357609f54835460405163c7312e4760e01b81526001600160a01b0391821660048201526024810189905291169063c7312e4790604401602060405180830381600087803b15801561332f57600080fd5b505af1158015613343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133679190614cc1565b50505050505050565b600061337e82610a00612ed7565b156134135760131936013560601c6133bb8160a8600061339c612ed7565b6001600160a01b03168152602081019190915260400160002090612ee1565b610a985760405162461bcd60e51b8152602060048201526024808201527f53656e646572206d75737420617070726f7665206d61726b657420666f727761604482015263393232b960e11b6064820152608401610dab565b610a98612ed7565b600054610100900460ff166134425760405162461bcd60e51b8152600401610dab90614cde565b61344a613b50565b611b6681613b7f565b600054610100900460ff1661347a5760405162461bcd60e51b8152600401610dab90614cde565b6113e4613baf565b600054610100900460ff166134a95760405162461bcd60e51b8152600401610dab90614cde565b60aa546001600160a01b0316156135025760405162461bcd60e51b815260206004820152601e60248201527f436f6c6c61746572616c204d616e6167657220616c72656164792073657400006044820152606401610dab565b6001600160a01b0381163b6135675760405162461bcd60e51b815260206004820152602560248201527f436f6c6c61746572616c204d616e61676572206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610dab565b60aa80546001600160a01b0319166001600160a01b0392909216919091179055565b6009810154600090600160401b900463ffffffff16156135ba576009820154600160401b900463ffffffff16610a98565b5060090154600160201b900463ffffffff1690565b6000610e65836001600160a01b038416613be4565b6000610e65838361ffff166002613cd7565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613650908590613cf6565b50505050565b6000610e658383613af5565b60606000613671836002614d29565b61367c906002614b13565b67ffffffffffffffff81111561369457613694614d48565b6040519080825280601f01601f1916602001820160405280156136be576020820181803683370190505b509050600360fc1b816000815181106136d9576136d9614b79565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061370857613708614b79565b60200101906001600160f81b031916908160001a905350600061372c846002614d29565b613737906001614b13565b90505b60018111156137af576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061376b5761376b614b79565b1a60f81b82828151811061378157613781614b79565b60200101906001600160f81b031916908160001a90535060049490941c936137a881614d5e565b905061373a565b508315610e655760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610dab565b61380661279c565b6065805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613840612ed7565b6040516001600160a01b03909116815260200160405180910390a1565b60655462010000900460ff166113e45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610dab565b6138b461385d565b6065805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613840612ed7565b606081600001805480602002602001604051908101604052809291908181526020018280548015610ecc5760200282019190600052602060002090815481526020019060010190808311610eb85750505050509050919050565b60006001866001811115613959576139596145ac565b14156139975761399061397d63ffffffff808616906301e1338090600a90613dcd16565b600a61398988866135e4565b9190613cd7565b90506139a6565b6139a385858585613df0565b90505b95945050505050565b600080806139bd8c8e614baa565b925060006139cb848d6135e4565b905060006139d98a8a614baa565b90506301e133806139ea8284614d29565b6139f49190614d75565b92506000613a02898b614d89565b613a0c9089614d89565b905060008c821280613a2757508d613a248689614b13565b11155b90506001886001811115613a3d57613a3d6145ac565b1415613a52578015613a4d578695505b613a9c565b600081613a5f578e613a69565b613a698689614b13565b905060008e613a788684614d29565b613a829190614d75565b9050613a97613a918883614baa565b8a613ea7565b975050505b505050509a509a509a975050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415613af0575060131936013560601c90565b503390565b6000818152600183016020526040812054613b3c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a98565b506000610a98565b6000610e658383613be4565b600054610100900460ff16613b775760405162461bcd60e51b8152600401610dab90614cde565b6113e4613ebd565b600054610100900460ff16613ba65760405162461bcd60e51b8152600401610dab90614cde565b611b6681612608565b600054610100900460ff16613bd65760405162461bcd60e51b8152600401610dab90614cde565b6065805462ff000019169055565b60008181526001830160205260408120548015613ccd576000613c08600183614baa565b8554909150600090613c1c90600190614baa565b9050818114613c81576000866000018281548110613c3c57613c3c614b79565b9060005260206000200154905080876000018481548110613c5f57613c5f614b79565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c9257613c92614dc8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a98565b6000915050610a98565b6000613ce282613ef4565b613cec8486614d29565b610e629190614d75565b6000613d4b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f0c9092919063ffffffff16565b805190915015613dc85780806020019051810190613d699190614aa9565b613dc85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610dab565b505050565b600082613ddc57506000610e65565b82613de683613ef4565b613cec9086614d29565b600080613dfd84866149ac565b63ffffffff16905061ffff8316613e2057613e188187614d75565b915050613e9f565b670de0b6b3a76400006000613e526301e13380613e4c63ffffffff8916613e4689613f1b565b90613f3f565b90613f73565b90506000613e6a84613e648486614b13565b90613fa3565b90506000613e7c82613e468c86613f3f565b90506000613e8a8584614baa565b9050613e968282613f73565b96505050505050505b949350505050565b6000818310613eb65781610e65565b5090919050565b600054610100900460ff16613ee45760405162461bcd60e51b8152600401610dab90614cde565b6113e4613eef612ed7565b613045565b6000613f0182600a614ec2565b610a98906064614d29565b6060610e628484600085613fbb565b6000610a98612710613f3961ffff8516670de0b6b3a76400006140ec565b906140f8565b6000610e65670de0b6b3a7640000613f39613f5a86866140ec565b613f6d6002670de0b6b3a7640000614d75565b90614104565b600080613f81600284614d75565b9050613e9f83613f39613f9c87670de0b6b3a76400006140ec565b8490614104565b6000610e658383670de0b6b3a7640000613f3f614110565b60608247101561401c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610dab565b6001600160a01b0385163b6140735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610dab565b600080866001600160a01b0316858760405161408f9190614c57565b60006040518083038185875af1925050503d80600081146140cc576040519150601f19603f3d011682016040523d82523d6000602084013e6140d1565b606091505b50915091506140e1828286614182565b979650505050505050565b6000610e658284614d29565b6000610e658284614d75565b6000610e658284614b13565b600061411d600285614ece565b6141275782614129565b845b9050614136600285614d75565b93505b8315613e9f5761414d85868463ffffffff16565b945061415a600285614ece565b156141705761416d81868463ffffffff16565b90505b61417b600285614d75565b9350614139565b60608315614191575081610e65565b8251156141a15782518084602001fd5b8160405162461bcd60e51b8152600401610dab91906144c5565b8280546141c790614919565b90600052602060002090601f0160209004810192826141e9576000855561422f565b82601f106142025782800160ff1982351617855561422f565b8280016001018555821561422f579182015b8281111561422f578235825591602001919060010190614214565b5061423b92915061423f565b5090565b5b8082111561423b5760008155600101614240565b6001600160a01b0381168114611b6657600080fd5b803561241b81614254565b60006020828403121561428657600080fd5b8135610e6581614254565b6020808252825182820181905260009190848201906040850190845b818110156142c9578351835292840192918401916001016142ad565b50909695505050505050565b63ffffffff81168114611b6657600080fd5b61ffff81168114611b6657600080fd5b60008083601f84011261430957600080fd5b50813567ffffffffffffffff81111561432157600080fd5b60208301915083602082850101111561433957600080fd5b9250929050565b60008060008060008060008060e0898b03121561435c57600080fd5b883561436781614254565b975060208901359650604089013595506060890135614385816142d5565b94506080890135614395816142e7565b935060a089013567ffffffffffffffff8111156143b157600080fd5b6143bd8b828c016142f7565b90945092505060c08901356143d181614254565b809150509295985092959890939650565b600080604083850312156143f557600080fd5b823561440081614254565b9150602083013561441081614254565b809150509250929050565b60006020828403121561442d57600080fd5b5035919050565b6000806040838503121561444757600080fd5b50508035926020909101359150565b815181526020808301519082015260408101610a98565b60005b83811015614488578181015183820152602001614470565b838111156136505750506000910152565b600081518084526144b181602086016020860161446d565b601f01601f19169290920160200192915050565b602081526000610e656020830184614499565b600080604083850312156144eb57600080fd5b82359150602083013561441081614254565b60008060006060848603121561451257600080fd5b83359250602084013561452481614254565b9150604084013561453481614254565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156142c95783516001600160a01b03168352928401929184019160010161455b565b6000806040838503121561459357600080fd5b823561459e81614254565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600681106145d2576145d26145ac565b9052565b600281106145d2576145d26145ac565b60006102408201905060018060a01b03808c168352808b166020840152808a1660408401528860608401528760808401528087511660a084015250602086015160c0830152604086015161464760e084018280518252602090810151910152565b50606086015163ffffffff9081166101208401526080870151811661014084015260a08701511661016083015260c086015161468c61018084018263ffffffff169052565b5084516101a0830152602085015163ffffffff166101c0830152604085015161ffff166101e08301526146c36102008301856145c2565b6146d16102208301846145d6565b9a9950505050505050505050565b6000806000806000806000806000806101008b8d0312156146ff57600080fd5b8a3561470a81614254565b995060208b0135985060408b0135975060608b0135614728816142d5565b965060808b0135614738816142e7565b955060a08b013567ffffffffffffffff8082111561475557600080fd5b6147618e838f016142f7565b909750955060c08d0135915061477682614254565b90935060e08c0135908082111561478c57600080fd5b818d0191508d601f8301126147a057600080fd5b8135818111156147af57600080fd5b8e60208260071b85010111156147c457600080fd5b6020830194508093505050509295989b9194979a5092959850565b600080600080600080600060c0888a0312156147fa57600080fd5b8735614805816142e7565b9650602088013561481581614254565b9550604088013561482581614254565b9450606088013561483581614254565b9350608088013567ffffffffffffffff8082111561485257600080fd5b818a0191508a601f83011261486657600080fd5b81358181111561487557600080fd5b8b60208260051b850101111561488a57600080fd5b6020830195508094505050506148a260a08901614269565b905092959891949750929550565b60208101610a9882846145c2565b6000602082840312156148d057600080fd5b8135610e65816142e7565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115614910576149106148db565b01949350505050565b600181811c9082168061492d57607f821691505b6020821081141561494e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561496657600080fd5b8151610e6581614254565b600063ffffffff8381169083168181101561498e5761498e6148db565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806149c3576149c3614996565b92169190910492915050565b600063ffffffff808316818516818304811182151516156149f2576149f26148db565b02949350505050565b60038110611b6657600080fd5b838152604060208083018290528282018490526000919060609081850187855b88811015614a8a578135614a3b816149fb565b60038110614a4b57614a4b6145ac565b83528184013584840152858201358684015284820135614a6a81614254565b6001600160a01b0316838601526080928301929190910190600101614a28565b50909998505050505050505050565b8051801515811461241b57600080fd5b600060208284031215614abb57600080fd5b610e6582614a99565b828152606060208201526000614add6060830184614499565b8281036040938401526015815274131bd85b881b5d5cdd081899481858d8d95c1d1959605a1b6020820152919091019392505050565b60008219821115614b2657614b266148db565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614ba357614ba36148db565b5060010190565b600082821015614bbc57614bbc6148db565b500390565b828152606060208201526000614bda6060830184614499565b8281036040938401526013815272426964206d7573742062652070656e64696e6760681b6020820152919091019392505050565b60008060408385031215614c2157600080fd5b614c2a83614a99565b9150602083015190509250929050565b600060208284031215614c4c57600080fd5b8151610e65816142e7565b60008251614c6981846020870161446d565b9190910192915050565b600060208284031215614c8557600080fd5b8151610e65816142d5565b600060208284031215614ca257600080fd5b815160028110610e6557600080fd5b8183823760009101908152919050565b600060208284031215614cd357600080fd5b8151610e65816149fb565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615614d4357614d436148db565b500290565b634e487b7160e01b600052604160045260246000fd5b600081614d6d57614d6d6148db565b506000190190565b600082614d8457614d84614996565b500490565b60008083128015600160ff1b850184121615614da757614da76148db565b6001600160ff1b0384018313811615614dc257614dc26148db565b50500390565b634e487b7160e01b600052603160045260246000fd5b600181815b80851115614e19578160001904821115614dff57614dff6148db565b80851615614e0c57918102915b93841c9390800290614de3565b509250929050565b600082614e3057506001610a98565b81614e3d57506000610a98565b8160018114614e535760028114614e5d57614e79565b6001915050610a98565b60ff841115614e6e57614e6e6148db565b50506001821b610a98565b5060208310610133831016604e8410600b8410161715614e9c575081810a610a98565b614ea68383614dde565b8060001904821115614eba57614eba6148db565b029392505050565b6000610e658383614e21565b600082614edd57614edd614996565b50069056fea264697066735822122034e3c87705f782dafaf54cf16b68fbfb1cf5b2d9b4d35f1e590e09d75a716ce964736f6c63430008090033",
  "devdoc": {
    "errors": {
      "ActionNotAllowed(uint256,string,string)": [
        {
          "params": {
            "action": "The action string (i.e: 'repayLoan', 'cancelBid', 'etc)",
            "bidId": "The id of the bid.",
            "message": "The message string to return to the user explaining why the tx was reverted"
          }
        }
      ],
      "PaymentNotMinimum(uint256,uint256,uint256)": [
        {
          "params": {
            "bidId": "The id of the bid the borrower is attempting to repay.",
            "minimumOwed": "The minimum owed value",
            "payment": "The payment made by the borrower"
          }
        }
      ]
    },
    "events": {
      "AcceptedBid(uint256,address)": {
        "params": {
          "bidId": "The id of the bid accepted.",
          "lender": "The address of the accepted bid lender."
        }
      },
      "CancelledBid(uint256)": {
        "params": {
          "bidId": "The id of the cancelled bid."
        }
      },
      "FeePaid(uint256,string,uint256)": {
        "params": {
          "amount": "The amount of the fee being paid.",
          "bidId": "The id of the bid.",
          "feeType": "The name of the fee being paid."
        }
      },
      "LoanLiquidated(uint256,address)": {
        "params": {
          "bidId": "The id of the bid/loan which was repaid."
        }
      },
      "LoanRepaid(uint256)": {
        "params": {
          "bidId": "The id of the bid/loan which was repaid."
        }
      },
      "LoanRepayment(uint256)": {
        "params": {
          "bidId": "The id of the bid/loan to which the payment was made."
        }
      },
      "MarketOwnerCancelledBid(uint256)": {
        "params": {
          "bidId": "The id of the bid funded. Note: The `CancelledBid` event will also be emitted."
        }
      },
      "SubmittedBid(uint256,address,address,bytes32)": {
        "params": {
          "bidId": "The id of the bid submitted.",
          "borrower": "The address of the bid borrower.",
          "metadataURI": "URI for additional bid information as part of loan bid."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLendingToken(address)": {
        "params": {
          "_lendingToken": "The contract address of the lending token."
        }
      },
      "approveMarketForwarder(uint256,address)": {
        "params": {
          "_forwarder": "A forwarder contract address.",
          "_marketId": "An ID for a lending market."
        }
      },
      "calculateAmountDue(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to get the payment amount for."
        }
      },
      "calculateAmountDue(uint256,uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to get the payment amount for.",
          "_timestamp": "The timestamp at which to get the due payment at."
        }
      },
      "calculateAmountOwed(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to calculate the owed amount for."
        }
      },
      "calculateAmountOwed(uint256,uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to calculate the owed amount for.",
          "_timestamp": "The timestamp at which to calculate the loan owed amount at."
        }
      },
      "calculateNextDueDate(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid."
        }
      },
      "cancelBid(uint256)": {
        "params": {
          "_bidId": "The id of the bid to cancel."
        }
      },
      "getLoanBorrower(uint256)": {
        "params": {
          "_bidId": "The id of the bid/loan to get the borrower for."
        },
        "returns": {
          "borrower_": "The address of the borrower associated with the bid."
        }
      },
      "getLoanLender(uint256)": {
        "params": {
          "_bidId": "The id of the bid/loan to get the lender for."
        },
        "returns": {
          "lender_": "The address of the lender associated with the bid."
        }
      },
      "getMetadataURI(uint256)": {
        "params": {
          "_bidId": "The id of the bid to return the metadataURI for"
        },
        "returns": {
          "metadataURI_": "The metadataURI for the bid, as a string."
        }
      },
      "hasApprovedMarketForwarder(uint256,address,address)": {
        "params": {
          "_account": "The address to verify set an approval.",
          "_forwarder": "A forwarder contract address.",
          "_marketId": "An ID for a lending market."
        },
        "returns": {
          "_0": "A boolean indicating if an approval was set."
        }
      },
      "initialize(uint16,address,address,address,address[],address)": {
        "params": {
          "_collateralManagerAddress": "The address of the collateral manager contracts.",
          "_lendingTokens": "The list of tokens allowed as lending assets on the protocol.",
          "_protocolFee": "The fee collected by the protocol for loan processing."
        }
      },
      "isLoanDefaulted(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to check for."
        }
      },
      "isLoanExpired(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to check for."
        }
      },
      "isPaymentLate(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to check for."
        }
      },
      "isTrustedMarketForwarder(uint256,address)": {
        "params": {
          "_marketId": "An ID for a lending market.",
          "_trustedMarketForwarder": "An address to check if is a trusted forwarder in the given market."
        },
        "returns": {
          "_0": "A boolean indicating the forwarder address is trusted in a market."
        }
      },
      "lastRepaidTimestamp(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to get the timestamp for."
        }
      },
      "lenderAcceptBid(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to accept."
        }
      },
      "liquidateLoanFull(uint256)": {
        "params": {
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "marketOwnerCancelBid(uint256)": {
        "params": {
          "_bidId": "The id of the bid to cancel."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeLendingToken(address)": {
        "params": {
          "_lendingToken": "The contract address of the lending token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repayLoan(uint256,uint256)": {
        "params": {
          "_amount": "The amount of the payment.",
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "repayLoanFull(uint256)": {
        "params": {
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "repayLoanMinimum(uint256)": {
        "params": {
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "setProtocolFee(uint16)": {
        "params": {
          "newFee": "The new protocol fee to be set."
        }
      },
      "setReputationManager(address)": {
        "params": {
          "_reputationManager": "The new contract address."
        }
      },
      "setTrustedMarketForwarder(uint256,address)": {
        "params": {
          "_forwarder": "A forwarder contract address.",
          "_marketId": "An ID for a lending market."
        }
      },
      "submitBid(address,uint256,uint256,uint32,uint16,string,address)": {
        "params": {
          "_APR": "The proposed interest rate for the loan bid.",
          "_duration": "The recurrent length of time before which a payment is due.",
          "_lendingToken": "The lending token asset requested to be borrowed.",
          "_marketplaceId": "The unique id of the marketplace for the bid.",
          "_metadataURI": "The URI for additional borrower loan information as part of loan bid.",
          "_principal": "The principal amount of the loan bid.",
          "_receiver": "The address where the loan amount will be sent to."
        }
      },
      "submitBid(address,uint256,uint256,uint32,uint16,string,address,(uint8,uint256,uint256,address)[])": {
        "params": {
          "_APR": "The proposed interest rate for the loan bid.",
          "_collateralInfo": "Additional information about the collateral asset.",
          "_duration": "The recurrent length of time before which a payment is due.",
          "_lendingToken": "The lending token asset requested to be borrowed.",
          "_marketplaceId": "The unique id of the marketplace for the bid.",
          "_metadataURI": "The URI for additional borrower loan information as part of loan bid.",
          "_principal": "The principal amount of the loan bid.",
          "_receiver": "The address where the loan amount will be sent to."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActionNotAllowed(uint256,string,string)": [
        {
          "notice": "This error is reverted when the action isn't allowed"
        }
      ],
      "PaymentNotMinimum(uint256,uint256,uint256)": [
        {
          "notice": "This error is reverted when repayment amount is less than the required minimum"
        }
      ]
    },
    "events": {
      "AcceptedBid(uint256,address)": {
        "notice": "This event is emitted when a bid has been accepted by a lender."
      },
      "CancelledBid(uint256)": {
        "notice": "This event is emitted when a previously submitted bid has been cancelled."
      },
      "FeePaid(uint256,string,uint256)": {
        "notice": "This event is emitted when a fee has been paid related to a bid."
      },
      "LoanLiquidated(uint256,address)": {
        "notice": "This event is emitted when a loan has been fully repaid."
      },
      "LoanRepaid(uint256)": {
        "notice": "This event is emitted when a loan has been fully repaid."
      },
      "LoanRepayment(uint256)": {
        "notice": "This event is emitted when a payment is made towards an active loan."
      },
      "MarketOwnerCancelledBid(uint256)": {
        "notice": "This event is emitted when market owner has cancelled a pending bid in their market."
      },
      "ProtocolFeeSet(uint16,uint16)": {
        "notice": "This event is emitted when the protocol fee has been updated."
      },
      "SubmittedBid(uint256,address,address,bytes32)": {
        "notice": "This event is emitted when a new bid is submitted."
      }
    },
    "kind": "user",
    "methods": {
      "CURRENT_CODE_VERSION()": {
        "notice": "Constant Variables *"
      },
      "addLendingToken(address)": {
        "notice": "Lets the DAO/owner of the protocol add an authorized lending token."
      },
      "approveMarketForwarder(uint256,address)": {
        "notice": "Approves a forwarder contract to use their address as a sender for a specific market.The forwarder given must be trusted by the market given."
      },
      "bidId()": {
        "notice": "Storage Variables "
      },
      "calculateAmountDue(uint256)": {
        "notice": "Calculates the minimum payment amount due for a loan."
      },
      "calculateAmountDue(uint256,uint256)": {
        "notice": "Calculates the minimum payment amount due for a loan at a specific timestamp."
      },
      "calculateAmountOwed(uint256)": {
        "notice": "Calculates the total amount owed for a bid."
      },
      "calculateAmountOwed(uint256,uint256)": {
        "notice": "Calculates the total amount owed for a loan bid at a specific timestamp."
      },
      "calculateNextDueDate(uint256)": {
        "notice": "Returns the next due date for a loan payment."
      },
      "cancelBid(uint256)": {
        "notice": "Function for a borrower to cancel their pending bid."
      },
      "constructor": {
        "notice": "Constructor *"
      },
      "getLendingTokens()": {
        "notice": "Returns the list of authorized tokens on the protocol."
      },
      "getLoanBorrower(uint256)": {
        "notice": "Returns the borrower address for a given bid."
      },
      "getLoanLender(uint256)": {
        "notice": "Returns the lender address for a given bid."
      },
      "getMetadataURI(uint256)": {
        "notice": "Gets the metadataURI for a bidId."
      },
      "hasApprovedMarketForwarder(uint256,address,address)": {
        "notice": "Checks if an account has approved a forwarder for a market."
      },
      "initialize(uint16,address,address,address,address[],address)": {
        "notice": "Initializes the proxy."
      },
      "isLoanDefaulted(uint256)": {
        "notice": "Checks to see if a borrower is delinquent."
      },
      "isLoanExpired(uint256)": {
        "notice": "Checks to see if a pending loan has expired so it is no longer able to be accepted."
      },
      "isPaymentLate(uint256)": {
        "notice": "Checks to see if a borrower is delinquent."
      },
      "isTrustedMarketForwarder(uint256,address)": {
        "notice": "Checks if an address is a trusted forwarder contract for a given market."
      },
      "lastRepaidTimestamp(uint256)": {
        "notice": "Returns the last repaid timestamp for a loan."
      },
      "lenderAcceptBid(uint256)": {
        "notice": "Function for a lender to accept a proposed loan bid."
      },
      "liquidateLoanFull(uint256)": {
        "notice": "Function for users to liquidate a defaulted loan."
      },
      "marketOwnerCancelBid(uint256)": {
        "notice": "Function for a market owner to cancel a bid in the market."
      },
      "pauseProtocol()": {
        "notice": "Lets the DAO/owner of the protocol implement an emergency stop mechanism."
      },
      "protocolFee()": {
        "notice": "Returns the current protocol fee."
      },
      "removeLendingToken(address)": {
        "notice": "Lets the DAO/owner of the protocol remove an authorized lending token."
      },
      "repayLoan(uint256,uint256)": {
        "notice": "Function for users to make a payment towards an active loan."
      },
      "repayLoanFull(uint256)": {
        "notice": "Function for users to repay an active loan in full."
      },
      "repayLoanMinimum(uint256)": {
        "notice": "Function for users to make the minimum amount due for an active loan."
      },
      "setProtocolFee(uint16)": {
        "notice": "Lets the DAO/owner of the protocol to set a new protocol fee."
      },
      "setReputationManager(address)": {
        "notice": "Lets the DAO/owner of the protocol to set a new reputation manager contract."
      },
      "setTrustedMarketForwarder(uint256,address)": {
        "notice": "Sets a trusted forwarder for a lending market.The caller must owner the market given. See {MarketRegistry}"
      },
      "submitBid(address,uint256,uint256,uint32,uint16,string,address)": {
        "notice": "Function for a borrower to create a bid for a loan without Collateral."
      },
      "submitBid(address,uint256,uint256,uint32,uint16,string,address,(uint8,uint256,uint256,address)[])": {
        "notice": "Function for a borrower to create a bid for a loan with Collateral."
      },
      "unpauseProtocol()": {
        "notice": "Lets the DAO/owner of the protocol undo a previously implemented emergency stop."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1625,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1628,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2831,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1309,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1429,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17071,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "101",
        "type": "t_uint16"
      },
      {
        "astId": 1790,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_paused",
        "offset": 2,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 1895,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 20553,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "bidId",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 20558,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "bids",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_struct(Bid)20525_storage)"
      },
      {
        "astId": 20563,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "borrowerBids",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 20567,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_lenderVolumeFilled",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20569,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_totalVolumeFilled",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 20572,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "lendingTokensSet",
        "offset": 0,
        "slot": "156",
        "type": "t_struct(AddressSet)12082_storage"
      },
      {
        "astId": 20575,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "marketRegistry",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IMarketRegistry)21724"
      },
      {
        "astId": 20578,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "reputationManager",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IReputationManager)21783"
      },
      {
        "astId": 20583,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_borrowerBidsActive",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_struct(UintSet)12239_storage)"
      },
      {
        "astId": 20587,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "bidDefaultDuration",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 20591,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "bidExpirationTime",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 20597,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "lenderVolumeFilled",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20601,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "totalVolumeFilled",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20603,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "version",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 20607,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "uris",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 20614,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_trustedMarketForwarders",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20619,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_approvedForwarderSenders",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_struct(AddressSet)12082_storage)"
      },
      {
        "astId": 20624,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "lenderCommitmentForwarder",
        "offset": 0,
        "slot": "169",
        "type": "t_address"
      },
      {
        "astId": 20630,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "collateralManager",
        "offset": 0,
        "slot": "170",
        "type": "t_contract(ICollateralManager)21281"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)6317": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ICollateralManager)21281": {
        "encoding": "inplace",
        "label": "contract ICollateralManager",
        "numberOfBytes": "20"
      },
      "t_contract(IMarketRegistry)21724": {
        "encoding": "inplace",
        "label": "contract IMarketRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IReputationManager)21783": {
        "encoding": "inplace",
        "label": "contract IReputationManager",
        "numberOfBytes": "20"
      },
      "t_enum(BidState)20497": {
        "encoding": "inplace",
        "label": "enum BidState",
        "numberOfBytes": "1"
      },
      "t_enum(PaymentType)22590": {
        "encoding": "inplace",
        "label": "enum PaymentType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)12082_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)12082_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)12239_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)12239_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Bid)20525_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)20525_storage"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)12082_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 12081,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)11781_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bid)20525_storage": {
        "encoding": "inplace",
        "label": "struct Bid",
        "members": [
          {
            "astId": 20504,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20506,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20508,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "lender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20510,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "marketplaceId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20512,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_metadataURI",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 20515,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "loanDetails",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(LoanDetails)20542_storage"
          },
          {
            "astId": 20518,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Terms)20549_storage"
          },
          {
            "astId": 20521,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "state",
            "offset": 0,
            "slot": "12",
            "type": "t_enum(BidState)20497"
          },
          {
            "astId": 20524,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "paymentType",
            "offset": 1,
            "slot": "12",
            "type": "t_enum(PaymentType)22590"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(LoanDetails)20542_storage": {
        "encoding": "inplace",
        "label": "struct LoanDetails",
        "members": [
          {
            "astId": 20528,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "lendingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ERC20)6317"
          },
          {
            "astId": 20530,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20533,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "totalRepaid",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Payment)20502_storage"
          },
          {
            "astId": 20535,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 20537,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "acceptedTimestamp",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 20539,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "lastRepaidTimestamp",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 20541,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "loanDuration",
            "offset": 12,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Payment)20502_storage": {
        "encoding": "inplace",
        "label": "struct Payment",
        "members": [
          {
            "astId": 20499,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20501,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)11781_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 11776,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 11780,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)20549_storage": {
        "encoding": "inplace",
        "label": "struct Terms",
        "members": [
          {
            "astId": 20544,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "paymentCycleAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20546,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "paymentCycle",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 20548,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "APR",
            "offset": 4,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)12239_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 12238,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)11781_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}