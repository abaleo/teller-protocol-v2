{
  "address": "0x9065E7b11d8de642676B49e16A37EF0B7D38e489",
  "abi": [
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerExitMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerRevocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderExitMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderRevocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "MarketClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "SetBidExpirationTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "required",
          "type": "bool"
        }
      ],
      "name": "SetMarketBorrowerAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "feePct",
          "type": "uint16"
        }
      ],
      "name": "SetMarketFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "SetMarketFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "required",
          "type": "bool"
        }
      ],
      "name": "SetMarketLenderAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SetMarketOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum V2Calculations.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        }
      ],
      "name": "SetMarketPaymentType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetMarketURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "SetPaymentCycleDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "SetPaymentDefaultDuration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURRENT_CODE_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "attestBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        }
      ],
      "name": "attestBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "attestLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        }
      ],
      "name": "attestLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerAttestationSchemaId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "borrowerExitMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "closeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_bidExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_feePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_requireLenderAttestation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_requireBorrowerAttestation",
          "type": "bool"
        },
        {
          "internalType": "enum V2Calculations.PaymentType",
          "name": "_paymentType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_bidExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_feePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_requireLenderAttestation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_requireBorrowerAttestation",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        }
      ],
      "name": "getAllVerifiedBorrowersForMarket",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        }
      ],
      "name": "getAllVerifiedLendersForMarket",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getBidExpirationTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketAttestationRequirements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "lenderAttestationRequired",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "borrowerAttestationRequired",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "loanExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "marketplaceFeePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "lenderAttestationRequired",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketplaceFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentCycleDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentDefaultDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentType",
      "outputs": [
        {
          "internalType": "enum V2Calculations.PaymentType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TellerAS",
          "name": "_tellerAS",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "isMarketClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPayable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        }
      ],
      "name": "isVerifiedBorrower",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVerified_",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        }
      ],
      "name": "isVerifiedLender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVerified_",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lenderAttestationSchemaId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "lenderExitMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "attestor",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        }
      ],
      "name": "revokeBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "revokeBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "revokeLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        }
      ],
      "name": "revokeLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "setBidExpirationTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_required",
          "type": "bool"
        }
      ],
      "name": "setBorrowerAttestationRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_required",
          "type": "bool"
        }
      ],
      "name": "setLenderAttestationRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_newPercent",
          "type": "uint16"
        }
      ],
      "name": "setMarketFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setMarketFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "enum V2Calculations.PaymentType",
          "name": "_newPaymentType",
          "type": "uint8"
        }
      ],
      "name": "setMarketPaymentType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setMarketURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "setPaymentCycleDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "setPaymentDefaultDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tellerAS",
      "outputs": [
        {
          "internalType": "contract TellerAS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferMarketOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_bidExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_feePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_borrowerAttestationRequired",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_lenderAttestationRequired",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMarketSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x650a2cdb9c1cb690d3256e303ec102a4b02380e3fefb211dd1c8f6d8df4033b2",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x9065E7b11d8de642676B49e16A37EF0B7D38e489",
    "transactionIndex": 2,
    "gasUsed": "2754023",
    "logsBloom": "0x
    "blockHash": "0xf9b2cf6061a3ad171482e8e115ec145f4e492ab41bb90cc9a55acf193d8b2934",
    "transactionHash": "0x650a2cdb9c1cb690d3256e303ec102a4b02380e3fefb211dd1c8f6d8df4033b2",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 34306924,
        "transactionHash": "0x650a2cdb9c1cb690d3256e303ec102a4b02380e3fefb211dd1c8f6d8df4033b2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000afe87013dc96ede1e116a288d80fcaa0effe5fe5",
          "0x000000000000000000000000b95d435df3f8b2a8d8b9c2b7c8766c9ae6ed8cc9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000007a4d9dc40101d44000000000000000000000000000000000000000000000017187d31a2aa0f49f700000000000000000000000000000000000000000000479e03786ad357ee796700000000000000000000000000000000000000000000001710d857c669ff2cb300000000000000000000000000000000000000000000479e0b1d44af97fe96ab",
        "logIndex": 10,
        "blockHash": "0xf9b2cf6061a3ad171482e8e115ec145f4e492ab41bb90cc9a55acf193d8b2934"
      }
    ],
    "blockNumber": 34306924,
    "cumulativeGasUsed": "2951594",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "eb53ccc9bee2317f9717738d5f3526e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerRevocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderRevocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"MarketClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"SetBidExpirationTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"SetMarketBorrowerAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feePct\",\"type\":\"uint16\"}],\"name\":\"SetMarketFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"SetMarketFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"SetMarketLenderAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetMarketOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum V2Calculations.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"name\":\"SetMarketPaymentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetMarketURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"SetPaymentCycleDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"SetPaymentDefaultDuration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURRENT_CODE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"attestBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"attestBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"attestLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"attestLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerAttestationSchemaId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"borrowerExitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"closeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_feePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_requireLenderAttestation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_requireBorrowerAttestation\",\"type\":\"bool\"},{\"internalType\":\"enum V2Calculations.PaymentType\",\"name\":\"_paymentType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_feePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_requireLenderAttestation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_requireBorrowerAttestation\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"}],\"name\":\"getAllVerifiedBorrowersForMarket\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"}],\"name\":\"getAllVerifiedLendersForMarket\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getBidExpirationTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketAttestationRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lenderAttestationRequired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowerAttestationRequired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"marketplaceFeePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"lenderAttestationRequired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketplaceFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPaymentCycleDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPaymentDefaultDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPaymentType\",\"outputs\":[{\"internalType\":\"enum V2Calculations.PaymentType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TellerAS\",\"name\":\"_tellerAS\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"isMarketClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"}],\"name\":\"isVerifiedBorrower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified_\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"}],\"name\":\"isVerifiedLender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified_\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderAttestationSchemaId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"lenderExitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"attestor\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"}],\"name\":\"revokeBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"revokeBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"revokeLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"}],\"name\":\"revokeLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"setBidExpirationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"setBorrowerAttestationRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"setLenderAttestationRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_newPercent\",\"type\":\"uint16\"}],\"name\":\"setMarketFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setMarketFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"enum V2Calculations.PaymentType\",\"name\":\"_newPaymentType\",\"type\":\"uint8\"}],\"name\":\"setMarketPaymentType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setMarketURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"setPaymentCycleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"setPaymentDefaultDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellerAS\",\"outputs\":[{\"internalType\":\"contract TellerAS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferMarketOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_feePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_borrowerAttestationRequired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lenderAttestationRequired\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMarketSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attestBorrower(uint256,address,uint256)\":{\"details\":\"See {_attestStakeholder}.\"},\"attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {_attestStakeholderViaDelegation}.\"},\"attestLender(uint256,address,uint256)\":{\"details\":\"See {_attestStakeholder}.\"},\"attestLender(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {_attestStakeholderViaDelegation}.\"},\"borrowerExitMarket(uint256)\":{\"params\":{\"_marketId\":\"The market ID to leave.\"}},\"closeMarket(uint256)\":{\"params\":{\"_marketId\":\"The market ID for the market to close.\"}},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)\":{\"details\":\"Uses the default EMI payment type.\",\"params\":{\"_bidExpirationTime\":\"Length of time in seconds before pending bids expire.\",\"_initialOwner\":\"Address who will initially own the market.\",\"_paymentCycleDuration\":\"Length of time in seconds before a bid's next payment is required to be made.\",\"_paymentDefaultDuration\":\"Length of time in seconds before a loan is considered in default for non-payment.\",\"_requireBorrowerAttestation\":\"Boolean that indicates if borrowers require attestation to join market.\",\"_requireLenderAttestation\":\"Boolean that indicates if lenders require attestation to join market.\",\"_uri\":\"URI string to get metadata details about the market.\"},\"returns\":{\"marketId_\":\"The market ID of the newly created market.\"}},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,string)\":{\"params\":{\"_bidExpirationTime\":\"Length of time in seconds before pending bids expire.\",\"_initialOwner\":\"Address who will initially own the market.\",\"_paymentCycleDuration\":\"Length of time in seconds before a bid's next payment is required to be made.\",\"_paymentDefaultDuration\":\"Length of time in seconds before a loan is considered in default for non-payment.\",\"_paymentType\":\"The payment type for loans in the market.\",\"_requireBorrowerAttestation\":\"Boolean that indicates if borrowers require attestation to join market.\",\"_requireLenderAttestation\":\"Boolean that indicates if lenders require attestation to join market.\",\"_uri\":\"URI string to get metadata details about the market.\"},\"returns\":{\"marketId_\":\"The market ID of the newly created market.\"}},\"getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)\":{\"params\":{\"_marketId\":\"The ID of the market.\",\"_page\":\"Page index to start from.\",\"_perPage\":\"Number of items in a page to return.\"},\"returns\":{\"_0\":\"Array of addresses that have been added to a market.\"}},\"getAllVerifiedLendersForMarket(uint256,uint256,uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_page\":\"Page index to start from.\",\"_perPage\":\"Number of items in a page to return.\"},\"returns\":{\"_0\":\"Array of addresses that have been added to a market.\"}},\"getMarketAttestationRequirements(uint256)\":{\"params\":{\"_marketId\":\"The ID of the market.\"}},\"getMarketData(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"}},\"getMarketFeeRecipient(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"The address of a market's fee recipient.\"}},\"getMarketOwner(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"The address of a market's owner.\"}},\"getMarketURI(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"URI of a market's metadata.\"}},\"getMarketplaceFee(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"fee\":\"in basis points\"}},\"getPaymentCycleDuration(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"Duration of a loan until it is delinquent.\"}},\"getPaymentDefaultDuration(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"Duration of a loan repayment interval until it is default.\"}},\"getPaymentType(uint256)\":{\"params\":{\"_marketId\":\"the ID of the market.\"},\"returns\":{\"_0\":\"The type of payment for loans in the market.\"}},\"isMarketClosed(uint256)\":{\"params\":{\"_marketId\":\"The market ID for the market to check.\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers\"},\"isVerifiedBorrower(uint256,address)\":{\"params\":{\"_borrowerAddress\":\"Address of the borrower to check.\",\"_marketId\":\"The ID of a market.\"},\"returns\":{\"isVerified_\":\"Boolean indicating if a borrower has been added to a market.\",\"uuid_\":\"Bytes32 representing the UUID of the borrower.\"}},\"isVerifiedLender(uint256,address)\":{\"params\":{\"_lenderAddress\":\"Address to check.\",\"_marketId\":\"The ID of a market.\"},\"returns\":{\"isVerified_\":\"Boolean indicating if a lender has been added to a market.\",\"uuid_\":\"Bytes32 representing the UUID of the lender.\"}},\"lenderExitMarket(uint256)\":{\"params\":{\"_marketId\":\"The market ID to leave.\"}},\"resolve(address,bytes,bytes,uint256,address)\":{\"details\":\"This function must only be called by the `attestLender` function above.\",\"params\":{\"\":\"@param attestor Market owner's address who signed the attestation.\",\"data\":\"Data the must include the market ID and lender's address\",\"recipient\":\"Lender's address who is being attested.\",\"schema\":\"The schema used for the attestation.\"},\"returns\":{\"_0\":\"Boolean indicating the attestation was successful.\"}},\"revokeBorrower(uint256,address)\":{\"details\":\"See {_revokeStakeholder}.\"},\"revokeBorrower(uint256,address,uint8,bytes32,bytes32)\":{\"details\":\"See {_revokeStakeholderViaDelegation}.\"},\"revokeLender(uint256,address)\":{\"details\":\"See {_revokeStakeholder}.\"},\"revokeLender(uint256,address,uint8,bytes32,bytes32)\":{\"details\":\"See {_revokeStakeholderViaDelegation}.\"},\"setBorrowerAttestationRequired(uint256,bool)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_required\":\"Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner.\"}},\"setLenderAttestationRequired(uint256,bool)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_required\":\"Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner.\"}},\"setMarketFeePercent(uint256,uint16)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_newPercent\":\"The percentage fee in basis points. Requirements: - The caller must be the current owner.\"}},\"setMarketFeeRecipient(uint256,address)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_recipient\":\"Address of the new fee recipient. Requirements: - The caller must be the current owner.\"}},\"setMarketPaymentType(uint256,uint8)\":{\"params\":{\"_marketId\":\"The ID of the market.\",\"_newPaymentType\":\"The payment type for the market.\"}},\"setMarketURI(uint256,string)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_uri\":\"A URI that points to a market's metadata. Requirements: - The caller must be the current owner.\"}},\"setPaymentCycleDuration(uint256,uint32)\":{\"params\":{\"_duration\":\"Delinquency duration for new loans\",\"_marketId\":\"The ID of a market.\"}},\"setPaymentDefaultDuration(uint256,uint32)\":{\"params\":{\"_duration\":\"Default duration for new loans\",\"_marketId\":\"The ID of a market.\"}},\"transferMarketOwnership(uint256,address)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_newOwner\":\"Address of the new market owner. Requirements: - The caller must be the current owner.\"}},\"updateMarketSettings(uint256,uint32,uint32,uint32,uint16,bool,bool,string)\":{\"params\":{\"_bidExpirationTime\":\"Duration of time before a bid is considered out of date\",\"_marketId\":\"The ID of a market.\",\"_metadataURI\":\"A URI that points to a market's metadata. Requirements: - The caller must be the current owner.\",\"_paymentCycleDuration\":\"Delinquency duration for new loans\",\"_paymentDefaultDuration\":\"Default duration for new loans\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CURRENT_CODE_VERSION()\":{\"notice\":\"Constant Variables *\"},\"attestBorrower(uint256,address,uint256)\":{\"notice\":\"Adds a borrower to a market.\"},\"attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Adds a borrower to a market via delegated attestation.\"},\"attestLender(uint256,address,uint256)\":{\"notice\":\"Adds a lender to a market.\"},\"attestLender(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Adds a lender to a market via delegated attestation.\"},\"borrowerExitMarket(uint256)\":{\"notice\":\"Allows a borrower to voluntarily leave a market.\"},\"closeMarket(uint256)\":{\"notice\":\"Closes a market so new bids cannot be added.\"},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)\":{\"notice\":\"Creates a new market.\"},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,string)\":{\"notice\":\"Creates a new market.\"},\"getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)\":{\"notice\":\"Gets addresses of all attested borrowers.\"},\"getAllVerifiedLendersForMarket(uint256,uint256,uint256)\":{\"notice\":\"Gets addresses of all attested lenders.\"},\"getMarketAttestationRequirements(uint256)\":{\"notice\":\"Gets the attestation requirements for a given market.\"},\"getMarketData(uint256)\":{\"notice\":\"Gets the data associated with a market.\"},\"getMarketFeeRecipient(uint256)\":{\"notice\":\"Gets the fee recipient of a market.\"},\"getMarketOwner(uint256)\":{\"notice\":\"Gets the address of a market's owner.\"},\"getMarketURI(uint256)\":{\"notice\":\"Gets the metadata URI of a market.\"},\"getMarketplaceFee(uint256)\":{\"notice\":\"Gets the marketplace fee in basis points\"},\"getPaymentCycleDuration(uint256)\":{\"notice\":\"Gets the loan delinquent duration of a market.\"},\"getPaymentDefaultDuration(uint256)\":{\"notice\":\"Gets the loan default duration of a market.\"},\"getPaymentType(uint256)\":{\"notice\":\"Get the payment type of a market.\"},\"isMarketClosed(uint256)\":{\"notice\":\"Returns the status of a market being open or closed for new bids.\"},\"isVerifiedBorrower(uint256,address)\":{\"notice\":\"Checks if a borrower has been attested and added to a market.\"},\"isVerifiedLender(uint256,address)\":{\"notice\":\"Checks if a lender has been attested and added to a market.\"},\"lenderExitMarket(uint256)\":{\"notice\":\"Allows a lender to voluntarily leave a market.\"},\"onUpgrade()\":{\"notice\":\"Sets the new tellerAS on upgrade\"},\"resolve(address,bytes,bytes,uint256,address)\":{\"notice\":\"Verifies an attestation is valid.\"},\"revokeBorrower(uint256,address)\":{\"notice\":\"Removes a borrower from an market.\"},\"revokeBorrower(uint256,address,uint8,bytes32,bytes32)\":{\"notice\":\"Removes a borrower from a market via delegated revocation.\"},\"revokeLender(uint256,address)\":{\"notice\":\"Removes a lender from an market.\"},\"revokeLender(uint256,address,uint8,bytes32,bytes32)\":{\"notice\":\"Removes a borrower from a market via delegated revocation.\"},\"setBorrowerAttestationRequired(uint256,bool)\":{\"notice\":\"Enable/disables market whitelist for borrowers.\"},\"setLenderAttestationRequired(uint256,bool)\":{\"notice\":\"Enable/disables market whitelist for lenders.\"},\"setMarketFeePercent(uint256,uint16)\":{\"notice\":\"Sets the fee for the market.\"},\"setMarketFeeRecipient(uint256,address)\":{\"notice\":\"Sets the fee recipient address for a market.\"},\"setMarketPaymentType(uint256,uint8)\":{\"notice\":\"Set the payment type for the market.\"},\"setMarketURI(uint256,string)\":{\"notice\":\"Sets the metadata URI for a market.\"},\"setPaymentCycleDuration(uint256,uint32)\":{\"notice\":\"Sets the duration of new loans for this market before they turn delinquent.Changing this value does not change the terms of existing loans for this market.\"},\"setPaymentDefaultDuration(uint256,uint32)\":{\"notice\":\"Sets the duration of new loans for this market before they turn defaulted.Changing this value does not change the terms of existing loans for this market.\"},\"transferMarketOwnership(uint256,address)\":{\"notice\":\"Transfers ownership of a marketplace.\"},\"updateMarketSettings(uint256,uint32,uint32,uint32,uint16,bool,bool,string)\":{\"notice\":\"Updates multiple market settings for a given market.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketRegistry.sol\":\"MarketRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/EAS/TellerAS.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../Types.sol\\\";\\nimport \\\"../interfaces/IEAS.sol\\\";\\nimport \\\"../interfaces/IASRegistry.sol\\\";\\n\\n/**\\n * @title TellerAS - Teller Attestation Service - based on EAS - Ethereum Attestation Service\\n */\\ncontract TellerAS is IEAS {\\n    error AccessDenied();\\n    error AlreadyRevoked();\\n    error InvalidAttestation();\\n    error InvalidExpirationTime();\\n    error InvalidOffset();\\n    error InvalidRegistry();\\n    error InvalidSchema();\\n    error InvalidVerifier();\\n    error NotFound();\\n    error NotPayable();\\n\\n    string public constant VERSION = \\\"0.8\\\";\\n\\n    // A terminator used when concatenating and hashing multiple fields.\\n    string private constant HASH_TERMINATOR = \\\"@\\\";\\n\\n    // The AS global registry.\\n    IASRegistry private immutable _asRegistry;\\n\\n    // The EIP712 verifier used to verify signed attestations.\\n    IEASEIP712Verifier private immutable _eip712Verifier;\\n\\n    // A mapping between attestations and their related attestations.\\n    mapping(bytes32 => bytes32[]) private _relatedAttestations;\\n\\n    // A mapping between an account and its received attestations.\\n    mapping(address => mapping(bytes32 => bytes32[]))\\n        private _receivedAttestations;\\n\\n    // A mapping between an account and its sent attestations.\\n    mapping(address => mapping(bytes32 => bytes32[])) private _sentAttestations;\\n\\n    // A mapping between a schema and its attestations.\\n    mapping(bytes32 => bytes32[]) private _schemaAttestations;\\n\\n    // The global mapping between attestations and their UUIDs.\\n    mapping(bytes32 => Attestation) private _db;\\n\\n    // The global counter for the total number of attestations.\\n    uint256 private _attestationsCount;\\n\\n    bytes32 private _lastUUID;\\n\\n    /**\\n     * @dev Creates a new EAS instance.\\n     *\\n     * @param registry The address of the global AS registry.\\n     * @param verifier The address of the EIP712 verifier.\\n     */\\n    constructor(IASRegistry registry, IEASEIP712Verifier verifier) {\\n        if (address(registry) == address(0x0)) {\\n            revert InvalidRegistry();\\n        }\\n\\n        if (address(verifier) == address(0x0)) {\\n            revert InvalidVerifier();\\n        }\\n\\n        _asRegistry = registry;\\n        _eip712Verifier = verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getASRegistry() external view override returns (IASRegistry) {\\n        return _asRegistry;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getEIP712Verifier()\\n        external\\n        view\\n        override\\n        returns (IEASEIP712Verifier)\\n    {\\n        return _eip712Verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestationsCount() external view override returns (uint256) {\\n        return _attestationsCount;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) public payable virtual override returns (bytes32) {\\n        return\\n            _attest(\\n                recipient,\\n                schema,\\n                expirationTime,\\n                refUUID,\\n                data,\\n                msg.sender\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual override returns (bytes32) {\\n        _eip712Verifier.attest(\\n            recipient,\\n            schema,\\n            expirationTime,\\n            refUUID,\\n            data,\\n            attester,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return\\n            _attest(recipient, schema, expirationTime, refUUID, data, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revoke(bytes32 uuid) public virtual override {\\n        return _revoke(uuid, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        _eip712Verifier.revoke(uuid, attester, v, r, s);\\n\\n        _revoke(uuid, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestation(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (Attestation memory)\\n    {\\n        return _db[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationValid(bytes32 uuid)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _db[uuid].uuid != 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationActive(bytes32 uuid)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            isAttestationValid(uuid) &&\\n            _db[uuid].expirationTime >= block.timestamp &&\\n            _db[uuid].revocationTime == 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getReceivedAttestationUUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _receivedAttestations[recipient][schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getReceivedAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _receivedAttestations[recipient][schema].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSentAttestationUUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _sentAttestations[attester][schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSentAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _sentAttestations[recipient][schema].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getRelatedAttestationUUIDs(\\n        bytes32 uuid,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _relatedAttestations[uuid],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getRelatedAttestationUUIDsCount(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _relatedAttestations[uuid].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSchemaAttestationUUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _schemaAttestations[schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSchemaAttestationUUIDsCount(bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _schemaAttestations[schema].length;\\n    }\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function _attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester\\n    ) private returns (bytes32) {\\n        if (expirationTime <= block.timestamp) {\\n            revert InvalidExpirationTime();\\n        }\\n\\n        IASRegistry.ASRecord memory asRecord = _asRegistry.getAS(schema);\\n        if (asRecord.uuid == EMPTY_UUID) {\\n            revert InvalidSchema();\\n        }\\n\\n        IASResolver resolver = asRecord.resolver;\\n        if (address(resolver) != address(0x0)) {\\n            if (msg.value != 0 && !resolver.isPayable()) {\\n                revert NotPayable();\\n            }\\n\\n            if (\\n                !resolver.resolve{ value: msg.value }(\\n                    recipient,\\n                    asRecord.schema,\\n                    data,\\n                    expirationTime,\\n                    attester\\n                )\\n            ) {\\n                revert InvalidAttestation();\\n            }\\n        }\\n\\n        Attestation memory attestation = Attestation({\\n            uuid: EMPTY_UUID,\\n            schema: schema,\\n            recipient: recipient,\\n            attester: attester,\\n            time: block.timestamp,\\n            expirationTime: expirationTime,\\n            revocationTime: 0,\\n            refUUID: refUUID,\\n            data: data\\n        });\\n\\n        _lastUUID = _getUUID(attestation);\\n        attestation.uuid = _lastUUID;\\n\\n        _receivedAttestations[recipient][schema].push(_lastUUID);\\n        _sentAttestations[attester][schema].push(_lastUUID);\\n        _schemaAttestations[schema].push(_lastUUID);\\n\\n        _db[_lastUUID] = attestation;\\n        _attestationsCount++;\\n\\n        if (refUUID != 0) {\\n            if (!isAttestationValid(refUUID)) {\\n                revert NotFound();\\n            }\\n\\n            _relatedAttestations[refUUID].push(_lastUUID);\\n        }\\n\\n        emit Attested(recipient, attester, _lastUUID, schema);\\n\\n        return _lastUUID;\\n    }\\n\\n    function getLastUUID() external view returns (bytes32) {\\n        return _lastUUID;\\n    }\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     */\\n    function _revoke(bytes32 uuid, address attester) private {\\n        Attestation storage attestation = _db[uuid];\\n        if (attestation.uuid == EMPTY_UUID) {\\n            revert NotFound();\\n        }\\n\\n        if (attestation.attester != attester) {\\n            revert AccessDenied();\\n        }\\n\\n        if (attestation.revocationTime != 0) {\\n            revert AlreadyRevoked();\\n        }\\n\\n        attestation.revocationTime = block.timestamp;\\n\\n        emit Revoked(attestation.recipient, attester, uuid, attestation.schema);\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given attestation.\\n     *\\n     * @param attestation The input attestation.\\n     *\\n     * @return Attestation UUID.\\n     */\\n    function _getUUID(Attestation memory attestation)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    attestation.schema,\\n                    attestation.recipient,\\n                    attestation.attester,\\n                    attestation.time,\\n                    attestation.expirationTime,\\n                    attestation.data,\\n                    HASH_TERMINATOR,\\n                    _attestationsCount\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns a slice in an array of attestation UUIDs.\\n     *\\n     * @param uuids The array of attestation UUIDs.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function _sliceUUIDs(\\n        bytes32[] memory uuids,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) private pure returns (bytes32[] memory) {\\n        uint256 attestationsLength = uuids.length;\\n        if (attestationsLength == 0) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (start >= attestationsLength) {\\n            revert InvalidOffset();\\n        }\\n\\n        uint256 len = length;\\n        if (attestationsLength < start + length) {\\n            len = attestationsLength - start;\\n        }\\n\\n        bytes32[] memory res = new bytes32[](len);\\n\\n        for (uint256 i = 0; i < len; ++i) {\\n            res[i] = uuids[\\n                reverseOrder ? attestationsLength - (start + i + 1) : start + i\\n            ];\\n        }\\n\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x01848d2b9b7815144137d3ad654ac3246dd740f03e9e951ecf70374d71f8e354\",\"license\":\"MIT\"},\"contracts/EAS/TellerASResolver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../interfaces/IASResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract TellerASResolver is IASResolver {\\n    error NotPayable();\\n\\n    function isPayable() public pure virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8002d1725fd711dacd001e06d98fe2afc4814d2939d06df70c5b3ffcf5ec7f15\",\"license\":\"MIT\"},\"contracts/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n * @dev This is modified from the OZ library to remove the gap of storage variables at the end.\\n */\\nabstract contract ERC2771ContextUpgradeable is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca6e53699cb6e4001eff7527dc3fcea591be3b04514ab899933fc0f107de4933\",\"license\":\"MIT\"},\"contracts/MarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"./EAS/TellerAS.sol\\\";\\nimport \\\"./EAS/TellerASResolver.sol\\\";\\n\\n//must continue to use this so storage slots are not broken\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\n\\n// Libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { V2Calculations } from \\\"./TellerV2.sol\\\";\\n\\ncontract MarketRegistry is\\n    IMarketRegistry,\\n    Initializable,\\n    Context,\\n    TellerASResolver\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /** Constant Variables **/\\n\\n    uint256 public constant CURRENT_CODE_VERSION = 7;\\n\\n    /* Storage Variables */\\n\\n    struct Marketplace {\\n        address owner;\\n        string metadataURI;\\n        uint16 marketplaceFeePercent; // 10000 is 100%\\n        bool lenderAttestationRequired;\\n        EnumerableSet.AddressSet verifiedLendersForMarket;\\n        mapping(address => bytes32) lenderAttestationIds;\\n        uint32 paymentCycleDuration; //unix time\\n        uint32 paymentDefaultDuration; //unix time\\n        uint32 bidExpirationTime; //unix time\\n        bool borrowerAttestationRequired;\\n        EnumerableSet.AddressSet verifiedBorrowersForMarket;\\n        mapping(address => bytes32) borrowerAttestationIds;\\n        address feeRecipient;\\n        V2Calculations.PaymentType paymentType;\\n    }\\n\\n    bytes32 public lenderAttestationSchemaId;\\n\\n    mapping(uint256 => Marketplace) internal markets;\\n    mapping(bytes32 => uint256) internal __uriToId; //DEPRECATED\\n    uint256 public marketCount;\\n    bytes32 private _attestingSchemaId;\\n    bytes32 public borrowerAttestationSchemaId;\\n\\n    uint256 public version;\\n\\n    mapping(uint256 => bool) private marketIsClosed;\\n\\n    TellerAS public tellerAS;\\n\\n    /* Modifiers */\\n\\n    modifier ownsMarket(uint256 _marketId) {\\n        require(markets[_marketId].owner == _msgSender(), \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier withAttestingSchema(bytes32 schemaId) {\\n        _attestingSchemaId = schemaId;\\n        _;\\n        _attestingSchemaId = bytes32(0);\\n    }\\n\\n    /* Events */\\n\\n    event MarketCreated(address indexed owner, uint256 marketId);\\n    event SetMarketURI(uint256 marketId, string uri);\\n    event SetPaymentCycleDuration(uint256 marketId, uint32 duration);\\n    event SetPaymentDefaultDuration(uint256 marketId, uint32 duration);\\n    event SetBidExpirationTime(uint256 marketId, uint32 duration);\\n    event SetMarketFee(uint256 marketId, uint16 feePct);\\n    event LenderAttestation(uint256 marketId, address lender);\\n    event BorrowerAttestation(uint256 marketId, address borrower);\\n    event LenderRevocation(uint256 marketId, address lender);\\n    event BorrowerRevocation(uint256 marketId, address borrower);\\n    event MarketClosed(uint256 marketId);\\n    event LenderExitMarket(uint256 marketId, address lender);\\n    event BorrowerExitMarket(uint256 marketId, address borrower);\\n    event SetMarketOwner(uint256 marketId, address newOwner);\\n    event SetMarketFeeRecipient(uint256 marketId, address newRecipient);\\n    event SetMarketLenderAttestation(uint256 marketId, bool required);\\n    event SetMarketBorrowerAttestation(uint256 marketId, bool required);\\n    event SetMarketPaymentType(\\n        uint256 marketId,\\n        V2Calculations.PaymentType paymentType\\n    );\\n\\n    /* External Functions */\\n\\n    function initialize(TellerAS _tellerAS) external initializer {\\n        tellerAS = _tellerAS;\\n\\n        lenderAttestationSchemaId = tellerAS.getASRegistry().register(\\n            \\\"(uint256 marketId, address lenderAddress)\\\",\\n            this\\n        );\\n        borrowerAttestationSchemaId = tellerAS.getASRegistry().register(\\n            \\\"(uint256 marketId, address borrowerAddress)\\\",\\n            this\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the new tellerAS on upgrade\\n     */\\n    function onUpgrade() external {\\n        require(\\n            version != CURRENT_CODE_VERSION,\\n            \\\"Contract already upgraded to latest version!\\\"\\n        );\\n        version = CURRENT_CODE_VERSION;\\n    }\\n\\n    /**\\n     * @notice Creates a new market.\\n     * @param _initialOwner Address who will initially own the market.\\n     * @param _paymentCycleDuration Length of time in seconds before a bid's next payment is required to be made.\\n     * @param _paymentDefaultDuration Length of time in seconds before a loan is considered in default for non-payment.\\n     * @param _bidExpirationTime Length of time in seconds before pending bids expire.\\n     * @param _requireLenderAttestation Boolean that indicates if lenders require attestation to join market.\\n     * @param _requireBorrowerAttestation Boolean that indicates if borrowers require attestation to join market.\\n     * @param _paymentType The payment type for loans in the market.\\n     * @param _uri URI string to get metadata details about the market.\\n     * @return marketId_ The market ID of the newly created market.\\n     */\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        V2Calculations.PaymentType _paymentType,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_) {\\n        marketId_ = _createMarket(\\n            _initialOwner,\\n            _paymentCycleDuration,\\n            _paymentDefaultDuration,\\n            _bidExpirationTime,\\n            _feePercent,\\n            _requireLenderAttestation,\\n            _requireBorrowerAttestation,\\n            _paymentType,\\n            _uri\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new market.\\n     * @dev Uses the default EMI payment type.\\n     * @param _initialOwner Address who will initially own the market.\\n     * @param _paymentCycleDuration Length of time in seconds before a bid's next payment is required to be made.\\n     * @param _paymentDefaultDuration Length of time in seconds before a loan is considered in default for non-payment.\\n     * @param _bidExpirationTime Length of time in seconds before pending bids expire.\\n     * @param _requireLenderAttestation Boolean that indicates if lenders require attestation to join market.\\n     * @param _requireBorrowerAttestation Boolean that indicates if borrowers require attestation to join market.\\n     * @param _uri URI string to get metadata details about the market.\\n     * @return marketId_ The market ID of the newly created market.\\n     */\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_) {\\n        marketId_ = _createMarket(\\n            _initialOwner,\\n            _paymentCycleDuration,\\n            _paymentDefaultDuration,\\n            _bidExpirationTime,\\n            _feePercent,\\n            _requireLenderAttestation,\\n            _requireBorrowerAttestation,\\n            V2Calculations.PaymentType.EMI,\\n            _uri\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new market.\\n     * @param _initialOwner Address who will initially own the market.\\n     * @param _paymentCycleDuration Length of time in seconds before a bid's next payment is required to be made.\\n     * @param _paymentDefaultDuration Length of time in seconds before a loan is considered in default for non-payment.\\n     * @param _bidExpirationTime Length of time in seconds before pending bids expire.\\n     * @param _requireLenderAttestation Boolean that indicates if lenders require attestation to join market.\\n     * @param _requireBorrowerAttestation Boolean that indicates if borrowers require attestation to join market.\\n     * @param _paymentType The payment type for loans in the market.\\n     * @param _uri URI string to get metadata details about the market.\\n     * @return marketId_ The market ID of the newly created market.\\n     */\\n    function _createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        V2Calculations.PaymentType _paymentType,\\n        string calldata _uri\\n    ) internal returns (uint256 marketId_) {\\n        require(_initialOwner != address(0), \\\"Invalid owner address\\\");\\n        // Increment market ID counter\\n        marketId_ = ++marketCount;\\n\\n        // Set the market owner\\n        markets[marketId_].owner = _initialOwner;\\n\\n        setMarketURI(marketId_, _uri);\\n        setPaymentCycleDuration(marketId_, _paymentCycleDuration);\\n        setPaymentDefaultDuration(marketId_, _paymentDefaultDuration);\\n        setMarketFeePercent(marketId_, _feePercent);\\n        setBidExpirationTime(marketId_, _bidExpirationTime);\\n        setMarketPaymentType(marketId_, _paymentType);\\n\\n        // Check if market requires lender attestation to join\\n        if (_requireLenderAttestation) {\\n            markets[marketId_].lenderAttestationRequired = true;\\n        }\\n        // Check if market requires borrower attestation to join\\n        if (_requireBorrowerAttestation) {\\n            markets[marketId_].borrowerAttestationRequired = true;\\n        }\\n\\n        emit MarketCreated(_initialOwner, marketId_);\\n    }\\n\\n    /**\\n     * @notice Closes a market so new bids cannot be added.\\n     * @param _marketId The market ID for the market to close.\\n     */\\n\\n    function closeMarket(uint256 _marketId) public ownsMarket(_marketId) {\\n        if (!marketIsClosed[_marketId]) {\\n            marketIsClosed[_marketId] = true;\\n\\n            emit MarketClosed(_marketId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the status of a market being open or closed for new bids.\\n     * @param _marketId The market ID for the market to check.\\n     */\\n    function isMarketClosed(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return marketIsClosed[_marketId];\\n    }\\n\\n    /**\\n     * @notice Adds a lender to a market.\\n     * @dev See {_attestStakeholder}.\\n     */\\n    function attestLender(\\n        uint256 _marketId,\\n        address _lenderAddress,\\n        uint256 _expirationTime\\n    ) external {\\n        _attestStakeholder(_marketId, _lenderAddress, _expirationTime, true);\\n    }\\n\\n    /**\\n     * @notice Adds a lender to a market via delegated attestation.\\n     * @dev See {_attestStakeholderViaDelegation}.\\n     */\\n    function attestLender(\\n        uint256 _marketId,\\n        address _lenderAddress,\\n        uint256 _expirationTime,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _attestStakeholderViaDelegation(\\n            _marketId,\\n            _lenderAddress,\\n            _expirationTime,\\n            true,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes a lender from an market.\\n     * @dev See {_revokeStakeholder}.\\n     */\\n    function revokeLender(uint256 _marketId, address _lenderAddress) external {\\n        _revokeStakeholder(_marketId, _lenderAddress, true);\\n    }\\n\\n    /**\\n     * @notice Removes a borrower from a market via delegated revocation.\\n     * @dev See {_revokeStakeholderViaDelegation}.\\n     */\\n    function revokeLender(\\n        uint256 _marketId,\\n        address _lenderAddress,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _revokeStakeholderViaDelegation(\\n            _marketId,\\n            _lenderAddress,\\n            true,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows a lender to voluntarily leave a market.\\n     * @param _marketId The market ID to leave.\\n     */\\n    function lenderExitMarket(uint256 _marketId) external {\\n        // Remove lender address from market set\\n        bool response = markets[_marketId].verifiedLendersForMarket.remove(\\n            _msgSender()\\n        );\\n        if (response) {\\n            emit LenderExitMarket(_marketId, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a borrower to a market.\\n     * @dev See {_attestStakeholder}.\\n     */\\n    function attestBorrower(\\n        uint256 _marketId,\\n        address _borrowerAddress,\\n        uint256 _expirationTime\\n    ) external {\\n        _attestStakeholder(_marketId, _borrowerAddress, _expirationTime, false);\\n    }\\n\\n    /**\\n     * @notice Adds a borrower to a market via delegated attestation.\\n     * @dev See {_attestStakeholderViaDelegation}.\\n     */\\n    function attestBorrower(\\n        uint256 _marketId,\\n        address _borrowerAddress,\\n        uint256 _expirationTime,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _attestStakeholderViaDelegation(\\n            _marketId,\\n            _borrowerAddress,\\n            _expirationTime,\\n            false,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes a borrower from an market.\\n     * @dev See {_revokeStakeholder}.\\n     */\\n    function revokeBorrower(uint256 _marketId, address _borrowerAddress)\\n        external\\n    {\\n        _revokeStakeholder(_marketId, _borrowerAddress, false);\\n    }\\n\\n    /**\\n     * @notice Removes a borrower from a market via delegated revocation.\\n     * @dev See {_revokeStakeholderViaDelegation}.\\n     */\\n    function revokeBorrower(\\n        uint256 _marketId,\\n        address _borrowerAddress,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _revokeStakeholderViaDelegation(\\n            _marketId,\\n            _borrowerAddress,\\n            false,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows a borrower to voluntarily leave a market.\\n     * @param _marketId The market ID to leave.\\n     */\\n    function borrowerExitMarket(uint256 _marketId) external {\\n        // Remove borrower address from market set\\n        bool response = markets[_marketId].verifiedBorrowersForMarket.remove(\\n            _msgSender()\\n        );\\n        if (response) {\\n            emit BorrowerExitMarket(_marketId, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies an attestation is valid.\\n     * @dev This function must only be called by the `attestLender` function above.\\n     * @param recipient Lender's address who is being attested.\\n     * @param schema The schema used for the attestation.\\n     * @param data Data the must include the market ID and lender's address\\n     * @param\\n     * @param attestor Market owner's address who signed the attestation.\\n     * @return Boolean indicating the attestation was successful.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint256, /* expirationTime */\\n        address attestor\\n    ) external payable override returns (bool) {\\n        bytes32 attestationSchemaId = keccak256(\\n            abi.encodePacked(schema, address(this))\\n        );\\n        (uint256 marketId, address lenderAddress) = abi.decode(\\n            data,\\n            (uint256, address)\\n        );\\n        return\\n            (_attestingSchemaId == attestationSchemaId &&\\n                recipient == lenderAddress &&\\n                attestor == markets[marketId].owner) ||\\n            attestor == address(this);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of a marketplace.\\n     * @param _marketId The ID of a market.\\n     * @param _newOwner Address of the new market owner.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function transferMarketOwnership(uint256 _marketId, address _newOwner)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        markets[_marketId].owner = _newOwner;\\n        emit SetMarketOwner(_marketId, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Updates multiple market settings for a given market.\\n     * @param _marketId The ID of a market.\\n     * @param _paymentCycleDuration Delinquency duration for new loans\\n     * @param _paymentDefaultDuration Default duration for new loans\\n     * @param _bidExpirationTime Duration of time before a bid is considered out of date\\n     * @param _metadataURI A URI that points to a market's metadata.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function updateMarketSettings(\\n        uint256 _marketId,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _borrowerAttestationRequired,\\n        bool _lenderAttestationRequired,\\n        string calldata _metadataURI\\n    ) public ownsMarket(_marketId) {\\n        setMarketURI(_marketId, _metadataURI);\\n        setPaymentCycleDuration(_marketId, _paymentCycleDuration);\\n        setPaymentDefaultDuration(_marketId, _paymentDefaultDuration);\\n        setBidExpirationTime(_marketId, _bidExpirationTime);\\n        setMarketFeePercent(_marketId, _feePercent);\\n        setLenderAttestationRequired(_marketId, _lenderAttestationRequired);\\n        setBorrowerAttestationRequired(_marketId, _borrowerAttestationRequired);\\n    }\\n\\n    /**\\n     * @notice Sets the fee recipient address for a market.\\n     * @param _marketId The ID of a market.\\n     * @param _recipient Address of the new fee recipient.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setMarketFeeRecipient(uint256 _marketId, address _recipient)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        markets[_marketId].feeRecipient = _recipient;\\n        emit SetMarketFeeRecipient(_marketId, _recipient);\\n    }\\n\\n    /**\\n     * @notice Sets the metadata URI for a market.\\n     * @param _marketId The ID of a market.\\n     * @param _uri A URI that points to a market's metadata.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setMarketURI(uint256 _marketId, string calldata _uri)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        //We do string comparison by checking the hashes of the strings against one another\\n        if (\\n            keccak256(abi.encodePacked(_uri)) !=\\n            keccak256(abi.encodePacked(markets[_marketId].metadataURI))\\n        ) {\\n            markets[_marketId].metadataURI = _uri;\\n\\n            emit SetMarketURI(_marketId, _uri);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the duration of new loans for this market before they turn delinquent.\\n     * @notice Changing this value does not change the terms of existing loans for this market.\\n     * @param _marketId The ID of a market.\\n     * @param _duration Delinquency duration for new loans\\n     */\\n    function setPaymentCycleDuration(uint256 _marketId, uint32 _duration)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_duration != markets[_marketId].paymentCycleDuration) {\\n            markets[_marketId].paymentCycleDuration = _duration;\\n\\n            emit SetPaymentCycleDuration(_marketId, _duration);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the duration of new loans for this market before they turn defaulted.\\n     * @notice Changing this value does not change the terms of existing loans for this market.\\n     * @param _marketId The ID of a market.\\n     * @param _duration Default duration for new loans\\n     */\\n    function setPaymentDefaultDuration(uint256 _marketId, uint32 _duration)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_duration != markets[_marketId].paymentDefaultDuration) {\\n            markets[_marketId].paymentDefaultDuration = _duration;\\n\\n            emit SetPaymentDefaultDuration(_marketId, _duration);\\n        }\\n    }\\n\\n    function setBidExpirationTime(uint256 _marketId, uint32 _duration)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_duration != markets[_marketId].bidExpirationTime) {\\n            markets[_marketId].bidExpirationTime = _duration;\\n\\n            emit SetBidExpirationTime(_marketId, _duration);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the fee for the market.\\n     * @param _marketId The ID of a market.\\n     * @param _newPercent The percentage fee in basis points.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setMarketFeePercent(uint256 _marketId, uint16 _newPercent)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        require(_newPercent >= 0 && _newPercent <= 10000, \\\"invalid percent\\\");\\n        if (_newPercent != markets[_marketId].marketplaceFeePercent) {\\n            markets[_marketId].marketplaceFeePercent = _newPercent;\\n            emit SetMarketFee(_marketId, _newPercent);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the payment type for the market.\\n     * @param _marketId The ID of the market.\\n     * @param _newPaymentType The payment type for the market.\\n     */\\n    function setMarketPaymentType(\\n        uint256 _marketId,\\n        V2Calculations.PaymentType _newPaymentType\\n    ) public ownsMarket(_marketId) {\\n        if (_newPaymentType != markets[_marketId].paymentType) {\\n            markets[_marketId].paymentType = _newPaymentType;\\n            emit SetMarketPaymentType(_marketId, _newPaymentType);\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable/disables market whitelist for lenders.\\n     * @param _marketId The ID of a market.\\n     * @param _required Boolean indicating if the market requires whitelist.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setLenderAttestationRequired(uint256 _marketId, bool _required)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_required != markets[_marketId].lenderAttestationRequired) {\\n            markets[_marketId].lenderAttestationRequired = _required;\\n            emit SetMarketLenderAttestation(_marketId, _required);\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable/disables market whitelist for borrowers.\\n     * @param _marketId The ID of a market.\\n     * @param _required Boolean indicating if the market requires whitelist.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setBorrowerAttestationRequired(uint256 _marketId, bool _required)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_required != markets[_marketId].borrowerAttestationRequired) {\\n            markets[_marketId].borrowerAttestationRequired = _required;\\n            emit SetMarketBorrowerAttestation(_marketId, _required);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the data associated with a market.\\n     * @param _marketId The ID of a market.\\n     */\\n    function getMarketData(uint256 _marketId)\\n        public\\n        view\\n        returns (\\n            address owner,\\n            uint32 paymentCycleDuration,\\n            uint32 paymentDefaultDuration,\\n            uint32 loanExpirationTime,\\n            string memory metadataURI,\\n            uint16 marketplaceFeePercent,\\n            bool lenderAttestationRequired\\n        )\\n    {\\n        return (\\n            markets[_marketId].owner,\\n            markets[_marketId].paymentCycleDuration,\\n            markets[_marketId].paymentDefaultDuration,\\n            markets[_marketId].bidExpirationTime,\\n            markets[_marketId].metadataURI,\\n            markets[_marketId].marketplaceFeePercent,\\n            markets[_marketId].lenderAttestationRequired\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the attestation requirements for a given market.\\n     * @param _marketId The ID of the market.\\n     */\\n    function getMarketAttestationRequirements(uint256 _marketId)\\n        public\\n        view\\n        returns (\\n            bool lenderAttestationRequired,\\n            bool borrowerAttestationRequired\\n        )\\n    {\\n        return (\\n            markets[_marketId].lenderAttestationRequired,\\n            markets[_marketId].borrowerAttestationRequired\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the address of a market's owner.\\n     * @param _marketId The ID of a market.\\n     * @return The address of a market's owner.\\n     */\\n    function getMarketOwner(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return markets[_marketId].owner;\\n    }\\n\\n    /**\\n     * @notice Gets the fee recipient of a market.\\n     * @param _marketId The ID of a market.\\n     * @return The address of a market's fee recipient.\\n     */\\n    function getMarketFeeRecipient(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address recipient = markets[_marketId].feeRecipient;\\n\\n        if (recipient == address(0)) {\\n            return markets[_marketId].owner;\\n        }\\n\\n        return recipient;\\n    }\\n\\n    /**\\n     * @notice Gets the metadata URI of a market.\\n     * @param _marketId The ID of a market.\\n     * @return URI of a market's metadata.\\n     */\\n    function getMarketURI(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return markets[_marketId].metadataURI;\\n    }\\n\\n    /**\\n     * @notice Gets the loan delinquent duration of a market.\\n     * @param _marketId The ID of a market.\\n     * @return Duration of a loan until it is delinquent.\\n     */\\n    function getPaymentCycleDuration(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (uint32)\\n    {\\n        return markets[_marketId].paymentCycleDuration;\\n    }\\n\\n    /**\\n     * @notice Gets the loan default duration of a market.\\n     * @param _marketId The ID of a market.\\n     * @return Duration of a loan repayment interval until it is default.\\n     */\\n    function getPaymentDefaultDuration(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (uint32)\\n    {\\n        return markets[_marketId].paymentDefaultDuration;\\n    }\\n\\n    /**\\n     * @notice Get the payment type of a market.\\n     * @param _marketId the ID of the market.\\n     * @return The type of payment for loans in the market.\\n     */\\n    function getPaymentType(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (V2Calculations.PaymentType)\\n    {\\n        return markets[_marketId].paymentType;\\n    }\\n\\n    function getBidExpirationTime(uint256 marketId)\\n        public\\n        view\\n        override\\n        returns (uint32)\\n    {\\n        return markets[marketId].bidExpirationTime;\\n    }\\n\\n    /**\\n     * @notice Gets the marketplace fee in basis points\\n     * @param _marketId The ID of a market.\\n     * @return fee in basis points\\n     */\\n    function getMarketplaceFee(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (uint16 fee)\\n    {\\n        return markets[_marketId].marketplaceFeePercent;\\n    }\\n\\n    /**\\n     * @notice Checks if a lender has been attested and added to a market.\\n     * @param _marketId The ID of a market.\\n     * @param _lenderAddress Address to check.\\n     * @return isVerified_ Boolean indicating if a lender has been added to a market.\\n     * @return uuid_ Bytes32 representing the UUID of the lender.\\n     */\\n    function isVerifiedLender(uint256 _marketId, address _lenderAddress)\\n        public\\n        view\\n        override\\n        returns (bool isVerified_, bytes32 uuid_)\\n    {\\n        return\\n            _isVerified(\\n                _lenderAddress,\\n                markets[_marketId].lenderAttestationRequired,\\n                markets[_marketId].lenderAttestationIds,\\n                markets[_marketId].verifiedLendersForMarket\\n            );\\n    }\\n\\n    /**\\n     * @notice Checks if a borrower has been attested and added to a market.\\n     * @param _marketId The ID of a market.\\n     * @param _borrowerAddress Address of the borrower to check.\\n     * @return isVerified_ Boolean indicating if a borrower has been added to a market.\\n     * @return uuid_ Bytes32 representing the UUID of the borrower.\\n     */\\n    function isVerifiedBorrower(uint256 _marketId, address _borrowerAddress)\\n        public\\n        view\\n        override\\n        returns (bool isVerified_, bytes32 uuid_)\\n    {\\n        return\\n            _isVerified(\\n                _borrowerAddress,\\n                markets[_marketId].borrowerAttestationRequired,\\n                markets[_marketId].borrowerAttestationIds,\\n                markets[_marketId].verifiedBorrowersForMarket\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets addresses of all attested lenders.\\n     * @param _marketId The ID of a market.\\n     * @param _page Page index to start from.\\n     * @param _perPage Number of items in a page to return.\\n     * @return Array of addresses that have been added to a market.\\n     */\\n    function getAllVerifiedLendersForMarket(\\n        uint256 _marketId,\\n        uint256 _page,\\n        uint256 _perPage\\n    ) public view returns (address[] memory) {\\n        EnumerableSet.AddressSet storage set = markets[_marketId]\\n            .verifiedLendersForMarket;\\n\\n        return _getStakeholdersForMarket(set, _page, _perPage);\\n    }\\n\\n    /**\\n     * @notice Gets addresses of all attested borrowers.\\n     * @param _marketId The ID of the market.\\n     * @param _page Page index to start from.\\n     * @param _perPage Number of items in a page to return.\\n     * @return Array of addresses that have been added to a market.\\n     */\\n    function getAllVerifiedBorrowersForMarket(\\n        uint256 _marketId,\\n        uint256 _page,\\n        uint256 _perPage\\n    ) public view returns (address[] memory) {\\n        EnumerableSet.AddressSet storage set = markets[_marketId]\\n            .verifiedBorrowersForMarket;\\n        return _getStakeholdersForMarket(set, _page, _perPage);\\n    }\\n\\n    /**\\n     * @notice Gets addresses of all attested relevant stakeholders.\\n     * @param _set The stored set of stakeholders to index from.\\n     * @param _page Page index to start from.\\n     * @param _perPage Number of items in a page to return.\\n     * @return stakeholders_ Array of addresses that have been added to a market.\\n     */\\n    function _getStakeholdersForMarket(\\n        EnumerableSet.AddressSet storage _set,\\n        uint256 _page,\\n        uint256 _perPage\\n    ) internal view returns (address[] memory stakeholders_) {\\n        uint256 len = _set.length();\\n\\n        uint256 start = _page * _perPage;\\n        if (start <= len) {\\n            uint256 end = start + _perPage;\\n            // Ensure we do not go out of bounds\\n            if (end > len) {\\n                end = len;\\n            }\\n\\n            stakeholders_ = new address[](end - start);\\n            for (uint256 i = start; i < end; i++) {\\n                stakeholders_[i] = _set.at(i);\\n            }\\n        }\\n    }\\n\\n    /* Internal Functions */\\n\\n    /**\\n     * @notice Adds a stakeholder (lender or borrower) to a market.\\n     * @param _marketId The market ID to add a borrower to.\\n     * @param _stakeholderAddress The address of the stakeholder to add to the market.\\n     * @param _expirationTime The expiration time of the attestation.\\n     * @param _expirationTime The expiration time of the attestation.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     */\\n    function _attestStakeholder(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        uint256 _expirationTime,\\n        bool _isLender\\n    )\\n        internal\\n        withAttestingSchema(\\n            _isLender ? lenderAttestationSchemaId : borrowerAttestationSchemaId\\n        )\\n    {\\n        require(\\n            _msgSender() == markets[_marketId].owner,\\n            \\\"Not the market owner\\\"\\n        );\\n\\n        // Submit attestation for borrower to join a market\\n        bytes32 uuid = tellerAS.attest(\\n            _stakeholderAddress,\\n            _attestingSchemaId, // set by the modifier\\n            _expirationTime,\\n            0,\\n            abi.encode(_marketId, _stakeholderAddress)\\n        );\\n        _attestStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            uuid,\\n            _isLender\\n        );\\n    }\\n\\n    /**\\n     * @notice Adds a stakeholder (lender or borrower) to a market via delegated attestation.\\n     * @dev The signature must match that of the market owner.\\n     * @param _marketId The market ID to add a lender to.\\n     * @param _stakeholderAddress The address of the lender to add to the market.\\n     * @param _expirationTime The expiration time of the attestation.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     * @param _v Signature value\\n     * @param _r Signature value\\n     * @param _s Signature value\\n     */\\n    function _attestStakeholderViaDelegation(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        uint256 _expirationTime,\\n        bool _isLender,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    )\\n        internal\\n        withAttestingSchema(\\n            _isLender ? lenderAttestationSchemaId : borrowerAttestationSchemaId\\n        )\\n    {\\n        // NOTE: block scope to prevent stack too deep!\\n        bytes32 uuid;\\n        {\\n            bytes memory data = abi.encode(_marketId, _stakeholderAddress);\\n            address attestor = markets[_marketId].owner;\\n            // Submit attestation for stakeholder to join a market (attestation must be signed by market owner)\\n            uuid = tellerAS.attestByDelegation(\\n                _stakeholderAddress,\\n                _attestingSchemaId, // set by the modifier\\n                _expirationTime,\\n                0,\\n                data,\\n                attestor,\\n                _v,\\n                _r,\\n                _s\\n            );\\n        }\\n        _attestStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            uuid,\\n            _isLender\\n        );\\n    }\\n\\n    /**\\n     * @notice Adds a stakeholder (borrower/lender) to a market.\\n     * @param _marketId The market ID to add a stakeholder to.\\n     * @param _stakeholderAddress The address of the stakeholder to add to the market.\\n     * @param _uuid The UUID of the attestation created.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     */\\n    function _attestStakeholderVerification(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bytes32 _uuid,\\n        bool _isLender\\n    ) internal {\\n        if (_isLender) {\\n            // Store the lender attestation ID for the market ID\\n            markets[_marketId].lenderAttestationIds[\\n                _stakeholderAddress\\n            ] = _uuid;\\n            // Add lender address to market set\\n            markets[_marketId].verifiedLendersForMarket.add(\\n                _stakeholderAddress\\n            );\\n\\n            emit LenderAttestation(_marketId, _stakeholderAddress);\\n        } else {\\n            // Store the lender attestation ID for the market ID\\n            markets[_marketId].borrowerAttestationIds[\\n                _stakeholderAddress\\n            ] = _uuid;\\n            // Add lender address to market set\\n            markets[_marketId].verifiedBorrowersForMarket.add(\\n                _stakeholderAddress\\n            );\\n\\n            emit BorrowerAttestation(_marketId, _stakeholderAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes a stakeholder from an market.\\n     * @dev The caller must be the market owner.\\n     * @param _marketId The market ID to remove the borrower from.\\n     * @param _stakeholderAddress The address of the borrower to remove from the market.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     */\\n    function _revokeStakeholder(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bool _isLender\\n    ) internal {\\n        require(\\n            _msgSender() == markets[_marketId].owner,\\n            \\\"Not the market owner\\\"\\n        );\\n\\n        bytes32 uuid = _revokeStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            _isLender\\n        );\\n        // NOTE: Disabling the call to revoke the attestation on EAS contracts\\n        //        tellerAS.revoke(uuid);\\n    }\\n\\n    /**\\n     * @notice Removes a stakeholder from an market via delegated revocation.\\n     * @param _marketId The market ID to remove the borrower from.\\n     * @param _stakeholderAddress The address of the borrower to remove from the market.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     * @param _v Signature value\\n     * @param _r Signature value\\n     * @param _s Signature value\\n     */\\n    function _revokeStakeholderViaDelegation(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bool _isLender,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal {\\n        bytes32 uuid = _revokeStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            _isLender\\n        );\\n        // NOTE: Disabling the call to revoke the attestation on EAS contracts\\n        //        address attestor = markets[_marketId].owner;\\n        //        tellerAS.revokeByDelegation(uuid, attestor, _v, _r, _s);\\n    }\\n\\n    /**\\n     * @notice Removes a stakeholder (borrower/lender) from a market.\\n     * @param _marketId The market ID to remove the lender from.\\n     * @param _stakeholderAddress The address of the stakeholder to remove from the market.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     * @return uuid_ The ID of the previously verified attestation.\\n     */\\n    function _revokeStakeholderVerification(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bool _isLender\\n    ) internal returns (bytes32 uuid_) {\\n        if (_isLender) {\\n            uuid_ = markets[_marketId].lenderAttestationIds[\\n                _stakeholderAddress\\n            ];\\n            // Remove lender address from market set\\n            markets[_marketId].verifiedLendersForMarket.remove(\\n                _stakeholderAddress\\n            );\\n\\n            emit LenderRevocation(_marketId, _stakeholderAddress);\\n        } else {\\n            uuid_ = markets[_marketId].borrowerAttestationIds[\\n                _stakeholderAddress\\n            ];\\n            // Remove borrower address from market set\\n            markets[_marketId].verifiedBorrowersForMarket.remove(\\n                _stakeholderAddress\\n            );\\n\\n            emit BorrowerRevocation(_marketId, _stakeholderAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a stakeholder has been attested and added to a market.\\n     * @param _stakeholderAddress Address of the stakeholder to check.\\n     * @param _attestationRequired Stored boolean indicating if attestation is required for the stakeholder class.\\n     * @param _stakeholderAttestationIds Mapping of attested Ids for the stakeholder class.\\n     */\\n    function _isVerified(\\n        address _stakeholderAddress,\\n        bool _attestationRequired,\\n        mapping(address => bytes32) storage _stakeholderAttestationIds,\\n        EnumerableSet.AddressSet storage _verifiedStakeholderForMarket\\n    ) internal view returns (bool isVerified_, bytes32 uuid_) {\\n        if (_attestationRequired) {\\n            isVerified_ =\\n                _verifiedStakeholderForMarket.contains(_stakeholderAddress) &&\\n                tellerAS.isAttestationActive(\\n                    _stakeholderAttestationIds[_stakeholderAddress]\\n                );\\n            uuid_ = _stakeholderAttestationIds[_stakeholderAddress];\\n        } else {\\n            isVerified_ = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x729061ef41a56ca7404aa7b3609ef4b26e93ccd09faffd0abb3ddf44442d3fb7\",\"license\":\"MIT\"},\"contracts/ProtocolFee.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract ProtocolFee is OwnableUpgradeable {\\n    // Protocol fee set for loan processing.\\n    uint16 private _protocolFee;\\n\\n    /**\\n     * @notice This event is emitted when the protocol fee has been updated.\\n     * @param newFee The new protocol fee set.\\n     * @param oldFee The previously set protocol fee.\\n     */\\n    event ProtocolFeeSet(uint16 newFee, uint16 oldFee);\\n\\n    /**\\n     * @notice Initialized the protocol fee.\\n     * @param initFee The initial protocol fee to be set on the protocol.\\n     */\\n    function __ProtocolFee_init(uint16 initFee) internal onlyInitializing {\\n        __Ownable_init();\\n        __ProtocolFee_init_unchained(initFee);\\n    }\\n\\n    function __ProtocolFee_init_unchained(uint16 initFee)\\n        internal\\n        onlyInitializing\\n    {\\n        setProtocolFee(initFee);\\n    }\\n\\n    /**\\n     * @notice Returns the current protocol fee.\\n     */\\n    function protocolFee() public view virtual returns (uint16) {\\n        return _protocolFee;\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol to set a new protocol fee.\\n     * @param newFee The new protocol fee to be set.\\n     */\\n    function setProtocolFee(uint16 newFee) public virtual onlyOwner {\\n        // Skip if the fee is the same\\n        if (newFee == _protocolFee) return;\\n\\n        uint16 oldFee = _protocolFee;\\n        _protocolFee = newFee;\\n        emit ProtocolFeeSet(newFee, oldFee);\\n    }\\n}\\n\",\"keccak256\":\"0x8a4fbca87131233a11efc1c5006a9b9d5ea45b82078c85726ce9e07ef13e2893\",\"license\":\"MIT\"},\"contracts/TellerV2.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n// Contracts\\nimport \\\"./ProtocolFee.sol\\\";\\nimport \\\"./TellerV2Storage.sol\\\";\\nimport \\\"./TellerV2Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"./interfaces/ITellerV2.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/NumbersLib.sol\\\";\\n\\n/* Errors */\\n/**\\n * @notice This error is reverted when the action isn't allowed\\n * @param bidId The id of the bid.\\n * @param action The action string (i.e: 'repayLoan', 'cancelBid', 'etc)\\n * @param message The message string to return to the user explaining why the tx was reverted\\n */\\nerror ActionNotAllowed(uint256 bidId, string action, string message);\\n\\n/**\\n * @notice This error is reverted when repayment amount is less than the required minimum\\n * @param bidId The id of the bid the borrower is attempting to repay.\\n * @param payment The payment made by the borrower\\n * @param minimumOwed The minimum owed value\\n */\\nerror PaymentNotMinimum(uint256 bidId, uint256 payment, uint256 minimumOwed);\\n\\ncontract TellerV2 is\\n    ITellerV2,\\n    OwnableUpgradeable,\\n    ProtocolFee,\\n    PausableUpgradeable,\\n    TellerV2Storage,\\n    TellerV2Context\\n{\\n    using Address for address;\\n    using SafeERC20 for ERC20;\\n    using NumbersLib for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /** Events */\\n\\n    /**\\n     * @notice This event is emitted when a new bid is submitted.\\n     * @param bidId The id of the bid submitted.\\n     * @param borrower The address of the bid borrower.\\n     * @param metadataURI URI for additional bid information as part of loan bid.\\n     */\\n    event SubmittedBid(\\n        uint256 indexed bidId,\\n        address indexed borrower,\\n        address receiver,\\n        bytes32 indexed metadataURI\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a bid has been accepted by a lender.\\n     * @param bidId The id of the bid accepted.\\n     * @param lender The address of the accepted bid lender.\\n     */\\n    event AcceptedBid(uint256 indexed bidId, address indexed lender);\\n\\n    /**\\n     * @notice This event is emitted when a previously submitted bid has been cancelled.\\n     * @param bidId The id of the cancelled bid.\\n     */\\n    event CancelledBid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when market owner has cancelled a pending bid in their market.\\n     * @param bidId The id of the bid funded.\\n     *\\n     * Note: The `CancelledBid` event will also be emitted.\\n     */\\n    event MarketOwnerCancelledBid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a payment is made towards an active loan.\\n     * @param bidId The id of the bid/loan to which the payment was made.\\n     */\\n    event LoanRepayment(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a loan has been fully repaid.\\n     * @param bidId The id of the bid/loan which was repaid.\\n     */\\n    event LoanRepaid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a loan has been fully repaid.\\n     * @param bidId The id of the bid/loan which was repaid.\\n     */\\n    event LoanLiquidated(uint256 indexed bidId, address indexed liquidator);\\n\\n    /**\\n     * @notice This event is emitted when a fee has been paid related to a bid.\\n     * @param bidId The id of the bid.\\n     * @param feeType The name of the fee being paid.\\n     * @param amount The amount of the fee being paid.\\n     */\\n    event FeePaid(\\n        uint256 indexed bidId,\\n        string indexed feeType,\\n        uint256 indexed amount\\n    );\\n\\n    /** Modifiers */\\n\\n    /**\\n     * @notice This modifier is used to check if the state of a bid is pending, before running an action.\\n     * @param _bidId The id of the bid to check the state for.\\n     * @param _action The desired action to run on the bid.\\n     */\\n    modifier pendingBid(uint256 _bidId, string memory _action) {\\n        if (bids[_bidId].state != BidState.PENDING) {\\n            revert ActionNotAllowed(_bidId, _action, \\\"Bid must be pending\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice This modifier is used to check if the state of a loan has been accepted, before running an action.\\n     * @param _bidId The id of the bid to check the state for.\\n     * @param _action The desired action to run on the bid.\\n     */\\n    modifier acceptedLoan(uint256 _bidId, string memory _action) {\\n        if (bids[_bidId].state != BidState.ACCEPTED) {\\n            revert ActionNotAllowed(_bidId, _action, \\\"Loan must be accepted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /** Constant Variables **/\\n\\n    uint256 public constant CURRENT_CODE_VERSION = 7;\\n\\n    /** Constructor **/\\n\\n    constructor(address trustedForwarder) TellerV2Context(trustedForwarder) {}\\n\\n    /** External Functions **/\\n\\n    /**\\n     * @notice Initializes the proxy.\\n     * @param _protocolFee The fee collected by the protocol for loan processing.\\n     * @param _lendingTokens The list of tokens allowed as lending assets on the protocol.\\n     */\\n    function initialize(\\n        uint16 _protocolFee,\\n        address _marketRegistry,\\n        address _reputationManager,\\n        address _lenderCommitmentForwarder,\\n        address[] calldata _lendingTokens\\n    ) external initializer {\\n        __ProtocolFee_init(_protocolFee);\\n\\n        __Pausable_init();\\n\\n        lenderCommitmentForwarder = _lenderCommitmentForwarder;\\n        marketRegistry = IMarketRegistry(_marketRegistry);\\n        reputationManager = IReputationManager(_reputationManager);\\n\\n        require(_lendingTokens.length > 0, \\\"No lending tokens specified\\\");\\n        for (uint256 i = 0; i < _lendingTokens.length; i++) {\\n            require(\\n                _lendingTokens[i].isContract(),\\n                \\\"lending token not contract\\\"\\n            );\\n            addLendingToken(_lendingTokens[i]);\\n        }\\n    }\\n\\n    function onUpgrade() external {\\n        require(\\n            version != CURRENT_CODE_VERSION,\\n            \\\"Contract already upgraded to latest version!\\\"\\n        );\\n        version = CURRENT_CODE_VERSION;\\n    }\\n\\n    /**\\n     * @notice Gets the metadataURI for a bidId.\\n     * @param _bidId The id of the bid to return the metadataURI for\\n     * @return metadataURI_ The metadataURI for the bid, as a string.\\n     */\\n    function getMetadataURI(uint256 _bidId)\\n        public\\n        view\\n        returns (string memory metadataURI_)\\n    {\\n        // Check uri mapping first\\n        metadataURI_ = uris[_bidId];\\n        // If the URI is not present in the mapping\\n        if (\\n            keccak256(abi.encodePacked(metadataURI_)) ==\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 // hardcoded constant of keccak256('')\\n        ) {\\n            // Return depreciated bytes32 uri as a string\\n            uint256 convertedURI = uint256(bids[_bidId]._metadataURI);\\n            metadataURI_ = StringsUpgradeable.toHexString(convertedURI, 32);\\n        }\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol to set a new reputation manager contract.\\n     * @param _reputationManager The new contract address.\\n     */\\n    function setReputationManager(address _reputationManager) public onlyOwner {\\n        reputationManager = IReputationManager(_reputationManager);\\n    }\\n\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _marketplaceId The unique id of the marketplace for the bid.\\n     * @param _principal The principal amount of the loan bid.\\n     * @param _duration The recurrent length of time before which a payment is due.\\n     * @param _APR The proposed interest rate for the loan bid.\\n     * @param _metadataURI The URI for additional borrower loan information as part of loan bid.\\n     * @param _receiver The address where the loan amount will be sent to.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver\\n    ) public override whenNotPaused returns (uint256 bidId_) {\\n        address sender = _msgSenderForMarket(_marketplaceId);\\n        (bool isVerified, ) = marketRegistry.isVerifiedBorrower(\\n            _marketplaceId,\\n            sender\\n        );\\n        require(isVerified, \\\"Not verified borrower\\\");\\n        require(\\n            !marketRegistry.isMarketClosed(_marketplaceId),\\n            \\\"Market is closed\\\"\\n        );\\n        require(\\n            lendingTokensSet.contains(_lendingToken),\\n            \\\"Lending token not authorized\\\"\\n        );\\n\\n        // Set response bid ID.\\n        bidId_ = bidId;\\n\\n        // Create and store our bid into the mapping\\n        Bid storage bid = bids[bidId];\\n        bid.borrower = sender;\\n        bid.receiver = _receiver != address(0) ? _receiver : bid.borrower;\\n        bid.marketplaceId = _marketplaceId;\\n        bid.loanDetails.lendingToken = ERC20(_lendingToken);\\n        bid.loanDetails.principal = _principal;\\n        bid.loanDetails.loanDuration = _duration;\\n        bid.loanDetails.timestamp = uint32(block.timestamp);\\n\\n        bid.terms.paymentCycle = marketRegistry.getPaymentCycleDuration(\\n            _marketplaceId\\n        );\\n        bid.terms.APR = _APR;\\n\\n        bidDefaultDuration[bidId] = marketRegistry.getPaymentDefaultDuration(\\n            _marketplaceId\\n        );\\n\\n        bidExpirationTime[bidId] = marketRegistry.getBidExpirationTime(\\n            _marketplaceId\\n        );\\n\\n        bid.paymentType = marketRegistry.getPaymentType(_marketplaceId);\\n\\n        bid.terms.paymentCycleAmount = V2Calculations\\n            .calculatePaymentCycleAmount(\\n                bid.paymentType,\\n                _principal,\\n                _duration,\\n                bid.terms.paymentCycle,\\n                _APR\\n            );\\n\\n        uris[bidId] = _metadataURI;\\n        bid.state = BidState.PENDING;\\n\\n        emit SubmittedBid(\\n            bidId,\\n            bid.borrower,\\n            bid.receiver,\\n            keccak256(abi.encodePacked(_metadataURI))\\n        );\\n\\n        // Store bid inside borrower bids mapping\\n        borrowerBids[bid.borrower].push(bidId);\\n\\n        // Increment bid id counter\\n        bidId++;\\n    }\\n\\n    /**\\n     * @notice Function for a borrower to cancel their pending bid.\\n     * @param _bidId The id of the bid to cancel.\\n     */\\n    function cancelBid(uint256 _bidId) external {\\n        if (\\n            _msgSenderForMarket(bids[_bidId].marketplaceId) !=\\n            bids[_bidId].borrower\\n        ) {\\n            revert ActionNotAllowed({\\n                bidId: _bidId,\\n                action: \\\"cancelBid\\\",\\n                message: \\\"Only the bid owner can cancel!\\\"\\n            });\\n        }\\n        _cancelBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for a market owner to cancel a bid in the market.\\n     * @param _bidId The id of the bid to cancel.\\n     */\\n    function marketOwnerCancelBid(uint256 _bidId) external {\\n        if (\\n            _msgSender() !=\\n            marketRegistry.getMarketOwner(bids[_bidId].marketplaceId)\\n        ) {\\n            revert ActionNotAllowed({\\n                bidId: _bidId,\\n                action: \\\"marketOwnerCancelBid\\\",\\n                message: \\\"Only the market owner can cancel!\\\"\\n            });\\n        }\\n        _cancelBid(_bidId);\\n        emit MarketOwnerCancelledBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for users to cancel a bid.\\n     * @param _bidId The id of the bid to be cancelled.\\n     */\\n    function _cancelBid(uint256 _bidId)\\n        internal\\n        pendingBid(_bidId, \\\"cancelBid\\\")\\n    {\\n        // Set the bid state to CANCELLED\\n        bids[_bidId].state = BidState.CANCELLED;\\n\\n        // Emit CancelledBid event\\n        emit CancelledBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for a lender to accept a proposed loan bid.\\n     * @param _bidId The id of the loan bid to accept.\\n     */\\n    function lenderAcceptBid(uint256 _bidId)\\n        external\\n        override\\n        pendingBid(_bidId, \\\"lenderAcceptBid\\\")\\n        whenNotPaused\\n        returns (\\n            uint256 amountToProtocol,\\n            uint256 amountToMarketplace,\\n            uint256 amountToBorrower\\n        )\\n    {\\n        // Retrieve bid\\n        Bid storage bid = bids[_bidId];\\n\\n        address sender = _msgSenderForMarket(bid.marketplaceId);\\n        (bool isVerified, ) = marketRegistry.isVerifiedLender(\\n            bid.marketplaceId,\\n            sender\\n        );\\n        require(isVerified, \\\"Not verified lender\\\");\\n\\n        require(\\n            !marketRegistry.isMarketClosed(bid.marketplaceId),\\n            \\\"Market is closed\\\"\\n        );\\n\\n        require(!isLoanExpired(_bidId), \\\"Bid has expired\\\");\\n\\n        // Set timestamp\\n        bid.loanDetails.acceptedTimestamp = uint32(block.timestamp);\\n        bid.loanDetails.lastRepaidTimestamp = uint32(block.timestamp);\\n\\n        // Mark borrower's request as accepted\\n        bid.state = BidState.ACCEPTED;\\n\\n        // Declare the bid acceptor as the lender of the bid\\n        bid.lender = sender;\\n\\n        // Transfer funds to borrower from the lender\\n        amountToProtocol = bid.loanDetails.principal.percent(protocolFee());\\n        amountToMarketplace = bid.loanDetails.principal.percent(\\n            marketRegistry.getMarketplaceFee(bid.marketplaceId)\\n        );\\n        amountToBorrower =\\n            bid.loanDetails.principal -\\n            amountToProtocol -\\n            amountToMarketplace;\\n        //transfer fee to protocol\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            bid.lender,\\n            owner(),\\n            amountToProtocol\\n        );\\n\\n        //transfer fee to marketplace\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            bid.lender,\\n            marketRegistry.getMarketFeeRecipient(bid.marketplaceId),\\n            amountToMarketplace\\n        );\\n\\n        //transfer funds to borrower\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            bid.lender,\\n            bid.receiver,\\n            amountToBorrower\\n        );\\n\\n        // Record volume filled by lenders\\n        lenderVolumeFilled[address(bid.loanDetails.lendingToken)][\\n            bid.lender\\n        ] += bid.loanDetails.principal;\\n        totalVolumeFilled[address(bid.loanDetails.lendingToken)] += bid\\n            .loanDetails\\n            .principal;\\n\\n        // Add borrower's active bid\\n        _borrowerBidsActive[bid.borrower].add(_bidId);\\n\\n        // Emit AcceptedBid\\n        emit AcceptedBid(_bidId, bid.lender);\\n\\n        emit FeePaid(_bidId, \\\"protocol\\\", amountToProtocol);\\n        emit FeePaid(_bidId, \\\"marketplace\\\", amountToMarketplace);\\n    }\\n\\n    /**\\n     * @notice Function for users to make the minimum amount due for an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanMinimum(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        (\\n            uint256 owedPrincipal,\\n            uint256 duePrincipal,\\n            uint256 interest\\n        ) = V2Calculations.calculateAmountOwed(bids[_bidId], block.timestamp);\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: duePrincipal, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n    }\\n\\n    /**\\n     * @notice Function for users to repay an active loan in full.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanFull(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bids[_bidId], block.timestamp);\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: owedPrincipal, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n    }\\n\\n    // function that the borrower (ideally) sends to repay the loan\\n    /**\\n     * @notice Function for users to make a payment towards an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _amount The amount of the payment.\\n     */\\n    function repayLoan(uint256 _bidId, uint256 _amount)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        (\\n            uint256 owedPrincipal,\\n            uint256 duePrincipal,\\n            uint256 interest\\n        ) = V2Calculations.calculateAmountOwed(bids[_bidId], block.timestamp);\\n        uint256 minimumOwed = duePrincipal + interest;\\n\\n        // If amount is less than minimumOwed, we revert\\n        if (_amount < minimumOwed) {\\n            revert PaymentNotMinimum(_bidId, _amount, minimumOwed);\\n        }\\n\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: _amount - interest, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol implement an emergency stop mechanism.\\n     */\\n    function pauseProtocol() public virtual onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol undo a previously implemented emergency stop.\\n     */\\n    function unpauseProtocol() public virtual onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    //TODO: add an incentive for liquidator\\n    /**\\n     * @notice Function for users to liquidate a defaulted loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function liquidateLoanFull(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"liquidateLoan\\\")\\n    {\\n        require(isLoanDefaulted(_bidId), \\\"Loan must be defaulted.\\\");\\n\\n        Bid storage bid = bids[_bidId];\\n\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bid, block.timestamp);\\n        _repayLoan(\\n            _bidId,\\n            Payment({ principal: owedPrincipal, interest: interest }),\\n            owedPrincipal + interest\\n        );\\n\\n        bid.state = BidState.LIQUIDATED;\\n\\n        emit LoanLiquidated(_bidId, _msgSenderForMarket(bid.marketplaceId));\\n    }\\n\\n    /**\\n     * @notice Internal function to make a loan payment.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _payment The Payment struct with payments amounts towards principal and interest respectively.\\n     * @param _owedAmount The total amount owed on the loan.\\n     */\\n    function _repayLoan(\\n        uint256 _bidId,\\n        Payment memory _payment,\\n        uint256 _owedAmount\\n    ) internal {\\n        Bid storage bid = bids[_bidId];\\n        uint256 paymentAmount = _payment.principal + _payment.interest;\\n\\n        RepMark mark = reputationManager.updateAccountReputation(\\n            bid.borrower,\\n            _bidId\\n        );\\n\\n        // Check if we are sending a payment or amount remaining\\n        if (paymentAmount >= _owedAmount) {\\n            paymentAmount = _owedAmount;\\n            bid.state = BidState.PAID;\\n\\n            // Remove borrower's active bid\\n            _borrowerBidsActive[bid.borrower].remove(_bidId);\\n\\n            emit LoanRepaid(_bidId);\\n        } else {\\n            emit LoanRepayment(_bidId);\\n        }\\n        // Send payment to the lender\\n        bid.loanDetails.lendingToken.safeTransferFrom(\\n            _msgSenderForMarket(bid.marketplaceId),\\n            bid.lender,\\n            paymentAmount\\n        );\\n\\n        // update our mappings\\n        bid.loanDetails.totalRepaid.principal += _payment.principal;\\n        bid.loanDetails.totalRepaid.interest += _payment.interest;\\n        bid.loanDetails.lastRepaidTimestamp = uint32(block.timestamp);\\n\\n        // If the loan is paid in full and has a mark, we should update the current reputation\\n        if (mark != RepMark.Good) {\\n            reputationManager.updateAccountReputation(bid.borrower, _bidId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount owed for a bid.\\n     * @param _bidId The id of the loan bid to calculate the owed amount for.\\n     */\\n    function calculateAmountOwed(uint256 _bidId)\\n        public\\n        view\\n        returns (Payment memory owed)\\n    {\\n        if (bids[_bidId].state != BidState.ACCEPTED) return owed;\\n\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bids[_bidId], block.timestamp);\\n        owed.principal = owedPrincipal;\\n        owed.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount owed for a loan bid at a specific timestamp.\\n     * @param _bidId The id of the loan bid to calculate the owed amount for.\\n     * @param _timestamp The timestamp at which to calculate the loan owed amount at.\\n     */\\n    function calculateAmountOwed(uint256 _bidId, uint256 _timestamp)\\n        public\\n        view\\n        returns (Payment memory owed)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        if (\\n            bid.state != BidState.ACCEPTED ||\\n            bid.loanDetails.acceptedTimestamp >= _timestamp\\n        ) return owed;\\n\\n        (uint256 owedPrincipal, , uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bid, _timestamp);\\n        owed.principal = owedPrincipal;\\n        owed.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Calculates the minimum payment amount due for a loan.\\n     * @param _bidId The id of the loan bid to get the payment amount for.\\n     */\\n    function calculateAmountDue(uint256 _bidId)\\n        public\\n        view\\n        returns (Payment memory due)\\n    {\\n        if (bids[_bidId].state != BidState.ACCEPTED) return due;\\n\\n        (, uint256 duePrincipal, uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bids[_bidId], block.timestamp);\\n        due.principal = duePrincipal;\\n        due.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Calculates the minimum payment amount due for a loan at a specific timestamp.\\n     * @param _bidId The id of the loan bid to get the payment amount for.\\n     * @param _timestamp The timestamp at which to get the due payment at.\\n     */\\n    function calculateAmountDue(uint256 _bidId, uint256 _timestamp)\\n        public\\n        view\\n        returns (Payment memory due)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        if (\\n            bids[_bidId].state != BidState.ACCEPTED ||\\n            bid.loanDetails.acceptedTimestamp >= _timestamp\\n        ) return due;\\n\\n        (, uint256 duePrincipal, uint256 interest) = V2Calculations\\n            .calculateAmountOwed(bid, _timestamp);\\n        due.principal = duePrincipal;\\n        due.interest = interest;\\n    }\\n\\n    /**\\n     * @notice Returns the next due date for a loan payment.\\n     * @param _bidId The id of the loan bid.\\n     */\\n    function calculateNextDueDate(uint256 _bidId)\\n        public\\n        view\\n        returns (uint32 dueDate_)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        if (bids[_bidId].state != BidState.ACCEPTED) return dueDate_;\\n\\n        // Start with the original due date being 1 payment cycle since bid was accepted\\n        dueDate_ = bid.loanDetails.acceptedTimestamp + bid.terms.paymentCycle;\\n\\n        // Calculate the cycle number the last repayment was made\\n        uint32 delta = lastRepaidTimestamp(_bidId) -\\n            bid.loanDetails.acceptedTimestamp;\\n        if (delta > 0) {\\n            uint32 repaymentCycle = 1 + (delta / bid.terms.paymentCycle);\\n            dueDate_ += (repaymentCycle * bid.terms.paymentCycle);\\n        }\\n\\n        //if we are in the last payment cycle, the next due date is the end of loan duration\\n        if (\\n            dueDate_ >\\n            bid.loanDetails.acceptedTimestamp + bid.loanDetails.loanDuration\\n        ) {\\n            dueDate_ =\\n                bid.loanDetails.acceptedTimestamp +\\n                bid.loanDetails.loanDuration;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isPaymentLate(uint256 _bidId) public view override returns (bool) {\\n        if (bids[_bidId].state != BidState.ACCEPTED) return false;\\n        return uint32(block.timestamp) > calculateNextDueDate(_bidId);\\n    }\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isLoanDefaulted(uint256 _bidId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        Bid storage bid = bids[_bidId];\\n\\n        // Make sure loan cannot be liquidated if it is not active\\n        if (bid.state != BidState.ACCEPTED) return false;\\n\\n        if (bidDefaultDuration[_bidId] == 0) return false;\\n\\n        return (uint32(block.timestamp) - lastRepaidTimestamp(_bidId) >\\n            bidDefaultDuration[_bidId]);\\n    }\\n\\n    function getBidState(uint256 _bidId)\\n        external\\n        view\\n        override\\n        returns (BidState)\\n    {\\n        return bids[_bidId].state;\\n    }\\n\\n    function getBorrowerActiveLoanIds(address _borrower)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _borrowerBidsActive[_borrower].values();\\n    }\\n\\n    function getBorrowerLoanIds(address _borrower)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return borrowerBids[_borrower];\\n    }\\n\\n    /**\\n     * @notice Checks to see if a pending loan has expired so it is no longer able to be accepted.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isLoanExpired(uint256 _bidId) public view returns (bool) {\\n        Bid storage bid = bids[_bidId];\\n\\n        if (bid.state != BidState.PENDING) return false;\\n        if (bidExpirationTime[_bidId] == 0) return false;\\n\\n        return (uint32(block.timestamp) >\\n            bid.loanDetails.timestamp + bidExpirationTime[_bidId]);\\n    }\\n\\n    /**\\n     * @notice Returns the last repaid timestamp for a loan.\\n     * @param _bidId The id of the loan bid to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(uint256 _bidId) public view returns (uint32) {\\n        return V2Calculations.lastRepaidTimestamp(bids[_bidId]);\\n    }\\n\\n    /**\\n     * @notice Returns the list of authorized tokens on the protocol.\\n     */\\n    function getLendingTokens() public view returns (address[] memory) {\\n        return lendingTokensSet.values();\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol add an authorized lending token.\\n     * @param _lendingToken The contract address of the lending token.\\n     */\\n    function addLendingToken(address _lendingToken) public onlyOwner {\\n        require(_lendingToken.isContract(), \\\"Incorrect lending token address\\\");\\n        lendingTokensSet.add(_lendingToken);\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol remove an authorized lending token.\\n     * @param _lendingToken The contract address of the lending token.\\n     */\\n    function removeLendingToken(address _lendingToken) public onlyOwner {\\n        lendingTokensSet.remove(_lendingToken);\\n    }\\n\\n    /**\\n     * @notice Returns the borrower address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the borrower for.\\n     * @return borrower_ The address of the borrower associated with the bid.\\n     */\\n    function getLoanBorrower(uint256 _bidId)\\n        external\\n        view\\n        returns (address borrower_)\\n    {\\n        borrower_ = bids[_bidId].borrower;\\n    }\\n\\n    /**\\n     * @notice Returns the lender address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the lender for.\\n     * @return lender_ The address of the lender associated with the bid.\\n     */\\n    function getLoanLender(uint256 _bidId)\\n        external\\n        view\\n        returns (address lender_)\\n    {\\n        lender_ = bids[_bidId].lender;\\n    }\\n\\n    function getLoanLendingToken(uint256 _bidId)\\n        external\\n        view\\n        returns (address token_)\\n    {\\n        token_ = address(bids[_bidId].loanDetails.lendingToken);\\n    }\\n\\n    /** OpenZeppelin Override Functions **/\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextUpgradeable, ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        sender = ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextUpgradeable, ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n}\\n\\nlibrary V2Calculations {\\n    using NumbersLib for uint256;\\n\\n    enum PaymentType {\\n        EMI,\\n        Bullet\\n    }\\n\\n    /**\\n     * @notice Returns the timestamp of the last payment made for a loan.\\n     * @param _bid The loan bid struct to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(TellerV2.Bid storage _bid)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        return\\n            _bid.loanDetails.lastRepaidTimestamp == 0\\n                ? _bid.loanDetails.acceptedTimestamp\\n                : _bid.loanDetails.lastRepaidTimestamp;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan.\\n     * @param _bid The loan bid struct to get the owed amount for.\\n     * @param _timestamp The timestamp at which to get the owed amount at.\\n     */\\n    function calculateAmountOwed(TellerV2.Bid storage _bid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (\\n            uint256 owedPrincipal_,\\n            uint256 duePrincipal_,\\n            uint256 interest_\\n        )\\n    {\\n        // Total principal left to pay\\n        return\\n            calculateAmountOwed(\\n                _bid.loanDetails.principal,\\n                _bid.loanDetails.totalRepaid.principal,\\n                _bid.terms.APR,\\n                _bid.terms.paymentCycleAmount,\\n                _bid.terms.paymentCycle,\\n                lastRepaidTimestamp(_bid),\\n                _timestamp,\\n                _bid.loanDetails.acceptedTimestamp,\\n                _bid.loanDetails.loanDuration,\\n                _bid.paymentType\\n            );\\n    }\\n\\n    function calculateAmountOwed(\\n        uint256 principal,\\n        uint256 totalRepaidPrincipal,\\n        uint16 _interestRate,\\n        uint256 _paymentCycleAmount,\\n        uint256 _paymentCycle,\\n        uint256 _lastRepaidTimestamp,\\n        uint256 _timestamp,\\n        uint256 _startTimestamp,\\n        uint256 _loanDuration,\\n        PaymentType _paymentType\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 owedPrincipal_,\\n            uint256 duePrincipal_,\\n            uint256 interest_\\n        )\\n    {\\n        owedPrincipal_ = principal - totalRepaidPrincipal;\\n\\n        uint256 interestOwedInAYear = owedPrincipal_.percent(_interestRate);\\n        uint256 owedTime = _timestamp - uint256(_lastRepaidTimestamp);\\n        interest_ = (interestOwedInAYear * owedTime) / 365 days;\\n\\n        // Cast to int265 to avoid underflow errors (negative means loan duration has passed)\\n        int256 durationLeftOnLoan = int256(_loanDuration) -\\n            (int256(_timestamp) - int256(_startTimestamp));\\n        bool isLastPaymentCycle = durationLeftOnLoan < int256(_paymentCycle) || // Check if current payment cycle is within or beyond the last one\\n            owedPrincipal_ + interest_ <= _paymentCycleAmount; // Check if what is left to pay is less than the payment cycle amount\\n\\n        if (_paymentType == PaymentType.Bullet) {\\n            if (isLastPaymentCycle) {\\n                duePrincipal_ = owedPrincipal_;\\n            }\\n        } else {\\n            // Default to PaymentType.EMI\\n            // Max payable amount in a cycle\\n            // NOTE: the last cycle could have less than the calculated payment amount\\n            uint256 maxCycleOwed = isLastPaymentCycle\\n                ? owedPrincipal_ + interest_\\n                : _paymentCycleAmount;\\n\\n            // Calculate accrued amount due since last repayment\\n            uint256 owedAmount = (maxCycleOwed * owedTime) / _paymentCycle;\\n            duePrincipal_ = Math.min(owedAmount - interest_, owedPrincipal_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan for the next payment cycle.\\n     * @param _type The payment type of the loan.\\n     * @param _principal The starting amount that is owed on the loan.\\n     * @param _duration The length of the loan.\\n     * @param _paymentCycle The length of the loan's payment cycle.\\n     * @param _apr The annual percentage rate of the loan.\\n     */\\n    function calculatePaymentCycleAmount(\\n        PaymentType _type,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint32 _paymentCycle,\\n        uint16 _apr\\n    ) internal returns (uint256) {\\n        if (_type == PaymentType.Bullet) {\\n            return\\n                _principal.percent(_apr).percent(\\n                    uint256(_paymentCycle).ratioOf(365 days, 10),\\n                    10\\n                );\\n        }\\n        // Default to PaymentType.EMI\\n        return NumbersLib.pmt(_principal, _duration, _paymentCycle, _apr);\\n    }\\n}\\n\",\"keccak256\":\"0xa11dc825dc887180863e90cbf337e1d76075e5f2242a1e0474f9859bb791e3ed\",\"license\":\"MIT\"},\"contracts/TellerV2Context.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./TellerV2Storage.sol\\\";\\nimport \\\"./ERC2771ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev This contract should not use any storage\\n */\\n\\nabstract contract TellerV2Context is\\n    ERC2771ContextUpgradeable,\\n    TellerV2Storage\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event TrustedMarketForwarderSet(\\n        uint256 indexed marketId,\\n        address forwarder,\\n        address sender\\n    );\\n    event MarketForwarderApproved(\\n        uint256 indexed marketId,\\n        address indexed forwarder,\\n        address sender\\n    );\\n\\n    constructor(address trustedForwarder)\\n        ERC2771ContextUpgradeable(trustedForwarder)\\n    {}\\n\\n    /**\\n     * @notice Checks if an address is a trusted forwarder contract for a given market.\\n     * @param _marketId An ID for a lending market.\\n     * @param _trustedMarketForwarder An address to check if is a trusted forwarder in the given market.\\n     * @return A boolean indicating the forwarder address is trusted in a market.\\n     */\\n    function isTrustedMarketForwarder(\\n        uint256 _marketId,\\n        address _trustedMarketForwarder\\n    ) public view returns (bool) {\\n        return\\n            _trustedMarketForwarders[_marketId] == _trustedMarketForwarder ||\\n            lenderCommitmentForwarder == _trustedMarketForwarder;\\n    }\\n\\n    /**\\n     * @notice Checks if an account has approved a forwarder for a market.\\n     * @param _marketId An ID for a lending market.\\n     * @param _forwarder A forwarder contract address.\\n     * @param _account The address to verify set an approval.\\n     * @return A boolean indicating if an approval was set.\\n     */\\n    function hasApprovedMarketForwarder(\\n        uint256 _marketId,\\n        address _forwarder,\\n        address _account\\n    ) public view returns (bool) {\\n        return\\n            isTrustedMarketForwarder(_marketId, _forwarder) &&\\n            _approvedForwarderSenders[_forwarder].contains(_account);\\n    }\\n\\n    /**\\n     * @notice Sets a trusted forwarder for a lending market.\\n     * @notice The caller must owner the market given. See {MarketRegistry}\\n     * @param _marketId An ID for a lending market.\\n     * @param _forwarder A forwarder contract address.\\n     */\\n    function setTrustedMarketForwarder(uint256 _marketId, address _forwarder)\\n        external\\n    {\\n        require(\\n            marketRegistry.getMarketOwner(_marketId) == _msgSender(),\\n            \\\"Caller must be the market owner\\\"\\n        );\\n        _trustedMarketForwarders[_marketId] = _forwarder;\\n        emit TrustedMarketForwarderSet(_marketId, _forwarder, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Approves a forwarder contract to use their address as a sender for a specific market.\\n     * @notice The forwarder given must be trusted by the market given.\\n     * @param _marketId An ID for a lending market.\\n     * @param _forwarder A forwarder contract address.\\n     */\\n    function approveMarketForwarder(uint256 _marketId, address _forwarder)\\n        external\\n    {\\n        require(\\n            isTrustedMarketForwarder(_marketId, _forwarder),\\n            \\\"Forwarder must be trusted by the market\\\"\\n        );\\n        _approvedForwarderSenders[_forwarder].add(_msgSender());\\n        emit MarketForwarderApproved(_marketId, _forwarder, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Retrieves the function caller address by checking the appended calldata if the _actual_ caller is a trusted forwarder.\\n     * @param _marketId An ID for a lending market.\\n     * @return sender The address to use as the function caller.\\n     */\\n    function _msgSenderForMarket(uint256 _marketId)\\n        internal\\n        view\\n        virtual\\n        returns (address)\\n    {\\n        if (isTrustedMarketForwarder(_marketId, _msgSender())) {\\n            address sender;\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n            // Ensure the appended sender address approved the forwarder\\n            require(\\n                _approvedForwarderSenders[_msgSender()].contains(sender),\\n                \\\"Sender must approve market forwarder\\\"\\n            );\\n            return sender;\\n        }\\n\\n        return _msgSender();\\n    }\\n\\n    /**\\n     * @notice Retrieves the actual function calldata from a trusted forwarder call.\\n     * @param _marketId An ID for a lending market to verify if the caller is a trusted forwarder.\\n     * @return calldata The modified bytes array of the function calldata without the appended sender's address.\\n     */\\n    function _msgDataForMarket(uint256 _marketId)\\n        internal\\n        view\\n        virtual\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedMarketForwarder(_marketId, _msgSender())) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return _msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac04758cc31571352e976d2b33e660d8161176fdf712c76049fb1eda2289f551\",\"license\":\"MIT\"},\"contracts/TellerV2Storage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract TellerV2Storage_G0 {\\n    enum BidState {\\n        NONEXISTENT,\\n        PENDING,\\n        CANCELLED,\\n        ACCEPTED,\\n        PAID,\\n        LIQUIDATED\\n    }\\n\\n    /**\\n     * @notice Represents a total amount for a payment.\\n     * @param principal Amount that counts towards the principal.\\n     * @param interest  Amount that counts toward interest.\\n     */\\n    struct Payment {\\n        uint256 principal;\\n        uint256 interest;\\n    }\\n\\n    /**\\n     * @notice Details about the loan.\\n     * @param lendingToken The token address for the loan.\\n     * @param principal The amount of tokens initially lent out.\\n     * @param totalRepaid Payment struct that represents the total principal and interest amount repaid.\\n     * @param timestamp Timestamp, in seconds, of when the bid was submitted by the borrower.\\n     * @param acceptedTimestamp Timestamp, in seconds, of when the bid was accepted by the lender.\\n     * @param lastRepaidTimestamp Timestamp, in seconds, of when the last payment was made\\n     * @param loanDuration The duration of the loan.\\n     */\\n    struct LoanDetails {\\n        ERC20 lendingToken;\\n        uint256 principal;\\n        Payment totalRepaid;\\n        uint32 timestamp;\\n        uint32 acceptedTimestamp;\\n        uint32 lastRepaidTimestamp;\\n        uint32 loanDuration;\\n    }\\n\\n    /**\\n     * @notice Details about a loan request.\\n     * @param borrower Account address who is requesting a loan.\\n     * @param receiver Account address who will receive the loan amount.\\n     * @param lender Account address who accepted and funded the loan request.\\n     * @param marketplaceId ID of the marketplace the bid was submitted to.\\n     * @param metadataURI ID of off chain metadata to find additional information of the loan request.\\n     * @param loanDetails Struct of the specific loan details.\\n     * @param terms Struct of the loan request terms.\\n     * @param state Represents the current state of the loan.\\n     */\\n    struct Bid {\\n        address borrower;\\n        address receiver;\\n        address lender;\\n        uint256 marketplaceId;\\n        bytes32 _metadataURI; // DEPRECATED\\n        LoanDetails loanDetails;\\n        Terms terms;\\n        BidState state;\\n        V2Calculations.PaymentType paymentType;\\n    }\\n\\n    /**\\n     * @notice Information on the terms of a loan request\\n     * @param paymentCycleAmount Value of tokens expected to be repaid every payment cycle.\\n     * @param paymentCycle Duration, in seconds, of how often a payment must be made.\\n     * @param APR Annual percentage rating to be applied on repayments. (10000 == 100%)\\n     */\\n    struct Terms {\\n        uint256 paymentCycleAmount;\\n        uint32 paymentCycle;\\n        uint16 APR;\\n    }\\n\\n    /** Storage Variables */\\n\\n    // Current number of bids.\\n    uint256 public bidId = 0;\\n\\n    // Mapping of bidId to bid information.\\n    mapping(uint256 => Bid) public bids;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => uint256[]) public borrowerBids;\\n\\n    // Mapping of volume filled by lenders.\\n    mapping(address => uint256) public _lenderVolumeFilled; // DEPRECIATED\\n\\n    // Volume filled by all lenders.\\n    uint256 public _totalVolumeFilled; // DEPRECIATED\\n\\n    // List of allowed lending tokens\\n    EnumerableSet.AddressSet internal lendingTokensSet;\\n\\n    IMarketRegistry public marketRegistry;\\n    IReputationManager public reputationManager;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => EnumerableSet.UintSet) internal _borrowerBidsActive;\\n\\n    mapping(uint256 => uint32) public bidDefaultDuration;\\n    mapping(uint256 => uint32) public bidExpirationTime;\\n\\n    // Mapping of volume filled by lenders.\\n    // Asset address => Lender address => Volume amount\\n    mapping(address => mapping(address => uint256)) public lenderVolumeFilled;\\n\\n    // Volume filled by all lenders.\\n    // Asset address => Volume amount\\n    mapping(address => uint256) public totalVolumeFilled;\\n\\n    uint256 public version;\\n\\n    // Mapping of metadataURIs by bidIds.\\n    // Bid Id => metadataURI string\\n    mapping(uint256 => string) public uris;\\n}\\n\\nabstract contract TellerV2Storage_G1 is TellerV2Storage_G0 {\\n    // market ID => trusted forwarder\\n    mapping(uint256 => address) internal _trustedMarketForwarders;\\n    // trusted forwarder => set of pre-approved senders\\n    mapping(address => EnumerableSet.AddressSet)\\n        internal _approvedForwarderSenders;\\n}\\n\\nabstract contract TellerV2Storage_G2 is TellerV2Storage_G1 {\\n    address public lenderCommitmentForwarder;\\n}\\n\\nabstract contract TellerV2Storage is TellerV2Storage_G2 {}\\n\",\"keccak256\":\"0xe90d95b2baffece17b7cbc293d243bbfb64e5372e022c752aba3bc3460b0e289\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0x2e4bcf4a965f840193af8729251386c1826cd050411ba4a9e85984a2551fd2ff\",\"license\":\"MIT\"},\"contracts/interfaces/IASRegistry.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title The global AS registry interface.\\n */\\ninterface IASRegistry {\\n    /**\\n     * @title A struct representing a record for a submitted AS (Attestation Schema).\\n     */\\n    struct ASRecord {\\n        // A unique identifier of the AS.\\n        bytes32 uuid;\\n        // Optional schema resolver.\\n        IASResolver resolver;\\n        // Auto-incrementing index for reference, assigned by the registry itself.\\n        uint256 index;\\n        // Custom specification of the AS (e.g., an ABI).\\n        bytes schema;\\n    }\\n\\n    /**\\n     * @dev Triggered when a new AS has been registered\\n     *\\n     * @param uuid The AS UUID.\\n     * @param index The AS index.\\n     * @param schema The AS schema.\\n     * @param resolver An optional AS schema resolver.\\n     * @param attester The address of the account used to register the AS.\\n     */\\n    event Registered(\\n        bytes32 indexed uuid,\\n        uint256 indexed index,\\n        bytes schema,\\n        IASResolver resolver,\\n        address attester\\n    );\\n\\n    /**\\n     * @dev Submits and reserve a new AS\\n     *\\n     * @param schema The AS data schema.\\n     * @param resolver An optional AS schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, IASResolver resolver)\\n        external\\n        returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing AS by UUID\\n     *\\n     * @param uuid The UUID of the AS to retrieve.\\n     *\\n     * @return The AS data members.\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getASCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x74752921f592df45c8717d7084627e823b1dbc93bad7187cd3023c9690df7e60\",\"license\":\"MIT\"},\"contracts/interfaces/IASResolver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title The interface of an optional AS resolver.\\n */\\ninterface IASResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The AS data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint256 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xfce671ea099d9f997a69c3447eb4a9c9693d37c5b97e43ada376e614e1c7cb61\",\"license\":\"MIT\"},\"contracts/interfaces/IEAS.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASRegistry.sol\\\";\\nimport \\\"./IEASEIP712Verifier.sol\\\";\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface\\n */\\ninterface IEAS {\\n    /**\\n     * @dev A struct representing a single attestation.\\n     */\\n    struct Attestation {\\n        // A unique identifier of the attestation.\\n        bytes32 uuid;\\n        // A unique identifier of the AS.\\n        bytes32 schema;\\n        // The recipient of the attestation.\\n        address recipient;\\n        // The attester/sender of the attestation.\\n        address attester;\\n        // The time when the attestation was created (Unix timestamp).\\n        uint256 time;\\n        // The time when the attestation expires (Unix timestamp).\\n        uint256 expirationTime;\\n        // The time when the attestation was revoked (Unix timestamp).\\n        uint256 revocationTime;\\n        // The UUID of the related attestation.\\n        bytes32 refUUID;\\n        // Custom attestation data.\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Triggered when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uuid The UUID the revoked attestation.\\n     * @param schema The UUID of the AS.\\n     */\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uuid,\\n        bytes32 indexed schema\\n    );\\n\\n    /**\\n     * @dev Triggered when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param uuid The UUID the revoked attestation.\\n     */\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uuid,\\n        bytes32 indexed schema\\n    );\\n\\n    /**\\n     * @dev Returns the address of the AS global registry.\\n     *\\n     * @return The address of the AS global registry.\\n     */\\n    function getASRegistry() external view returns (IASRegistry);\\n\\n    /**\\n     * @dev Returns the address of the EIP712 verifier used to verify signed attestations.\\n     *\\n     * @return The address of the EIP712 verifier used to verify signed attestations.\\n     */\\n    function getEIP712Verifier() external view returns (IEASEIP712Verifier);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations.\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getAttestationsCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     */\\n    function revoke(bytes32 uuid) external;\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns an existing attestation by UUID.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uuid)\\n        external\\n        view\\n        returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uuid) external view returns (bool);\\n\\n    /**\\n     * @dev Checks whether an attestation is active.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation is active.\\n     */\\n    function isAttestationActive(bytes32 uuid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all received attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getReceivedAttestationUUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of received attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getReceivedAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all sent attestation UUIDs.\\n     *\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getSentAttestationUUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of sent attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getSentAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all attestations related to a specific attestation.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getRelatedAttestationUUIDs(\\n        bytes32 uuid,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of related attestation UUIDs.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The number of related attestations.\\n     */\\n    function getRelatedAttestationUUIDsCount(bytes32 uuid)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all per-schema attestation UUIDs.\\n     *\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getSchemaAttestationUUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of per-schema  attestation UUIDs.\\n     *\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getSchemaAttestationUUIDsCount(bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5db90829269f806ed14a6c638f38d4aac1fa0f85829b34a2fcddd5200261c148\",\"license\":\"MIT\"},\"contracts/interfaces/IEASEIP712Verifier.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title EIP712 typed signatures verifier for EAS delegated attestations interface.\\n */\\ninterface IEASEIP712Verifier {\\n    /**\\n     * @dev Returns the current nonce per-account.\\n     *\\n     * @param account The requested accunt.\\n     *\\n     * @return The current nonce.\\n     */\\n    function getNonce(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Verifies signed attestation.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Verifies signed revocations.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revoke(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeca3ac3bacec52af15b2c86c5bf1a1be315aade51fa86f95da2b426b28486b1e\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { V2Calculations } from \\\"../TellerV2.sol\\\";\\nimport \\\"../EAS/TellerAS.sol\\\";\\n\\ninterface IMarketRegistry {\\n    function initialize(TellerAS tellerAs) external;\\n\\n    function isVerifiedLender(uint256 _marketId, address _lender)\\n        external\\n        returns (bool, bytes32);\\n\\n    function isMarketClosed(uint256 _marketId) external returns (bool);\\n\\n    function isVerifiedBorrower(uint256 _marketId, address _borrower)\\n        external\\n        returns (bool, bytes32);\\n\\n    function getMarketOwner(uint256 _marketId) external returns (address);\\n\\n    function getMarketFeeRecipient(uint256 _marketId)\\n        external\\n        returns (address);\\n\\n    function getMarketURI(uint256 _marketId) external returns (string memory);\\n\\n    function getPaymentCycleDuration(uint256 _marketId)\\n        external\\n        returns (uint32);\\n\\n    function getPaymentDefaultDuration(uint256 _marketId)\\n        external\\n        returns (uint32);\\n\\n    function getBidExpirationTime(uint256 _marketId) external returns (uint32);\\n\\n    function getMarketplaceFee(uint256 _marketId) external returns (uint16);\\n\\n    function getPaymentType(uint256 _marketId)\\n        external\\n        view\\n        returns (V2Calculations.PaymentType);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        V2Calculations.PaymentType _paymentType,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_);\\n}\\n\",\"keccak256\":\"0x736db6a02acd11361751fd6a52fbe6d2d502a091fd28cff43dad2e716adc8819\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RepMark {\\n    Good,\\n    Delinquent,\\n    Default\\n}\\n\\ninterface IReputationManager {\\n    function initialize(address protocolAddress) external;\\n\\n    function getDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getDefaultedLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDefaultLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function updateAccountReputation(address _account) external;\\n\\n    function updateAccountReputation(address _account, uint256 _bidId)\\n        external\\n        returns (RepMark);\\n}\\n\",\"keccak256\":\"0x8d6e50fd460912231e53135b4459aa2f6f16007ae8deb32bc2cee1e88311a8d8\",\"license\":\"MIT\"},\"contracts/interfaces/ITellerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TellerV2Storage.sol\\\";\\n\\ninterface ITellerV2 {\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _marketplaceId The unique id of the marketplace for the bid.\\n     * @param _principal The principal amount of the loan bid.\\n     * @param _duration The recurrent length of time before which a payment is due.\\n     * @param _APR The proposed interest rate for the loan bid.\\n     * @param _metadataURI The URI for additional borrower loan information as part of loan bid.\\n     * @param _receiver The address where the loan amount will be sent to.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint16 _APR,\\n        string calldata _metadataURI,\\n        address _receiver\\n    ) external returns (uint256 bidId_);\\n\\n    /**\\n     * @notice Function for a lender to accept a proposed loan bid.\\n     * @param _bidId The id of the loan bid to accept.\\n     */\\n    function lenderAcceptBid(uint256 _bidId)\\n        external\\n        returns (\\n            uint256 amountToProtocol,\\n            uint256 amountToMarketplace,\\n            uint256 amountToBorrower\\n        );\\n\\n    function calculateAmountDue(uint256 _bidId)\\n        external\\n        view\\n        returns (TellerV2Storage.Payment memory due);\\n\\n    /**\\n     * @notice Function for users to make the minimum amount due for an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanMinimum(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Function for users to repay an active loan in full.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanFull(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Function for users to make a payment towards an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _amount The amount of the payment.\\n     */\\n    function repayLoan(uint256 _bidId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isLoanDefaulted(uint256 _bidId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isPaymentLate(uint256 _bidId) external view returns (bool);\\n\\n    function getBidState(uint256 _bidId)\\n        external\\n        view\\n        returns (TellerV2Storage.BidState);\\n\\n    function getBorrowerActiveLoanIds(address _borrower)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the borrower address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the borrower for.\\n     * @return borrower_ The address of the borrower associated with the bid.\\n     */\\n    function getLoanBorrower(uint256 _bidId)\\n        external\\n        view\\n        returns (address borrower_);\\n\\n    /**\\n     * @notice Returns the lender address for a given bid.\\n     * @param _bidId The id of the bid/loan to get the lender for.\\n     * @return lender_ The address of the lender associated with the bid.\\n     */\\n    function getLoanLender(uint256 _bidId)\\n        external\\n        view\\n        returns (address lender_);\\n\\n    function getLoanLendingToken(uint256 _bidId)\\n        external\\n        view\\n        returns (address token_);\\n}\\n\",\"keccak256\":\"0x0e7acfc01b46406fef9681127c177093053791fc905ae91bc81ab573b325e48c\",\"license\":\"MIT\"},\"contracts/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    using WadRayMath for uint256;\\n\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint16 internal constant PCT_100 = 10000;\\n\\n    function percentFactor(uint256 decimals) internal pure returns (uint256) {\\n        return 100 * (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return percent(self, percentage, 2);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with.\\n     * @param decimals The number of decimals the percentage value is in.\\n     */\\n    function percent(\\n        uint256 self,\\n        uint256 percentage,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (self * percentage) / percentFactor(decimals);\\n    }\\n\\n    /**\\n     * @notice it returns the absolute number of a specified parameter\\n     * @param self the number to be returned in it's absolute\\n     * @return the absolute number\\n     */\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @dev Returned value is type uint16.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return SafeCast.toUint16(ratioOf(num1, num2, 2));\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @param decimals The number of decimals the percentage value is returned in.\\n     * @return Ratio percentage value.\\n     */\\n    function ratioOf(\\n        uint256 num1,\\n        uint256 num2,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        if (num2 == 0) return 0;\\n        return (num1 * percentFactor(decimals)) / num2;\\n    }\\n\\n    /**\\n     * @notice Calculates the payment amount for a cycle duration.\\n     *  The formula is calculated based on the standard Estimated Monthly Installment (https://en.wikipedia.org/wiki/Equated_monthly_installment)\\n     *  EMI = [P x R x (1+R)^N]/[(1+R)^N-1]\\n     * @param principal The starting amount that is owed on the loan.\\n     * @param loanDuration The length of the loan.\\n     * @param cycleDuration The length of the loan's payment cycle.\\n     * @param apr The annual percentage rate of the loan.\\n     */\\n    function pmt(\\n        uint256 principal,\\n        uint32 loanDuration,\\n        uint32 cycleDuration,\\n        uint16 apr\\n    ) internal pure returns (uint256) {\\n        uint256 n = loanDuration / cycleDuration;\\n        if (apr == 0) return (principal / n);\\n\\n        uint256 one = WadRayMath.wad();\\n        uint256 r = WadRayMath.pctToWad(apr).wadMul(cycleDuration).wadDiv(\\n            365 days\\n        );\\n        uint256 exp = (one + r).wadPow(n);\\n        uint256 numerator = principal.wadMul(r).wadMul(exp);\\n        uint256 denominator = exp - one;\\n\\n        return numerator.wadDiv(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0xaaa24541d75b8ae3da2bea8250eabf7b81c33eaeff082d4dce97b647f000e99d\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Multiplier Finance\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n    uint256 internal constant PCT_WAD_RATIO = 1e14;\\n    uint256 internal constant PCT_RAY_RATIO = 1e23;\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function rayToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_RAY_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_RAY_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_WAD_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_WAD_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    function pctToRay(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(RAY).div(1e4);\\n    }\\n\\n    function pctToWad(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(WAD).div(1e4);\\n    }\\n\\n    /**\\n     * @dev calculates base^duration. The code uses the ModExp precompile\\n     * @return z base^duration, in ray\\n     */\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, RAY, rayMul);\\n    }\\n\\n    function wadPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, WAD, wadMul);\\n    }\\n\\n    function _pow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 p,\\n        function(uint256, uint256) internal pure returns (uint256) mul\\n    ) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : p;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = mul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2781319be7a96f56966c601c061849fa94dbf9af5ad80a20c40b879a8d03f14a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130e0806100206000396000f3fe6080604052600436106102b25760003560e01c80637f027a1a11610175578063be99279b116100dc578063d6e794dd11610095578063ec9790821161006f578063ec979082146109ca578063ecd6ce6e146109e0578063f7c0c55514610a00578063f9fa934514610a2057600080fd5b8063d6e794dd14610943578063ddfafef61461098a578063e4050e29146109aa57600080fd5b8063be99279b1461087c578063bfacba3d1461089c578063c4d66de8146108cf578063c995cddc146108ef578063cb90cc311461090f578063ce46e0461461092f57600080fd5b806397eb575b1161012e57806397eb575b146107bc578063aa542fa5146107dc578063ae418095146107fc578063b6b6d77f1461081c578063bc4c34951461083c578063bd536e6e1461085c57600080fd5b80637f027a1a146106ad578063805deb53146106cd5780638b636632146107035780638eff9ea414610723578063947a75b41461078957806394e8e97e1461079c57600080fd5b80633ef19a9b11610219578063583b16ae116101d2578063583b16ae146105f75780636054b175146106175780636441379614610637578063679700d9146106575780637694d2ec1461066d5780637cfc18181461068d57600080fd5b80633ef19a9b1461054c5780633fa7f6881461056c5780634148f94c1461058c578063455154e5146105a1578063532f5694146105c157806354fd4d50146105e157600080fd5b80631cc672df1161026b5780631cc672df1461042d5780631db2b0d91461046d5780631ebc7da81461049a5780632f1be8f9146104ba5780633c0db788146104da5780633d369029146104fe57600080fd5b8063066e7513146102d7578063082fc54d146103135780630a2e98e41461036557806311bed5bb146103ad5780631824a46b146103eb5780631a4808d21461040057600080fd5b366102d257604051631574f9f360e01b815260040160405180910390fd5b005b600080fd5b3480156102e357600080fd5b506102f76102f23660046126d2565b610a40565b6040805192151583526020830191909152015b60405180910390f35b34801561031f57600080fd5b5061035061032e366004612702565b600090815260026020526040902060060154600160401b900463ffffffff1690565b60405163ffffffff909116815260200161030a565b34801561037157600080fd5b5061039a610380366004612702565b6000908152600260208190526040909120015461ffff1690565b60405161ffff909116815260200161030a565b3480156103b957600080fd5b506103506103c8366004612702565b600090815260026020526040902060060154640100000000900463ffffffff1690565b3480156103f757600080fd5b506102d0610a80565b34801561040c57600080fd5b5061042061041b366004612702565b610af2565b60405161030a9190612768565b34801561043957600080fd5b5061045d610448366004612702565b60009081526008602052604090205460ff1690565b604051901515815260200161030a565b34801561047957600080fd5b5061048d61048836600461277b565b610b97565b60405161030a91906127a7565b3480156104a657600080fd5b506102d06104b53660046126d2565b610bc1565b3480156104c657600080fd5b506102d06104d536600461280d565b610c64565b3480156104e657600080fd5b506104f060015481565b60405190815260200161030a565b34801561050a57600080fd5b50610534610519366004612702565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200161030a565b34801561055857600080fd5b506102f76105673660046126d2565b610d34565b34801561057857600080fd5b506102d061058736600461284a565b610d68565b34801561059857600080fd5b506104f0600781565b3480156105ad57600080fd5b506102d06105bc3660046126d2565b610d80565b3480156105cd57600080fd5b506102d06105dc3660046128e6565b610d90565b3480156105ed57600080fd5b506104f060075481565b34801561060357600080fd5b506102d061061236600461284a565b610e8d565b34801561062357600080fd5b506102d0610632366004612932565b610e9d565b34801561064357600080fd5b50610534610652366004612702565b610eb3565b34801561066357600080fd5b506104f060065481565b34801561067957600080fd5b5061048d61068836600461277b565b610ef6565b34801561069957600080fd5b506102d06106a83660046126d2565b610f15565b3480156106b957600080fd5b506102d06106c8366004612702565b610fac565b3480156106d957600080fd5b506103506106e8366004612702565b60009081526002602052604090206006015463ffffffff1690565b34801561070f57600080fd5b506102d061071e3660046126d2565b611018565b34801561072f57600080fd5b5061077261073e366004612702565b6000908152600260208190526040909120908101546006909101546201000090910460ff90811692600160601b9092041690565b60408051921515835290151560208301520161030a565b61045d610797366004612982565b611024565b3480156107a857600080fd5b506102d06107b7366004612a30565b6110d2565b3480156107c857600080fd5b506102d06107d7366004612a55565b61118f565b3480156107e857600080fd5b506102d06107f7366004612a9c565b61119c565b34801561080857600080fd5b506102d0610817366004612702565b611282565b34801561082857600080fd5b506102d0610837366004612ad1565b61131b565b34801561084857600080fd5b506102d0610857366004612932565b611413565b34801561086857600080fd5b506102d061087736600461280d565b611422565b34801561088857600080fd5b506102d0610897366004612a30565b6114ef565b3480156108a857600080fd5b506108bc6108b7366004612702565b6115ae565b60405161030a9796959493929190612af4565b3480156108db57600080fd5b506102d06108ea366004612b53565b6116c0565b3480156108fb57600080fd5b506102d061090a366004612702565b611a10565b34801561091b57600080fd5b506104f061092a366004612b70565b611a5b565b34801561093b57600080fd5b50600061045d565b34801561094f57600080fd5b5061097d61095e366004612702565b6000908152600260205260409020600a0154600160a01b900460ff1690565b60405161030a9190612c7b565b34801561099657600080fd5b50600954610534906001600160a01b031681565b3480156109b657600080fd5b506102d06109c5366004612a55565b611a6f565b3480156109d657600080fd5b506104f060045481565b3480156109ec57600080fd5b506102d06109fb36600461280d565b611a7c565b348015610a0c57600080fd5b506102d0610a1b366004612c89565b611b31565b348015610a2c57600080fd5b506104f0610a3b366004612d41565b611bbc565b600082815260026020526040812060068101548291610a74918591600160601b90910460ff16906009810190600701611bdf565b915091505b9250929050565b600780541415610aec5760405162461bcd60e51b815260206004820152602c60248201527f436f6e747261637420616c726561647920757067726164656420746f206c617460448201526b6573742076657273696f6e2160a01b60648201526084015b60405180910390fd5b60078055565b6000818152600260205260409020600101805460609190610b1290612d79565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e90612d79565b8015610b8b5780601f10610b6057610100808354040283529160200191610b8b565b820191906000526020600020905b815481529060010190602001808311610b6e57829003601f168201915b50505050509050919050565b6000838152600260205260409020606090600301610bb6818585611cb9565b9150505b9392505050565b60008281526002602052604090205482906001600160a01b03163314610bf95760405162461bcd60e51b8152600401610ae390612db4565b600083815260026020908152604091829020600a0180546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ffc7e26c4fffcd77fc52c81b32a6a6b7838b5592ced8c14c1a46e2b4a322c568a91015b60405180910390a1505050565b60008281526002602052604090205482906001600160a01b03163314610c9c5760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602052604090206006015463ffffffff8381166401000000009092041614610d2f57600083815260026020908152604091829020600601805467ffffffff00000000191664010000000063ffffffff8716908102919091179091558251868152918201527f3e49e2efeacab7e8344acd4e7940449bf62039aa3734c34fa6d3525654be81019101610c57565b505050565b60008281526002602081905260408220908101548291610a749185916201000090910460ff16906005810190600301611bdf565b610d788686866001878787611da0565b505050505050565b610d8c82826000611ee5565b5050565b60008381526002602052604090205483906001600160a01b03163314610dc85760405162461bcd60e51b8152600401610ae390612db4565b6000848152600260209081526040918290209151610dea926001019101612ddb565b604051602081830303815290604052805190602001208383604051602001610e13929190612e77565b6040516020818303038152906040528051906020012014610e87576000848152600260205260409020610e4a906001018484612621565b507f6218b53065a32d32b3f52d9ad728c1b826a2aae15fc1ee92f83836debbcc1029848484604051610e7e93929190612e87565b60405180910390a15b50505050565b610d788686866000878787611da0565b610eac85856001868686611f58565b5050505050565b6000818152600260205260408120600a01546001600160a01b031680610ef05750506000908152600260205260409020546001600160a01b031690565b92915050565b6000838152600260205260409020606090600701610bb6818585611cb9565b60008281526002602052604090205482906001600160a01b03163314610f4d5760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ff68f2d4b68e0d54a81a3b8e53403ddec34a1e288cf6a6f6b3621c0a47b6e36f99101610c57565b6000818152600260205260408120610fc79060030133611f6f565b90508015610d8c577f55e867ccc9ac324e2c193ce4ed25397fb890213c704685f2c9fbe5bd7507298682335b604080519283526001600160a01b039091166020830152015b60405180910390a15050565b610d8c82826001611ee5565b60008087873060405160200161103c93929190612ebd565b60408051601f1981840301815291905280516020909101209050600080611065878901896126d2565b915091508260055414801561108b5750806001600160a01b03168b6001600160a01b0316145b80156110b057506000828152600260205260409020546001600160a01b038681169116145b806110c357506001600160a01b03851630145b9b9a5050505050505050505050565b60008281526002602052604090205482906001600160a01b0316331461110a5760405162461bcd60e51b8152600401610ae390612db4565b6000838152600260208190526040909120015462010000900460ff16151582151514610d2f57600083815260026020818152604092839020909101805462ff0000191662010000861515908102919091179091558251868152918201527f4666a8529dea37114f2ecc11706d613f7a59a7967f8467da6877820b83d405a19101610c57565b610d2f8383836001611f84565b60008281526002602052604090205482906001600160a01b031633146111d45760405162461bcd60e51b8152600401610ae390612db4565b6000838152600260205260409020600a0154600160a01b900460ff16600181111561120157611201612c43565b82600181111561121357611213612c43565b14610d2f576000838152600260205260409020600a01805483919060ff60a01b1916600160a01b83600181111561124c5761124c612c43565b02179055507ff81d9cc918f72edfc74e6b61d4e19ef9a739e94a0e9715b108e6af62275142ef8383604051610c57929190612ee3565b60008181526002602052604090205481906001600160a01b031633146112ba5760405162461bcd60e51b8152600401610ae390612db4565b60008281526008602052604090205460ff16610d8c5760008281526008602052604090819020805460ff19166001179055517f9dc30b8eda31a6a144e092e5de600955523a6a925cc15cc1d1b9b4872cfa61559061100c9084815260200190565b60008281526002602052604090205482906001600160a01b031633146113535760405162461bcd60e51b8152600401610ae390612db4565b6127108261ffff16111561139b5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081c195c98d95b9d608a1b6044820152606401610ae3565b6000838152600260208190526040909120015461ffff838116911614610d2f57600083815260026020818152604092839020909101805461ffff191661ffff86169081179091558251868152918201527f9c6f3e426c05d512408d4ecf517e5155756288155088ad45a81c0e111e3d18549101610c57565b610eac85856000868686611f58565b60008281526002602052604090205482906001600160a01b0316331461145a5760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602052604090206006015463ffffffff838116600160401b9092041614610d2f5760008381526002602090815260409182902060060180546bffffffff00000000000000001916600160401b63ffffffff8716908102919091179091558251868152918201527ff0275a50e761f3b1635fa59ce199b1f2268b3fcb7fbdfb18c21aa3d2d78aa7b79101610c57565b60008281526002602052604090205482906001600160a01b031633146115275760405162461bcd60e51b8152600401610ae390612db4565b600083815260026020526040902060060154600160601b900460ff16151582151514610d2f57600083815260026020908152604091829020600601805460ff60601b1916600160601b861515908102919091179091558251868152918201527fc906280af595fe94779bb9a972f24fe4e0ed7f76bebb4ee0eb9a5f30d6dd4c879101610c57565b60008181526002602081905260408220805460068201549282015460019092018054859485948594606094869485946001600160a01b039093169363ffffffff808516946401000000008104821694600160401b90910490911692909161ffff8116916201000090910460ff1690839061162790612d79565b80601f016020809104026020016040519081016040528092919081815260200182805461165390612d79565b80156116a05780601f10611675576101008083540402835291602001916116a0565b820191906000526020600020905b81548152906001019060200180831161168357829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b600054610100900460ff166116db5760005460ff16156116df565b303b155b6117425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ae3565b600054610100900460ff16158015611764576000805461ffff19166101011790555b600980546001600160a01b0319166001600160a01b038416908117909155604080516381fa6cd360e01b815290516381fa6cd391600480820192602092909190829003018186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190612ef7565b6040805163a99e7e2960e01b81526004810191909152602960448201527f2875696e74323536206d61726b657449642c2061646472657373206c656e646560648201526872416464726573732960b81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190612f14565b600155600954604080516381fa6cd360e01b815290516001600160a01b03909216916381fa6cd391600480820192602092909190829003018186803b1580156118fb57600080fd5b505afa15801561190f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119339190612ef7565b6040805163a99e7e2960e01b81526004810191909152602b60448201527f2875696e74323536206d61726b657449642c206164647265737320626f72726f60648201526a776572416464726573732960a81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b1580156119c057600080fd5b505af11580156119d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f89190612f14565b6006558015610d8c576000805461ff00191690555050565b6000818152600260205260408120611a2b9060070133611f6f565b90508015610d8c577f914ccbaf2f5c9c2f4b7c6be3497b6b2ceb6ce2d050aec6eb2e0e31b8f9f67f0c8233610ff3565b60006110c38b8b8b8b8b8b8b8b8b8b6120e1565b610d2f8383836000611f84565b60008281526002602052604090205482906001600160a01b03163314611ab45760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602052604090206006015463ffffffff838116911614610d2f57600083815260026020908152604091829020600601805463ffffffff191663ffffffff86169081179091558251868152918201527fa04499c227e7a6de804e5a57e4b38990792373bd8d73b6c13ab76e40600748439101610c57565b60008981526002602052604090205489906001600160a01b03163314611b695760405162461bcd60e51b8152600401610ae390612db4565b611b748a8484610d90565b611b7e8a8a611a7c565b611b888a89610c64565b611b928a88611422565b611b9c8a8761131b565b611ba68a856110d2565b611bb08a866114ef565b50505050505050505050565b6000611bd18a8a8a8a8a8a8a60008b8b6120e1565b9a9950505050505050505050565b6000808415611cab57611bf2838761224d565b8015611c8857506009546001600160a01b03878116600090815260208790526040908190205490516330cd251f60e21b8152600481019190915291169063c334947c9060240160206040518083038186803b158015611c5057600080fd5b505afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c889190612f2d565b6001600160a01b0387166000908152602086905260409020549092509050611cb0565b600191505b94509492505050565b60606000611cc68561226f565b90506000611cd48486612f60565b9050818111611d97576000611ce98583612f7f565b905082811115611cf65750815b611d008282612f97565b67ffffffffffffffff811115611d1857611d18612fae565b604051908082528060200260200182016040528015611d41578160200160208202803683370190505b509350815b81811015611d9457611d588882612279565b858281518110611d6a57611d6a612fc4565b6001600160a01b039092166020928302919091019091015280611d8c81612fda565b915050611d46565b50505b50509392505050565b83611dad57600654611db1565b6001545b806005819055506000808989604051602001611de09291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405290506000600260008c815260200190815260200160002060000160009054906101000a90046001600160a01b03169050600960009054906101000a90046001600160a01b03166001600160a01b031663930ed0138b6005548c600087878e8e8e6040518a63ffffffff1660e01b8152600401611e7399989796959493929190612ff5565b602060405180830381600087803b158015611e8d57600080fd5b505af1158015611ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec59190612f14565b92505050611ed589898389612285565b5050600060055550505050505050565b6000838152600260205260409020546001600160a01b0316336001600160a01b031614611f4b5760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610ae3565b6000610eac848484612387565b6000611f65878787612387565b5050505050505050565b6000610bba836001600160a01b038416612497565b80611f9157600654611f95565b6001545b60058190556000858152600260205260409020546001600160a01b0316336001600160a01b0316146120005760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610ae3565b6009546005546040516000926001600160a01b0316916309a954cd9188919088908690612045908d9086906020019182526001600160a01b0316602082015260400190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401612074959493929190613056565b602060405180830381600087803b15801561208e57600080fd5b505af11580156120a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c69190612f14565b90506120d486868386612285565b5050600060055550505050565b60006001600160a01b038b166121315760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b6044820152606401610ae3565b60046000815461214090612fda565b9182905550600081815260026020526040902080546001600160a01b0319166001600160a01b038e161790559050612179818484610d90565b612183818b611a7c565b61218d818a610c64565b612197818861131b565b6121a18189611422565b6121ab818561119c565b85156121d357600081815260026020819052604090912001805462ff00001916620100001790555b84156121fc576000818152600260205260409020600601805460ff60601b1916600160601b1790555b8a6001600160a01b03167fa69fa77c6a90b171cf4e3d9a9dd6c4e56fbd1fbbdcf3925eaf600ccaa917feab8260405161223791815260200190565b60405180910390a29a9950505050505050505050565b6001600160a01b03811660009081526001830160205260408120541515610bba565b6000610ef0825490565b6000610bba838361258a565b801561230d5760008481526002602081815260408084206001600160a01b038816855260058101835290842086905592879052526122c690600301846125b4565b50604080518581526001600160a01b03851660208201527f75675690de0899b0b869d83b44b2d926ac594426b2a0286c478ecdf815cbd33e910160405180910390a1610e87565b60008481526002602081815260408084206001600160a01b0388168552600981018352908420869055928790525261234890600701846125b4565b50604080518581526001600160a01b03851660208201527f0c2cfc7e7a16ebee66e77fb314f4bfdb5505e33e77d41c0c60604efc70fd926b9101610e7e565b60008115612412575060008381526002602081815260408084206001600160a01b038716855260058101835290842054938790529190526123cb9060030184611f6f565b50604080518581526001600160a01b03851660208201527f6e7c30dc58d3daa1458c79b66ca464f5f3d8a23d9e50eb14daf1cb0923bf2900910160405180910390a1610bba565b5060008381526002602081815260408084206001600160a01b0387168552600981018352908420549387905291905261244e9060070184611f6f565b50604080518581526001600160a01b03851660208201527fe76a3e8b220b622b9fc2a655ab867687a93f195809eb3639f422e60936ff7eb4910160405180910390a19392505050565b600081815260018301602052604081205480156125805760006124bb600183612f97565b85549091506000906124cf90600190612f97565b90508181146125345760008660000182815481106124ef576124ef612fc4565b906000526020600020015490508087600001848154811061251257612512612fc4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061254557612545613094565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ef0565b6000915050610ef0565b60008260000182815481106125a1576125a1612fc4565b9060005260206000200154905092915050565b6000610bba836001600160a01b03841660006125e3838360009081526001919091016020526040902054151590565b61261957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ef0565b506000610ef0565b82805461262d90612d79565b90600052602060002090601f01602090048101928261264f5760008555612695565b82601f106126685782800160ff19823516178555612695565b82800160010185558215612695579182015b8281111561269557823582559160200191906001019061267a565b506126a19291506126a5565b5090565b5b808211156126a157600081556001016126a6565b6001600160a01b03811681146126cf57600080fd5b50565b600080604083850312156126e557600080fd5b8235915060208301356126f7816126ba565b809150509250929050565b60006020828403121561271457600080fd5b5035919050565b6000815180845260005b8181101561274157602081850181015186830182015201612725565b81811115612753576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610bba602083018461271b565b60008060006060848603121561279057600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156127e85783516001600160a01b0316835292840192918401916001016127c3565b50909695505050505050565b803563ffffffff8116811461280857600080fd5b919050565b6000806040838503121561282057600080fd5b82359150612830602084016127f4565b90509250929050565b803560ff8116811461280857600080fd5b60008060008060008060c0878903121561286357600080fd5b863595506020870135612875816126ba565b94506040870135935061288a60608801612839565b92506080870135915060a087013590509295509295509295565b60008083601f8401126128b657600080fd5b50813567ffffffffffffffff8111156128ce57600080fd5b602083019150836020828501011115610a7957600080fd5b6000806000604084860312156128fb57600080fd5b83359250602084013567ffffffffffffffff81111561291957600080fd5b612925868287016128a4565b9497909650939450505050565b600080600080600060a0868803121561294a57600080fd5b85359450602086013561295c816126ba565b935061296a60408701612839565b94979396509394606081013594506080013592915050565b600080600080600080600060a0888a03121561299d57600080fd5b87356129a8816126ba565b9650602088013567ffffffffffffffff808211156129c557600080fd5b6129d18b838c016128a4565b909850965060408a01359150808211156129ea57600080fd5b506129f78a828b016128a4565b909550935050606088013591506080880135612a12816126ba565b8091505092959891949750929550565b80151581146126cf57600080fd5b60008060408385031215612a4357600080fd5b8235915060208301356126f781612a22565b600080600060608486031215612a6a57600080fd5b833592506020840135612a7c816126ba565b929592945050506040919091013590565b80356002811061280857600080fd5b60008060408385031215612aaf57600080fd5b8235915061283060208401612a8d565b803561ffff8116811461280857600080fd5b60008060408385031215612ae457600080fd5b8235915061283060208401612abf565b6001600160a01b038816815263ffffffff878116602083015286811660408301528516606082015260e060808201819052600090612b349083018661271b565b61ffff9490941660a08301525090151560c09091015295945050505050565b600060208284031215612b6557600080fd5b8135610bba816126ba565b6000806000806000806000806000806101208b8d031215612b9057600080fd5b8a35612b9b816126ba565b9950612ba960208c016127f4565b9850612bb760408c016127f4565b9750612bc560608c016127f4565b9650612bd360808c01612abf565b955060a08b0135612be381612a22565b945060c08b0135612bf381612a22565b9350612c0160e08c01612a8d565b92506101008b013567ffffffffffffffff811115612c1e57600080fd5b612c2a8d828e016128a4565b915080935050809150509295989b9194979a5092959850565b634e487b7160e01b600052602160045260246000fd5b60028110612c7757634e487b7160e01b600052602160045260246000fd5b9052565b60208101610ef08284612c59565b60008060008060008060008060006101008a8c031215612ca857600080fd5b89359850612cb860208b016127f4565b9750612cc660408b016127f4565b9650612cd460608b016127f4565b9550612ce260808b01612abf565b945060a08a0135612cf281612a22565b935060c08a0135612d0281612a22565b925060e08a013567ffffffffffffffff811115612d1e57600080fd5b612d2a8c828d016128a4565b915080935050809150509295985092959850929598565b60008060008060008060008060006101008a8c031215612d6057600080fd5b8935612d6b816126ba565b9850612cb860208b016127f4565b600181811c90821680612d8d57607f821691505b60208210811415612dae57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b600080835481600182811c915080831680612df757607f831692505b6020808410821415612e1757634e487b7160e01b86526022600452602486fd5b818015612e2b5760018114612e3c57612e69565b60ff19861689528489019650612e69565b60008a81526020902060005b86811015612e615781548b820152908501908301612e48565b505084890196505b509498975050505050505050565b8183823760009101908152919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b82815260408101610bba6020830184612c59565b600060208284031215612f0957600080fd5b8151610bba816126ba565b600060208284031215612f2657600080fd5b5051919050565b600060208284031215612f3f57600080fd5b8151610bba81612a22565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f7a57612f7a612f4a565b500290565b60008219821115612f9257612f92612f4a565b500190565b600082821015612fa957612fa9612f4a565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415612fee57612fee612f4a565b5060010190565b600061012060018060a01b03808d1684528b60208501528a604085015289606085015281608085015261302a8285018a61271b565b971660a0840152505060ff9390931660c084015260e08301919091526101009091015295945050505050565b60018060a01b038616815284602082015283604082015282606082015260a06080820152600061308960a083018461271b565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b65e3373da0873a69f39e865651ec7693cbbf3d0b466fd1dbf55c07099a32a3264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102b25760003560e01c80637f027a1a11610175578063be99279b116100dc578063d6e794dd11610095578063ec9790821161006f578063ec979082146109ca578063ecd6ce6e146109e0578063f7c0c55514610a00578063f9fa934514610a2057600080fd5b8063d6e794dd14610943578063ddfafef61461098a578063e4050e29146109aa57600080fd5b8063be99279b1461087c578063bfacba3d1461089c578063c4d66de8146108cf578063c995cddc146108ef578063cb90cc311461090f578063ce46e0461461092f57600080fd5b806397eb575b1161012e57806397eb575b146107bc578063aa542fa5146107dc578063ae418095146107fc578063b6b6d77f1461081c578063bc4c34951461083c578063bd536e6e1461085c57600080fd5b80637f027a1a146106ad578063805deb53146106cd5780638b636632146107035780638eff9ea414610723578063947a75b41461078957806394e8e97e1461079c57600080fd5b80633ef19a9b11610219578063583b16ae116101d2578063583b16ae146105f75780636054b175146106175780636441379614610637578063679700d9146106575780637694d2ec1461066d5780637cfc18181461068d57600080fd5b80633ef19a9b1461054c5780633fa7f6881461056c5780634148f94c1461058c578063455154e5146105a1578063532f5694146105c157806354fd4d50146105e157600080fd5b80631cc672df1161026b5780631cc672df1461042d5780631db2b0d91461046d5780631ebc7da81461049a5780632f1be8f9146104ba5780633c0db788146104da5780633d369029146104fe57600080fd5b8063066e7513146102d7578063082fc54d146103135780630a2e98e41461036557806311bed5bb146103ad5780631824a46b146103eb5780631a4808d21461040057600080fd5b366102d257604051631574f9f360e01b815260040160405180910390fd5b005b600080fd5b3480156102e357600080fd5b506102f76102f23660046126d2565b610a40565b6040805192151583526020830191909152015b60405180910390f35b34801561031f57600080fd5b5061035061032e366004612702565b600090815260026020526040902060060154600160401b900463ffffffff1690565b60405163ffffffff909116815260200161030a565b34801561037157600080fd5b5061039a610380366004612702565b6000908152600260208190526040909120015461ffff1690565b60405161ffff909116815260200161030a565b3480156103b957600080fd5b506103506103c8366004612702565b600090815260026020526040902060060154640100000000900463ffffffff1690565b3480156103f757600080fd5b506102d0610a80565b34801561040c57600080fd5b5061042061041b366004612702565b610af2565b60405161030a9190612768565b34801561043957600080fd5b5061045d610448366004612702565b60009081526008602052604090205460ff1690565b604051901515815260200161030a565b34801561047957600080fd5b5061048d61048836600461277b565b610b97565b60405161030a91906127a7565b3480156104a657600080fd5b506102d06104b53660046126d2565b610bc1565b3480156104c657600080fd5b506102d06104d536600461280d565b610c64565b3480156104e657600080fd5b506104f060015481565b60405190815260200161030a565b34801561050a57600080fd5b50610534610519366004612702565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200161030a565b34801561055857600080fd5b506102f76105673660046126d2565b610d34565b34801561057857600080fd5b506102d061058736600461284a565b610d68565b34801561059857600080fd5b506104f0600781565b3480156105ad57600080fd5b506102d06105bc3660046126d2565b610d80565b3480156105cd57600080fd5b506102d06105dc3660046128e6565b610d90565b3480156105ed57600080fd5b506104f060075481565b34801561060357600080fd5b506102d061061236600461284a565b610e8d565b34801561062357600080fd5b506102d0610632366004612932565b610e9d565b34801561064357600080fd5b50610534610652366004612702565b610eb3565b34801561066357600080fd5b506104f060065481565b34801561067957600080fd5b5061048d61068836600461277b565b610ef6565b34801561069957600080fd5b506102d06106a83660046126d2565b610f15565b3480156106b957600080fd5b506102d06106c8366004612702565b610fac565b3480156106d957600080fd5b506103506106e8366004612702565b60009081526002602052604090206006015463ffffffff1690565b34801561070f57600080fd5b506102d061071e3660046126d2565b611018565b34801561072f57600080fd5b5061077261073e366004612702565b6000908152600260208190526040909120908101546006909101546201000090910460ff90811692600160601b9092041690565b60408051921515835290151560208301520161030a565b61045d610797366004612982565b611024565b3480156107a857600080fd5b506102d06107b7366004612a30565b6110d2565b3480156107c857600080fd5b506102d06107d7366004612a55565b61118f565b3480156107e857600080fd5b506102d06107f7366004612a9c565b61119c565b34801561080857600080fd5b506102d0610817366004612702565b611282565b34801561082857600080fd5b506102d0610837366004612ad1565b61131b565b34801561084857600080fd5b506102d0610857366004612932565b611413565b34801561086857600080fd5b506102d061087736600461280d565b611422565b34801561088857600080fd5b506102d0610897366004612a30565b6114ef565b3480156108a857600080fd5b506108bc6108b7366004612702565b6115ae565b60405161030a9796959493929190612af4565b3480156108db57600080fd5b506102d06108ea366004612b53565b6116c0565b3480156108fb57600080fd5b506102d061090a366004612702565b611a10565b34801561091b57600080fd5b506104f061092a366004612b70565b611a5b565b34801561093b57600080fd5b50600061045d565b34801561094f57600080fd5b5061097d61095e366004612702565b6000908152600260205260409020600a0154600160a01b900460ff1690565b60405161030a9190612c7b565b34801561099657600080fd5b50600954610534906001600160a01b031681565b3480156109b657600080fd5b506102d06109c5366004612a55565b611a6f565b3480156109d657600080fd5b506104f060045481565b3480156109ec57600080fd5b506102d06109fb36600461280d565b611a7c565b348015610a0c57600080fd5b506102d0610a1b366004612c89565b611b31565b348015610a2c57600080fd5b506104f0610a3b366004612d41565b611bbc565b600082815260026020526040812060068101548291610a74918591600160601b90910460ff16906009810190600701611bdf565b915091505b9250929050565b600780541415610aec5760405162461bcd60e51b815260206004820152602c60248201527f436f6e747261637420616c726561647920757067726164656420746f206c617460448201526b6573742076657273696f6e2160a01b60648201526084015b60405180910390fd5b60078055565b6000818152600260205260409020600101805460609190610b1290612d79565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e90612d79565b8015610b8b5780601f10610b6057610100808354040283529160200191610b8b565b820191906000526020600020905b815481529060010190602001808311610b6e57829003601f168201915b50505050509050919050565b6000838152600260205260409020606090600301610bb6818585611cb9565b9150505b9392505050565b60008281526002602052604090205482906001600160a01b03163314610bf95760405162461bcd60e51b8152600401610ae390612db4565b600083815260026020908152604091829020600a0180546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ffc7e26c4fffcd77fc52c81b32a6a6b7838b5592ced8c14c1a46e2b4a322c568a91015b60405180910390a1505050565b60008281526002602052604090205482906001600160a01b03163314610c9c5760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602052604090206006015463ffffffff8381166401000000009092041614610d2f57600083815260026020908152604091829020600601805467ffffffff00000000191664010000000063ffffffff8716908102919091179091558251868152918201527f3e49e2efeacab7e8344acd4e7940449bf62039aa3734c34fa6d3525654be81019101610c57565b505050565b60008281526002602081905260408220908101548291610a749185916201000090910460ff16906005810190600301611bdf565b610d788686866001878787611da0565b505050505050565b610d8c82826000611ee5565b5050565b60008381526002602052604090205483906001600160a01b03163314610dc85760405162461bcd60e51b8152600401610ae390612db4565b6000848152600260209081526040918290209151610dea926001019101612ddb565b604051602081830303815290604052805190602001208383604051602001610e13929190612e77565b6040516020818303038152906040528051906020012014610e87576000848152600260205260409020610e4a906001018484612621565b507f6218b53065a32d32b3f52d9ad728c1b826a2aae15fc1ee92f83836debbcc1029848484604051610e7e93929190612e87565b60405180910390a15b50505050565b610d788686866000878787611da0565b610eac85856001868686611f58565b5050505050565b6000818152600260205260408120600a01546001600160a01b031680610ef05750506000908152600260205260409020546001600160a01b031690565b92915050565b6000838152600260205260409020606090600701610bb6818585611cb9565b60008281526002602052604090205482906001600160a01b03163314610f4d5760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ff68f2d4b68e0d54a81a3b8e53403ddec34a1e288cf6a6f6b3621c0a47b6e36f99101610c57565b6000818152600260205260408120610fc79060030133611f6f565b90508015610d8c577f55e867ccc9ac324e2c193ce4ed25397fb890213c704685f2c9fbe5bd7507298682335b604080519283526001600160a01b039091166020830152015b60405180910390a15050565b610d8c82826001611ee5565b60008087873060405160200161103c93929190612ebd565b60408051601f1981840301815291905280516020909101209050600080611065878901896126d2565b915091508260055414801561108b5750806001600160a01b03168b6001600160a01b0316145b80156110b057506000828152600260205260409020546001600160a01b038681169116145b806110c357506001600160a01b03851630145b9b9a5050505050505050505050565b60008281526002602052604090205482906001600160a01b0316331461110a5760405162461bcd60e51b8152600401610ae390612db4565b6000838152600260208190526040909120015462010000900460ff16151582151514610d2f57600083815260026020818152604092839020909101805462ff0000191662010000861515908102919091179091558251868152918201527f4666a8529dea37114f2ecc11706d613f7a59a7967f8467da6877820b83d405a19101610c57565b610d2f8383836001611f84565b60008281526002602052604090205482906001600160a01b031633146111d45760405162461bcd60e51b8152600401610ae390612db4565b6000838152600260205260409020600a0154600160a01b900460ff16600181111561120157611201612c43565b82600181111561121357611213612c43565b14610d2f576000838152600260205260409020600a01805483919060ff60a01b1916600160a01b83600181111561124c5761124c612c43565b02179055507ff81d9cc918f72edfc74e6b61d4e19ef9a739e94a0e9715b108e6af62275142ef8383604051610c57929190612ee3565b60008181526002602052604090205481906001600160a01b031633146112ba5760405162461bcd60e51b8152600401610ae390612db4565b60008281526008602052604090205460ff16610d8c5760008281526008602052604090819020805460ff19166001179055517f9dc30b8eda31a6a144e092e5de600955523a6a925cc15cc1d1b9b4872cfa61559061100c9084815260200190565b60008281526002602052604090205482906001600160a01b031633146113535760405162461bcd60e51b8152600401610ae390612db4565b6127108261ffff16111561139b5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081c195c98d95b9d608a1b6044820152606401610ae3565b6000838152600260208190526040909120015461ffff838116911614610d2f57600083815260026020818152604092839020909101805461ffff191661ffff86169081179091558251868152918201527f9c6f3e426c05d512408d4ecf517e5155756288155088ad45a81c0e111e3d18549101610c57565b610eac85856000868686611f58565b60008281526002602052604090205482906001600160a01b0316331461145a5760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602052604090206006015463ffffffff838116600160401b9092041614610d2f5760008381526002602090815260409182902060060180546bffffffff00000000000000001916600160401b63ffffffff8716908102919091179091558251868152918201527ff0275a50e761f3b1635fa59ce199b1f2268b3fcb7fbdfb18c21aa3d2d78aa7b79101610c57565b60008281526002602052604090205482906001600160a01b031633146115275760405162461bcd60e51b8152600401610ae390612db4565b600083815260026020526040902060060154600160601b900460ff16151582151514610d2f57600083815260026020908152604091829020600601805460ff60601b1916600160601b861515908102919091179091558251868152918201527fc906280af595fe94779bb9a972f24fe4e0ed7f76bebb4ee0eb9a5f30d6dd4c879101610c57565b60008181526002602081905260408220805460068201549282015460019092018054859485948594606094869485946001600160a01b039093169363ffffffff808516946401000000008104821694600160401b90910490911692909161ffff8116916201000090910460ff1690839061162790612d79565b80601f016020809104026020016040519081016040528092919081815260200182805461165390612d79565b80156116a05780601f10611675576101008083540402835291602001916116a0565b820191906000526020600020905b81548152906001019060200180831161168357829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b600054610100900460ff166116db5760005460ff16156116df565b303b155b6117425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ae3565b600054610100900460ff16158015611764576000805461ffff19166101011790555b600980546001600160a01b0319166001600160a01b038416908117909155604080516381fa6cd360e01b815290516381fa6cd391600480820192602092909190829003018186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190612ef7565b6040805163a99e7e2960e01b81526004810191909152602960448201527f2875696e74323536206d61726b657449642c2061646472657373206c656e646560648201526872416464726573732960b81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190612f14565b600155600954604080516381fa6cd360e01b815290516001600160a01b03909216916381fa6cd391600480820192602092909190829003018186803b1580156118fb57600080fd5b505afa15801561190f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119339190612ef7565b6040805163a99e7e2960e01b81526004810191909152602b60448201527f2875696e74323536206d61726b657449642c206164647265737320626f72726f60648201526a776572416464726573732960a81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b1580156119c057600080fd5b505af11580156119d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f89190612f14565b6006558015610d8c576000805461ff00191690555050565b6000818152600260205260408120611a2b9060070133611f6f565b90508015610d8c577f914ccbaf2f5c9c2f4b7c6be3497b6b2ceb6ce2d050aec6eb2e0e31b8f9f67f0c8233610ff3565b60006110c38b8b8b8b8b8b8b8b8b8b6120e1565b610d2f8383836000611f84565b60008281526002602052604090205482906001600160a01b03163314611ab45760405162461bcd60e51b8152600401610ae390612db4565b60008381526002602052604090206006015463ffffffff838116911614610d2f57600083815260026020908152604091829020600601805463ffffffff191663ffffffff86169081179091558251868152918201527fa04499c227e7a6de804e5a57e4b38990792373bd8d73b6c13ab76e40600748439101610c57565b60008981526002602052604090205489906001600160a01b03163314611b695760405162461bcd60e51b8152600401610ae390612db4565b611b748a8484610d90565b611b7e8a8a611a7c565b611b888a89610c64565b611b928a88611422565b611b9c8a8761131b565b611ba68a856110d2565b611bb08a866114ef565b50505050505050505050565b6000611bd18a8a8a8a8a8a8a60008b8b6120e1565b9a9950505050505050505050565b6000808415611cab57611bf2838761224d565b8015611c8857506009546001600160a01b03878116600090815260208790526040908190205490516330cd251f60e21b8152600481019190915291169063c334947c9060240160206040518083038186803b158015611c5057600080fd5b505afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c889190612f2d565b6001600160a01b0387166000908152602086905260409020549092509050611cb0565b600191505b94509492505050565b60606000611cc68561226f565b90506000611cd48486612f60565b9050818111611d97576000611ce98583612f7f565b905082811115611cf65750815b611d008282612f97565b67ffffffffffffffff811115611d1857611d18612fae565b604051908082528060200260200182016040528015611d41578160200160208202803683370190505b509350815b81811015611d9457611d588882612279565b858281518110611d6a57611d6a612fc4565b6001600160a01b039092166020928302919091019091015280611d8c81612fda565b915050611d46565b50505b50509392505050565b83611dad57600654611db1565b6001545b806005819055506000808989604051602001611de09291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405290506000600260008c815260200190815260200160002060000160009054906101000a90046001600160a01b03169050600960009054906101000a90046001600160a01b03166001600160a01b031663930ed0138b6005548c600087878e8e8e6040518a63ffffffff1660e01b8152600401611e7399989796959493929190612ff5565b602060405180830381600087803b158015611e8d57600080fd5b505af1158015611ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec59190612f14565b92505050611ed589898389612285565b5050600060055550505050505050565b6000838152600260205260409020546001600160a01b0316336001600160a01b031614611f4b5760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610ae3565b6000610eac848484612387565b6000611f65878787612387565b5050505050505050565b6000610bba836001600160a01b038416612497565b80611f9157600654611f95565b6001545b60058190556000858152600260205260409020546001600160a01b0316336001600160a01b0316146120005760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610ae3565b6009546005546040516000926001600160a01b0316916309a954cd9188919088908690612045908d9086906020019182526001600160a01b0316602082015260400190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401612074959493929190613056565b602060405180830381600087803b15801561208e57600080fd5b505af11580156120a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c69190612f14565b90506120d486868386612285565b5050600060055550505050565b60006001600160a01b038b166121315760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b6044820152606401610ae3565b60046000815461214090612fda565b9182905550600081815260026020526040902080546001600160a01b0319166001600160a01b038e161790559050612179818484610d90565b612183818b611a7c565b61218d818a610c64565b612197818861131b565b6121a18189611422565b6121ab818561119c565b85156121d357600081815260026020819052604090912001805462ff00001916620100001790555b84156121fc576000818152600260205260409020600601805460ff60601b1916600160601b1790555b8a6001600160a01b03167fa69fa77c6a90b171cf4e3d9a9dd6c4e56fbd1fbbdcf3925eaf600ccaa917feab8260405161223791815260200190565b60405180910390a29a9950505050505050505050565b6001600160a01b03811660009081526001830160205260408120541515610bba565b6000610ef0825490565b6000610bba838361258a565b801561230d5760008481526002602081815260408084206001600160a01b038816855260058101835290842086905592879052526122c690600301846125b4565b50604080518581526001600160a01b03851660208201527f75675690de0899b0b869d83b44b2d926ac594426b2a0286c478ecdf815cbd33e910160405180910390a1610e87565b60008481526002602081815260408084206001600160a01b0388168552600981018352908420869055928790525261234890600701846125b4565b50604080518581526001600160a01b03851660208201527f0c2cfc7e7a16ebee66e77fb314f4bfdb5505e33e77d41c0c60604efc70fd926b9101610e7e565b60008115612412575060008381526002602081815260408084206001600160a01b038716855260058101835290842054938790529190526123cb9060030184611f6f565b50604080518581526001600160a01b03851660208201527f6e7c30dc58d3daa1458c79b66ca464f5f3d8a23d9e50eb14daf1cb0923bf2900910160405180910390a1610bba565b5060008381526002602081815260408084206001600160a01b0387168552600981018352908420549387905291905261244e9060070184611f6f565b50604080518581526001600160a01b03851660208201527fe76a3e8b220b622b9fc2a655ab867687a93f195809eb3639f422e60936ff7eb4910160405180910390a19392505050565b600081815260018301602052604081205480156125805760006124bb600183612f97565b85549091506000906124cf90600190612f97565b90508181146125345760008660000182815481106124ef576124ef612fc4565b906000526020600020015490508087600001848154811061251257612512612fc4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061254557612545613094565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ef0565b6000915050610ef0565b60008260000182815481106125a1576125a1612fc4565b9060005260206000200154905092915050565b6000610bba836001600160a01b03841660006125e3838360009081526001919091016020526040902054151590565b61261957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ef0565b506000610ef0565b82805461262d90612d79565b90600052602060002090601f01602090048101928261264f5760008555612695565b82601f106126685782800160ff19823516178555612695565b82800160010185558215612695579182015b8281111561269557823582559160200191906001019061267a565b506126a19291506126a5565b5090565b5b808211156126a157600081556001016126a6565b6001600160a01b03811681146126cf57600080fd5b50565b600080604083850312156126e557600080fd5b8235915060208301356126f7816126ba565b809150509250929050565b60006020828403121561271457600080fd5b5035919050565b6000815180845260005b8181101561274157602081850181015186830182015201612725565b81811115612753576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610bba602083018461271b565b60008060006060848603121561279057600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156127e85783516001600160a01b0316835292840192918401916001016127c3565b50909695505050505050565b803563ffffffff8116811461280857600080fd5b919050565b6000806040838503121561282057600080fd5b82359150612830602084016127f4565b90509250929050565b803560ff8116811461280857600080fd5b60008060008060008060c0878903121561286357600080fd5b863595506020870135612875816126ba565b94506040870135935061288a60608801612839565b92506080870135915060a087013590509295509295509295565b60008083601f8401126128b657600080fd5b50813567ffffffffffffffff8111156128ce57600080fd5b602083019150836020828501011115610a7957600080fd5b6000806000604084860312156128fb57600080fd5b83359250602084013567ffffffffffffffff81111561291957600080fd5b612925868287016128a4565b9497909650939450505050565b600080600080600060a0868803121561294a57600080fd5b85359450602086013561295c816126ba565b935061296a60408701612839565b94979396509394606081013594506080013592915050565b600080600080600080600060a0888a03121561299d57600080fd5b87356129a8816126ba565b9650602088013567ffffffffffffffff808211156129c557600080fd5b6129d18b838c016128a4565b909850965060408a01359150808211156129ea57600080fd5b506129f78a828b016128a4565b909550935050606088013591506080880135612a12816126ba565b8091505092959891949750929550565b80151581146126cf57600080fd5b60008060408385031215612a4357600080fd5b8235915060208301356126f781612a22565b600080600060608486031215612a6a57600080fd5b833592506020840135612a7c816126ba565b929592945050506040919091013590565b80356002811061280857600080fd5b60008060408385031215612aaf57600080fd5b8235915061283060208401612a8d565b803561ffff8116811461280857600080fd5b60008060408385031215612ae457600080fd5b8235915061283060208401612abf565b6001600160a01b038816815263ffffffff878116602083015286811660408301528516606082015260e060808201819052600090612b349083018661271b565b61ffff9490941660a08301525090151560c09091015295945050505050565b600060208284031215612b6557600080fd5b8135610bba816126ba565b6000806000806000806000806000806101208b8d031215612b9057600080fd5b8a35612b9b816126ba565b9950612ba960208c016127f4565b9850612bb760408c016127f4565b9750612bc560608c016127f4565b9650612bd360808c01612abf565b955060a08b0135612be381612a22565b945060c08b0135612bf381612a22565b9350612c0160e08c01612a8d565b92506101008b013567ffffffffffffffff811115612c1e57600080fd5b612c2a8d828e016128a4565b915080935050809150509295989b9194979a5092959850565b634e487b7160e01b600052602160045260246000fd5b60028110612c7757634e487b7160e01b600052602160045260246000fd5b9052565b60208101610ef08284612c59565b60008060008060008060008060006101008a8c031215612ca857600080fd5b89359850612cb860208b016127f4565b9750612cc660408b016127f4565b9650612cd460608b016127f4565b9550612ce260808b01612abf565b945060a08a0135612cf281612a22565b935060c08a0135612d0281612a22565b925060e08a013567ffffffffffffffff811115612d1e57600080fd5b612d2a8c828d016128a4565b915080935050809150509295985092959850929598565b60008060008060008060008060006101008a8c031215612d6057600080fd5b8935612d6b816126ba565b9850612cb860208b016127f4565b600181811c90821680612d8d57607f821691505b60208210811415612dae57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b600080835481600182811c915080831680612df757607f831692505b6020808410821415612e1757634e487b7160e01b86526022600452602486fd5b818015612e2b5760018114612e3c57612e69565b60ff19861689528489019650612e69565b60008a81526020902060005b86811015612e615781548b820152908501908301612e48565b505084890196505b509498975050505050505050565b8183823760009101908152919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b82815260408101610bba6020830184612c59565b600060208284031215612f0957600080fd5b8151610bba816126ba565b600060208284031215612f2657600080fd5b5051919050565b600060208284031215612f3f57600080fd5b8151610bba81612a22565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f7a57612f7a612f4a565b500290565b60008219821115612f9257612f92612f4a565b500190565b600082821015612fa957612fa9612f4a565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415612fee57612fee612f4a565b5060010190565b600061012060018060a01b03808d1684528b60208501528a604085015289606085015281608085015261302a8285018a61271b565b971660a0840152505060ff9390931660c084015260e08301919091526101009091015295945050505050565b60018060a01b038616815284602082015283604082015282606082015260a06080820152600061308960a083018461271b565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b65e3373da0873a69f39e865651ec7693cbbf3d0b466fd1dbf55c07099a32a3264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attestBorrower(uint256,address,uint256)": {
        "details": "See {_attestStakeholder}."
      },
      "attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "See {_attestStakeholderViaDelegation}."
      },
      "attestLender(uint256,address,uint256)": {
        "details": "See {_attestStakeholder}."
      },
      "attestLender(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "See {_attestStakeholderViaDelegation}."
      },
      "borrowerExitMarket(uint256)": {
        "params": {
          "_marketId": "The market ID to leave."
        }
      },
      "closeMarket(uint256)": {
        "params": {
          "_marketId": "The market ID for the market to close."
        }
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)": {
        "details": "Uses the default EMI payment type.",
        "params": {
          "_bidExpirationTime": "Length of time in seconds before pending bids expire.",
          "_initialOwner": "Address who will initially own the market.",
          "_paymentCycleDuration": "Length of time in seconds before a bid's next payment is required to be made.",
          "_paymentDefaultDuration": "Length of time in seconds before a loan is considered in default for non-payment.",
          "_requireBorrowerAttestation": "Boolean that indicates if borrowers require attestation to join market.",
          "_requireLenderAttestation": "Boolean that indicates if lenders require attestation to join market.",
          "_uri": "URI string to get metadata details about the market."
        },
        "returns": {
          "marketId_": "The market ID of the newly created market."
        }
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,string)": {
        "params": {
          "_bidExpirationTime": "Length of time in seconds before pending bids expire.",
          "_initialOwner": "Address who will initially own the market.",
          "_paymentCycleDuration": "Length of time in seconds before a bid's next payment is required to be made.",
          "_paymentDefaultDuration": "Length of time in seconds before a loan is considered in default for non-payment.",
          "_paymentType": "The payment type for loans in the market.",
          "_requireBorrowerAttestation": "Boolean that indicates if borrowers require attestation to join market.",
          "_requireLenderAttestation": "Boolean that indicates if lenders require attestation to join market.",
          "_uri": "URI string to get metadata details about the market."
        },
        "returns": {
          "marketId_": "The market ID of the newly created market."
        }
      },
      "getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)": {
        "params": {
          "_marketId": "The ID of the market.",
          "_page": "Page index to start from.",
          "_perPage": "Number of items in a page to return."
        },
        "returns": {
          "_0": "Array of addresses that have been added to a market."
        }
      },
      "getAllVerifiedLendersForMarket(uint256,uint256,uint256)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_page": "Page index to start from.",
          "_perPage": "Number of items in a page to return."
        },
        "returns": {
          "_0": "Array of addresses that have been added to a market."
        }
      },
      "getMarketAttestationRequirements(uint256)": {
        "params": {
          "_marketId": "The ID of the market."
        }
      },
      "getMarketData(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        }
      },
      "getMarketFeeRecipient(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "The address of a market's fee recipient."
        }
      },
      "getMarketOwner(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "The address of a market's owner."
        }
      },
      "getMarketURI(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "URI of a market's metadata."
        }
      },
      "getMarketplaceFee(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "fee": "in basis points"
        }
      },
      "getPaymentCycleDuration(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "Duration of a loan until it is delinquent."
        }
      },
      "getPaymentDefaultDuration(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "Duration of a loan repayment interval until it is default."
        }
      },
      "getPaymentType(uint256)": {
        "params": {
          "_marketId": "the ID of the market."
        },
        "returns": {
          "_0": "The type of payment for loans in the market."
        }
      },
      "isMarketClosed(uint256)": {
        "params": {
          "_marketId": "The market ID for the market to check."
        }
      },
      "isPayable()": {
        "details": "Returns whether the resolver supports ETH transfers"
      },
      "isVerifiedBorrower(uint256,address)": {
        "params": {
          "_borrowerAddress": "Address of the borrower to check.",
          "_marketId": "The ID of a market."
        },
        "returns": {
          "isVerified_": "Boolean indicating if a borrower has been added to a market.",
          "uuid_": "Bytes32 representing the UUID of the borrower."
        }
      },
      "isVerifiedLender(uint256,address)": {
        "params": {
          "_lenderAddress": "Address to check.",
          "_marketId": "The ID of a market."
        },
        "returns": {
          "isVerified_": "Boolean indicating if a lender has been added to a market.",
          "uuid_": "Bytes32 representing the UUID of the lender."
        }
      },
      "lenderExitMarket(uint256)": {
        "params": {
          "_marketId": "The market ID to leave."
        }
      },
      "resolve(address,bytes,bytes,uint256,address)": {
        "details": "This function must only be called by the `attestLender` function above.",
        "params": {
          "": "@param attestor Market owner's address who signed the attestation.",
          "data": "Data the must include the market ID and lender's address",
          "recipient": "Lender's address who is being attested.",
          "schema": "The schema used for the attestation."
        },
        "returns": {
          "_0": "Boolean indicating the attestation was successful."
        }
      },
      "revokeBorrower(uint256,address)": {
        "details": "See {_revokeStakeholder}."
      },
      "revokeBorrower(uint256,address,uint8,bytes32,bytes32)": {
        "details": "See {_revokeStakeholderViaDelegation}."
      },
      "revokeLender(uint256,address)": {
        "details": "See {_revokeStakeholder}."
      },
      "revokeLender(uint256,address,uint8,bytes32,bytes32)": {
        "details": "See {_revokeStakeholderViaDelegation}."
      },
      "setBorrowerAttestationRequired(uint256,bool)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_required": "Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner."
        }
      },
      "setLenderAttestationRequired(uint256,bool)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_required": "Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner."
        }
      },
      "setMarketFeePercent(uint256,uint16)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_newPercent": "The percentage fee in basis points. Requirements: - The caller must be the current owner."
        }
      },
      "setMarketFeeRecipient(uint256,address)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_recipient": "Address of the new fee recipient. Requirements: - The caller must be the current owner."
        }
      },
      "setMarketPaymentType(uint256,uint8)": {
        "params": {
          "_marketId": "The ID of the market.",
          "_newPaymentType": "The payment type for the market."
        }
      },
      "setMarketURI(uint256,string)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_uri": "A URI that points to a market's metadata. Requirements: - The caller must be the current owner."
        }
      },
      "setPaymentCycleDuration(uint256,uint32)": {
        "params": {
          "_duration": "Delinquency duration for new loans",
          "_marketId": "The ID of a market."
        }
      },
      "setPaymentDefaultDuration(uint256,uint32)": {
        "params": {
          "_duration": "Default duration for new loans",
          "_marketId": "The ID of a market."
        }
      },
      "transferMarketOwnership(uint256,address)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_newOwner": "Address of the new market owner. Requirements: - The caller must be the current owner."
        }
      },
      "updateMarketSettings(uint256,uint32,uint32,uint32,uint16,bool,bool,string)": {
        "params": {
          "_bidExpirationTime": "Duration of time before a bid is considered out of date",
          "_marketId": "The ID of a market.",
          "_metadataURI": "A URI that points to a market's metadata. Requirements: - The caller must be the current owner.",
          "_paymentCycleDuration": "Delinquency duration for new loans",
          "_paymentDefaultDuration": "Default duration for new loans"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CURRENT_CODE_VERSION()": {
        "notice": "Constant Variables *"
      },
      "attestBorrower(uint256,address,uint256)": {
        "notice": "Adds a borrower to a market."
      },
      "attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Adds a borrower to a market via delegated attestation."
      },
      "attestLender(uint256,address,uint256)": {
        "notice": "Adds a lender to a market."
      },
      "attestLender(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Adds a lender to a market via delegated attestation."
      },
      "borrowerExitMarket(uint256)": {
        "notice": "Allows a borrower to voluntarily leave a market."
      },
      "closeMarket(uint256)": {
        "notice": "Closes a market so new bids cannot be added."
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)": {
        "notice": "Creates a new market."
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,string)": {
        "notice": "Creates a new market."
      },
      "getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)": {
        "notice": "Gets addresses of all attested borrowers."
      },
      "getAllVerifiedLendersForMarket(uint256,uint256,uint256)": {
        "notice": "Gets addresses of all attested lenders."
      },
      "getMarketAttestationRequirements(uint256)": {
        "notice": "Gets the attestation requirements for a given market."
      },
      "getMarketData(uint256)": {
        "notice": "Gets the data associated with a market."
      },
      "getMarketFeeRecipient(uint256)": {
        "notice": "Gets the fee recipient of a market."
      },
      "getMarketOwner(uint256)": {
        "notice": "Gets the address of a market's owner."
      },
      "getMarketURI(uint256)": {
        "notice": "Gets the metadata URI of a market."
      },
      "getMarketplaceFee(uint256)": {
        "notice": "Gets the marketplace fee in basis points"
      },
      "getPaymentCycleDuration(uint256)": {
        "notice": "Gets the loan delinquent duration of a market."
      },
      "getPaymentDefaultDuration(uint256)": {
        "notice": "Gets the loan default duration of a market."
      },
      "getPaymentType(uint256)": {
        "notice": "Get the payment type of a market."
      },
      "isMarketClosed(uint256)": {
        "notice": "Returns the status of a market being open or closed for new bids."
      },
      "isVerifiedBorrower(uint256,address)": {
        "notice": "Checks if a borrower has been attested and added to a market."
      },
      "isVerifiedLender(uint256,address)": {
        "notice": "Checks if a lender has been attested and added to a market."
      },
      "lenderExitMarket(uint256)": {
        "notice": "Allows a lender to voluntarily leave a market."
      },
      "onUpgrade()": {
        "notice": "Sets the new tellerAS on upgrade"
      },
      "resolve(address,bytes,bytes,uint256,address)": {
        "notice": "Verifies an attestation is valid."
      },
      "revokeBorrower(uint256,address)": {
        "notice": "Removes a borrower from an market."
      },
      "revokeBorrower(uint256,address,uint8,bytes32,bytes32)": {
        "notice": "Removes a borrower from a market via delegated revocation."
      },
      "revokeLender(uint256,address)": {
        "notice": "Removes a lender from an market."
      },
      "revokeLender(uint256,address,uint8,bytes32,bytes32)": {
        "notice": "Removes a borrower from a market via delegated revocation."
      },
      "setBorrowerAttestationRequired(uint256,bool)": {
        "notice": "Enable/disables market whitelist for borrowers."
      },
      "setLenderAttestationRequired(uint256,bool)": {
        "notice": "Enable/disables market whitelist for lenders."
      },
      "setMarketFeePercent(uint256,uint16)": {
        "notice": "Sets the fee for the market."
      },
      "setMarketFeeRecipient(uint256,address)": {
        "notice": "Sets the fee recipient address for a market."
      },
      "setMarketPaymentType(uint256,uint8)": {
        "notice": "Set the payment type for the market."
      },
      "setMarketURI(uint256,string)": {
        "notice": "Sets the metadata URI for a market."
      },
      "setPaymentCycleDuration(uint256,uint32)": {
        "notice": "Sets the duration of new loans for this market before they turn delinquent.Changing this value does not change the terms of existing loans for this market."
      },
      "setPaymentDefaultDuration(uint256,uint32)": {
        "notice": "Sets the duration of new loans for this market before they turn defaulted.Changing this value does not change the terms of existing loans for this market."
      },
      "transferMarketOwnership(uint256,address)": {
        "notice": "Transfers ownership of a marketplace."
      },
      "updateMarketSettings(uint256,uint32,uint32,uint32,uint16,bool,bool,string)": {
        "notice": "Updates multiple market settings for a given market."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3108,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3111,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9359,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "lenderAttestationSchemaId",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 9364,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "markets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Marketplace)9357_storage)"
      },
      {
        "astId": 9368,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "__uriToId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 9370,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "marketCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9372,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "_attestingSchemaId",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 9374,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "borrowerAttestationSchemaId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 9376,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "version",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9380,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "marketIsClosed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 9383,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "tellerAS",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(TellerAS)8468"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TellerAS)8468": {
        "encoding": "inplace",
        "label": "contract TellerAS",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentType)13699": {
        "encoding": "inplace",
        "label": "enum V2Calculations.PaymentType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Marketplace)9357_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MarketRegistry.Marketplace)",
        "numberOfBytes": "32",
        "value": "t_struct(Marketplace)9357_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7277_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7276,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6976_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Marketplace)9357_storage": {
        "encoding": "inplace",
        "label": "struct MarketRegistry.Marketplace",
        "members": [
          {
            "astId": 9323,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9325,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 9327,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "marketplaceFeePercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 9329,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "lenderAttestationRequired",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9332,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "verifiedLendersForMarket",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)7277_storage"
          },
          {
            "astId": 9336,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "lenderAttestationIds",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 9338,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentCycleDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 9340,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentDefaultDuration",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 9342,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "bidExpirationTime",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 9344,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "borrowerAttestationRequired",
            "offset": 12,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 9347,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "verifiedBorrowersForMarket",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(AddressSet)7277_storage"
          },
          {
            "astId": 9351,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "borrowerAttestationIds",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 9353,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 9356,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentType",
            "offset": 20,
            "slot": "10",
            "type": "t_enum(PaymentType)13699"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Set)6976_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6971,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6975,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}