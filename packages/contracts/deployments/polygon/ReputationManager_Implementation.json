{
  "address": "0x72733102AB139FB0367cc29D492c955A7c736079",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum RepMark",
          "name": "repMark",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "MarkAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum RepMark",
          "name": "repMark",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "MarkRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCurrentDefaultLoanIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCurrentDelinquentLoanIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDefaultedLoanIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDelinquentLoanIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellerV2",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tellerV2",
      "outputs": [
        {
          "internalType": "contract ITellerV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "updateAccountReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "updateAccountReputation",
      "outputs": [
        {
          "internalType": "enum RepMark",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "artifactName": "ReputationManager",
  "transactionHash": "0x9a56b97d4be9326e851dfb0cb5b2a596f0a64a500b6aa3d2ef1e0e9dea5329a1",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x72733102AB139FB0367cc29D492c955A7c736079",
    "transactionIndex": 55,
    "gasUsed": "695736",
    "logsBloom": "0x
    "blockHash": "0x17219b9e6bd5b6525d2852a39721044e52e30abc5b0e01194aa4b8ed6ab38d14",
    "transactionHash": "0x9a56b97d4be9326e851dfb0cb5b2a596f0a64a500b6aa3d2ef1e0e9dea5329a1",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 27151862,
        "transactionHash": "0x9a56b97d4be9326e851dfb0cb5b2a596f0a64a500b6aa3d2ef1e0e9dea5329a1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000afe87013dc96ede1e116a288d80fcaa0effe5fe5",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000051c3f8c595412800000000000000000000000000000000000000000000001793bc39a76139e8b6000000000000000000000000000000000000000000004c28fdb4d358549c219f000000000000000000000000000000000000000000000017936a75ae9ba4a78e000000000000000000000000000000000000000000004c28fe0697511a3162c7",
        "logIndex": 231,
        "blockHash": "0x17219b9e6bd5b6525d2852a39721044e52e30abc5b0e01194aa4b8ed6ab38d14"
      }
    ],
    "blockNumber": 27151862,
    "cumulativeGasUsed": "9304994",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "da330fe2e38316efe7fedf19ac145fb7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RepMark\",\"name\":\"repMark\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"MarkAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RepMark\",\"name\":\"repMark\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"MarkRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCurrentDefaultLoanIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCurrentDelinquentLoanIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDefaultedLoanIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDelinquentLoanIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellerV2\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellerV2\",\"outputs\":[{\"internalType\":\"contract ITellerV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateAccountReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"updateAccountReputation\",\"outputs\":[{\"internalType\":\"enum RepMark\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"Initializes the proxy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReputationManager.sol\":\"ReputationManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ReputationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Interfaces\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"./interfaces/ITellerV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract ReputationManager is IReputationManager, Initializable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 public constant CONTROLLER = keccak256(\\\"CONTROLLER\\\");\\n\\n    ITellerV2 public tellerV2;\\n    mapping(address => EnumerableSet.UintSet) private _delinquencies;\\n    mapping(address => EnumerableSet.UintSet) private _defaults;\\n    mapping(address => EnumerableSet.UintSet) private _currentDelinquencies;\\n    mapping(address => EnumerableSet.UintSet) private _currentDefaults;\\n\\n    event MarkAdded(\\n        address indexed account,\\n        RepMark indexed repMark,\\n        uint256 bidId\\n    );\\n    event MarkRemoved(\\n        address indexed account,\\n        RepMark indexed repMark,\\n        uint256 bidId\\n    );\\n\\n    /**\\n     * @notice Initializes the proxy.\\n     */\\n    function initialize(address _tellerV2) external initializer {\\n        tellerV2 = ITellerV2(_tellerV2);\\n    }\\n\\n    function getDelinquentLoanIds(address _account)\\n        public\\n        override\\n        returns (uint256[] memory)\\n    {\\n        updateAccountReputation(_account);\\n        return _delinquencies[_account].values();\\n    }\\n\\n    function getDefaultedLoanIds(address _account)\\n        public\\n        override\\n        returns (uint256[] memory)\\n    {\\n        updateAccountReputation(_account);\\n        return _defaults[_account].values();\\n    }\\n\\n    function getCurrentDelinquentLoanIds(address _account)\\n        public\\n        override\\n        returns (uint256[] memory)\\n    {\\n        updateAccountReputation(_account);\\n        return _currentDelinquencies[_account].values();\\n    }\\n\\n    function getCurrentDefaultLoanIds(address _account)\\n        public\\n        override\\n        returns (uint256[] memory)\\n    {\\n        updateAccountReputation(_account);\\n        return _currentDefaults[_account].values();\\n    }\\n\\n    function updateAccountReputation(address _account) public override {\\n        uint256[] memory activeBidIds = tellerV2.getBorrowerActiveLoanIds(\\n            _account\\n        );\\n        for (uint256 i; i < activeBidIds.length; i++) {\\n            _applyReputation(_account, activeBidIds[i]);\\n        }\\n    }\\n\\n    function updateAccountReputation(address _account, uint256 _bidId)\\n        public\\n        override\\n        returns (RepMark)\\n    {\\n        return _applyReputation(_account, _bidId);\\n    }\\n\\n    function _applyReputation(address _account, uint256 _bidId)\\n        internal\\n        returns (RepMark mark_)\\n    {\\n        mark_ = RepMark.Good;\\n\\n        if (tellerV2.isLoanDefaulted(_bidId)) {\\n            mark_ = RepMark.Default;\\n\\n            // Remove delinquent status\\n            _removeMark(_account, _bidId, RepMark.Delinquent);\\n        } else if (tellerV2.isPaymentLate(_bidId)) {\\n            mark_ = RepMark.Delinquent;\\n        }\\n\\n        // Mark status if not \\\"Good\\\"\\n        if (mark_ != RepMark.Good) {\\n            _addMark(_account, _bidId, mark_);\\n        }\\n    }\\n\\n    function _addMark(\\n        address _account,\\n        uint256 _bidId,\\n        RepMark _mark\\n    ) internal {\\n        if (_mark == RepMark.Delinquent) {\\n            _delinquencies[_account].add(_bidId);\\n            _currentDelinquencies[_account].add(_bidId);\\n        } else if (_mark == RepMark.Default) {\\n            _defaults[_account].add(_bidId);\\n            _currentDefaults[_account].add(_bidId);\\n        }\\n\\n        emit MarkAdded(_account, _mark, _bidId);\\n    }\\n\\n    function _removeMark(\\n        address _account,\\n        uint256 _bidId,\\n        RepMark _mark\\n    ) internal {\\n        if (_mark == RepMark.Delinquent) {\\n            _currentDelinquencies[_account].remove(_bidId);\\n        } else if (_mark == RepMark.Default) {\\n            _currentDefaults[_account].remove(_bidId);\\n        }\\n\\n        emit MarkRemoved(_account, _mark, _bidId);\\n    }\\n}\\n\",\"keccak256\":\"0xd3eaf87a765fc698d015ba0c6137183df723ed77b3f8fded12abc0d455b3f94b\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RepMark {\\n    Good,\\n    Delinquent,\\n    Default\\n}\\n\\ninterface IReputationManager {\\n    function getDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getDefaultedLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDefaultLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function updateAccountReputation(address _account) external;\\n\\n    function updateAccountReputation(address _account, uint256 _bidId)\\n        external\\n        returns (RepMark);\\n}\\n\",\"keccak256\":\"0x650a926a359934254154554be6f579d44ac248f5ee75a7ad9081f211454f59f3\",\"license\":\"MIT\"},\"contracts/interfaces/ITellerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum BidState {\\n    NONEXISTENT,\\n    PENDING,\\n    CANCELLED,\\n    ACCEPTED,\\n    PAID,\\n    LIQUIDATED\\n}\\n\\ninterface ITellerV2 {\\n    function isLoanDefaulted(uint256 _bidId) external view returns (bool);\\n\\n    function isPaymentLate(uint256 _bidId) external view returns (bool);\\n\\n    function getBidState(uint256 _bidId) external view returns (BidState);\\n\\n    function getBorrowerActiveLoanIds(address _borrower)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x88c86486ccb40dc5319c311fa54ee080cde5cc500443f18644ac83f33f2eb2e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ba2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063941675db11610066578063941675db146100fc578063c4d66de81461012d578063c7312e4714610140578063e0d5343d14610160578063ee0fc1211461017357600080fd5b806303c04b2814610098578063287b498a146100c15780637076185c146100d457806376604b37146100e9575b600080fd5b6100ab6100a6366004610934565b6101a8565b6040516100b89190610a60565b60405180910390f35b6100ab6100cf366004610934565b6101da565b6100e76100e2366004610934565b610206565b005b6100ab6100f7366004610934565b6102d8565b600054610115906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b6100e761013b366004610934565b610304565b61015361014e36600461094f565b6103e4565b6040516100b89190610aa4565b6100ab61016e366004610934565b6103f7565b61019a7f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d22152981565b6040519081526020016100b8565b60606101b382610206565b6001600160a01b03821660009081526002602052604090206101d49061041f565b92915050565b60606101e582610206565b6001600160a01b03821660009081526004602052604090206101d49061041f565b6000805460405163054de0ff60e01b81526001600160a01b038481166004830152620100009092049091169063054de0ff9060240160006040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028f9190810190610979565b905060005b81518110156102d3576102c0838383815181106102b3576102b3610b40565b602002602001015161042c565b50806102cb81610ae3565b915050610294565b505050565b60606102e382610206565b6001600160a01b03821660009081526001602052604090206101d49061041f565b600054610100900460ff1661031f5760005460ff1615610323565b303b155b61038a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156103ac576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156103e0576000805461ff00191690555b5050565b60006103f0838361042c565b9392505050565b606061040282610206565b6001600160a01b03821660009081526003602052604090206101d4905b606060006103f083610575565b6000805460405163e8cbab0960e01b815260048101849052620100009091046001600160a01b03169063e8cbab099060240160206040518083038186803b15801561047657600080fd5b505afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae9190610a3e565b156104c7575060026104c2838360016105d1565b610551565b60005460405163093f561760e01b815260048101849052620100009091046001600160a01b03169063093f56179060240160206040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610a3e565b15610551575060015b600081600281111561056557610565610b14565b146101d4576101d48383836106ab565b6060816000018054806020026020016040519081016040528092919081815260200182805480156105c557602002820191906000526020600020905b8154815260200190600101908083116105b1575b50505050509050919050565b60018160028111156105e5576105e5610b14565b1415610613576001600160a01b038316600090815260036020526040902061060d90836107be565b50610651565b600281600281111561062757610627610b14565b1415610651576001600160a01b038316600090815260046020526040902061064f90836107be565b505b80600281111561066357610663610b14565b836001600160a01b03167f3b90fa143863a45908a7b69d67a369f6e401bfc21b1f1873b2c18f7dfdf0dd278460405161069e91815260200190565b60405180910390a3505050565b60018160028111156106bf576106bf610b14565b1415610710576001600160a01b03831660009081526001602052604090206106e790836107ca565b506001600160a01b038316600090815260036020526040902061070a90836107ca565b50610771565b600281600281111561072457610724610b14565b1415610771576001600160a01b038316600090815260026020526040902061074c90836107ca565b506001600160a01b038316600090815260046020526040902061076f90836107ca565b505b80600281111561078357610783610b14565b836001600160a01b03167f07ffa1c77b3c4d3bf16ff59253da47ed8e8a4367376d6caf4bf66469977bc5db8460405161069e91815260200190565b60006103f083836107d6565b60006103f083836108c9565b600081815260018301602052604081205480156108bf5760006107fa600183610acc565b855490915060009061080e90600190610acc565b905081811461087357600086600001828154811061082e5761082e610b40565b906000526020600020015490508087600001848154811061085157610851610b40565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061088457610884610b2a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101d4565b60009150506101d4565b6000818152600183016020526040812054610910575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101d4565b5060006101d4565b80356001600160a01b038116811461092f57600080fd5b919050565b60006020828403121561094657600080fd5b6103f082610918565b6000806040838503121561096257600080fd5b61096b83610918565b946020939093013593505050565b6000602080838503121561098c57600080fd5b825167ffffffffffffffff808211156109a457600080fd5b818501915085601f8301126109b857600080fd5b8151818111156109ca576109ca610b56565b8060051b604051601f19603f830116810181811085821117156109ef576109ef610b56565b604052828152858101935084860182860187018a1015610a0e57600080fd5b600095505b83861015610a31578051855260019590950194938601938601610a13565b5098975050505050505050565b600060208284031215610a5057600080fd5b815180151581146103f057600080fd5b6020808252825182820181905260009190848201906040850190845b81811015610a9857835183529284019291840191600101610a7c565b50909695505050505050565b6020810160038310610ac657634e487b7160e01b600052602160045260246000fd5b91905290565b600082821015610ade57610ade610afe565b500390565b6000600019821415610af757610af7610afe565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122010ae33f876d5eae24fda74b6298e14920b1af51509431983f548db1fb8e89de864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063941675db11610066578063941675db146100fc578063c4d66de81461012d578063c7312e4714610140578063e0d5343d14610160578063ee0fc1211461017357600080fd5b806303c04b2814610098578063287b498a146100c15780637076185c146100d457806376604b37146100e9575b600080fd5b6100ab6100a6366004610934565b6101a8565b6040516100b89190610a60565b60405180910390f35b6100ab6100cf366004610934565b6101da565b6100e76100e2366004610934565b610206565b005b6100ab6100f7366004610934565b6102d8565b600054610115906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b6100e761013b366004610934565b610304565b61015361014e36600461094f565b6103e4565b6040516100b89190610aa4565b6100ab61016e366004610934565b6103f7565b61019a7f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d22152981565b6040519081526020016100b8565b60606101b382610206565b6001600160a01b03821660009081526002602052604090206101d49061041f565b92915050565b60606101e582610206565b6001600160a01b03821660009081526004602052604090206101d49061041f565b6000805460405163054de0ff60e01b81526001600160a01b038481166004830152620100009092049091169063054de0ff9060240160006040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028f9190810190610979565b905060005b81518110156102d3576102c0838383815181106102b3576102b3610b40565b602002602001015161042c565b50806102cb81610ae3565b915050610294565b505050565b60606102e382610206565b6001600160a01b03821660009081526001602052604090206101d49061041f565b600054610100900460ff1661031f5760005460ff1615610323565b303b155b61038a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156103ac576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156103e0576000805461ff00191690555b5050565b60006103f0838361042c565b9392505050565b606061040282610206565b6001600160a01b03821660009081526003602052604090206101d4905b606060006103f083610575565b6000805460405163e8cbab0960e01b815260048101849052620100009091046001600160a01b03169063e8cbab099060240160206040518083038186803b15801561047657600080fd5b505afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae9190610a3e565b156104c7575060026104c2838360016105d1565b610551565b60005460405163093f561760e01b815260048101849052620100009091046001600160a01b03169063093f56179060240160206040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610a3e565b15610551575060015b600081600281111561056557610565610b14565b146101d4576101d48383836106ab565b6060816000018054806020026020016040519081016040528092919081815260200182805480156105c557602002820191906000526020600020905b8154815260200190600101908083116105b1575b50505050509050919050565b60018160028111156105e5576105e5610b14565b1415610613576001600160a01b038316600090815260036020526040902061060d90836107be565b50610651565b600281600281111561062757610627610b14565b1415610651576001600160a01b038316600090815260046020526040902061064f90836107be565b505b80600281111561066357610663610b14565b836001600160a01b03167f3b90fa143863a45908a7b69d67a369f6e401bfc21b1f1873b2c18f7dfdf0dd278460405161069e91815260200190565b60405180910390a3505050565b60018160028111156106bf576106bf610b14565b1415610710576001600160a01b03831660009081526001602052604090206106e790836107ca565b506001600160a01b038316600090815260036020526040902061070a90836107ca565b50610771565b600281600281111561072457610724610b14565b1415610771576001600160a01b038316600090815260026020526040902061074c90836107ca565b506001600160a01b038316600090815260046020526040902061076f90836107ca565b505b80600281111561078357610783610b14565b836001600160a01b03167f07ffa1c77b3c4d3bf16ff59253da47ed8e8a4367376d6caf4bf66469977bc5db8460405161069e91815260200190565b60006103f083836107d6565b60006103f083836108c9565b600081815260018301602052604081205480156108bf5760006107fa600183610acc565b855490915060009061080e90600190610acc565b905081811461087357600086600001828154811061082e5761082e610b40565b906000526020600020015490508087600001848154811061085157610851610b40565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061088457610884610b2a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101d4565b60009150506101d4565b6000818152600183016020526040812054610910575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101d4565b5060006101d4565b80356001600160a01b038116811461092f57600080fd5b919050565b60006020828403121561094657600080fd5b6103f082610918565b6000806040838503121561096257600080fd5b61096b83610918565b946020939093013593505050565b6000602080838503121561098c57600080fd5b825167ffffffffffffffff808211156109a457600080fd5b818501915085601f8301126109b857600080fd5b8151818111156109ca576109ca610b56565b8060051b604051601f19603f830116810181811085821117156109ef576109ef610b56565b604052828152858101935084860182860187018a1015610a0e57600080fd5b600095505b83861015610a31578051855260019590950194938601938601610a13565b5098975050505050505050565b600060208284031215610a5057600080fd5b815180151581146103f057600080fd5b6020808252825182820181905260009190848201906040850190845b81811015610a9857835183529284019291840191600101610a7c565b50909695505050505050565b6020810160038310610ac657634e487b7160e01b600052602160045260246000fd5b91905290565b600082821015610ade57610ade610afe565b500390565b6000600019821415610af757610af7610afe565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122010ae33f876d5eae24fda74b6298e14920b1af51509431983f548db1fb8e89de864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "Initializes the proxy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2677,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2680,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9660,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "tellerV2",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ITellerV2)12561"
      },
      {
        "astId": 9665,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "_delinquencies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)7003_storage)"
      },
      {
        "astId": 9670,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "_defaults",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UintSet)7003_storage)"
      },
      {
        "astId": 9675,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "_currentDelinquencies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UintSet)7003_storage)"
      },
      {
        "astId": 9680,
        "contract": "contracts/ReputationManager.sol:ReputationManager",
        "label": "_currentDefaults",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UintSet)7003_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITellerV2)12561": {
        "encoding": "inplace",
        "label": "contract ITellerV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)7003_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7003_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)6545_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6540,
            "contract": "contracts/ReputationManager.sol:ReputationManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6544,
            "contract": "contracts/ReputationManager.sol:ReputationManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7003_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 7002,
            "contract": "contracts/ReputationManager.sol:ReputationManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6545_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}