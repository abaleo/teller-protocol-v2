{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@mangrovedao/=node_modules/@mangrovedao/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618\",\"dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ensdomains/=node_modules/@ensdomains/",
        ":@mangrovedao/=node_modules/@mangrovedao/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": "ContextUpgradeable"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
        "urls": [
          "bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
          "dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
        "urls": [
          "bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
          "dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
    "id": 42596,
    "exportedSymbols": {
      "AddressUpgradeable": [
        42553
      ],
      "ContextUpgradeable": [
        42595
      ],
      "Initializable": [
        40469
      ]
    },
    "nodeType": "SourceUnit",
    "src": "86:1259:66",
    "nodes": [
      {
        "id": 42555,
        "nodeType": "PragmaDirective",
        "src": "86:23:66",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 42556,
        "nodeType": "ImportDirective",
        "src": "110:42:66",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
        "file": "../proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 42596,
        "sourceUnit": 40470,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 42595,
        "nodeType": "ContractDefinition",
        "src": "651:693:66",
        "nodes": [
          {
            "id": 42565,
            "nodeType": "FunctionDefinition",
            "src": "711:59:66",
            "nodes": [],
            "body": {
              "id": 42564,
              "nodeType": "Block",
              "src": "763:7:66",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 42562,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 42561,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "746:16:66"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 40414,
                  "src": "746:16:66"
                },
                "nodeType": "ModifierInvocation",
                "src": "746:16:66"
              }
            ],
            "name": "__Context_init",
            "nameLocation": "720:14:66",
            "parameters": {
              "id": 42560,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "734:2:66"
            },
            "returnParameters": {
              "id": 42563,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "763:0:66"
            },
            "scope": 42595,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 42571,
            "nodeType": "FunctionDefinition",
            "src": "776:69:66",
            "nodes": [],
            "body": {
              "id": 42570,
              "nodeType": "Block",
              "src": "838:7:66",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 42568,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 42567,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "821:16:66"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 40414,
                  "src": "821:16:66"
                },
                "nodeType": "ModifierInvocation",
                "src": "821:16:66"
              }
            ],
            "name": "__Context_init_unchained",
            "nameLocation": "785:24:66",
            "parameters": {
              "id": 42566,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "809:2:66"
            },
            "returnParameters": {
              "id": 42569,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "838:0:66"
            },
            "scope": 42595,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 42580,
            "nodeType": "FunctionDefinition",
            "src": "850:96:66",
            "nodes": [],
            "body": {
              "id": 42579,
              "nodeType": "Block",
              "src": "912:34:66",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 42576,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "929:3:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 42577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "933:6:66",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "929:10:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 42575,
                  "id": 42578,
                  "nodeType": "Return",
                  "src": "922:17:66"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "859:10:66",
            "parameters": {
              "id": 42572,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "869:2:66"
            },
            "returnParameters": {
              "id": 42575,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42574,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42580,
                  "src": "903:7:66",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42573,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "903:7:66",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "902:9:66"
            },
            "scope": 42595,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 42589,
            "nodeType": "FunctionDefinition",
            "src": "952:99:66",
            "nodes": [],
            "body": {
              "id": 42588,
              "nodeType": "Block",
              "src": "1019:32:66",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 42585,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "1036:3:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 42586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "1040:4:66",
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "src": "1036:8:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "functionReturnParameters": 42584,
                  "id": 42587,
                  "nodeType": "Return",
                  "src": "1029:15:66"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgData",
            "nameLocation": "961:8:66",
            "parameters": {
              "id": 42581,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "969:2:66"
            },
            "returnParameters": {
              "id": 42584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42583,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42589,
                  "src": "1003:14:66",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 42582,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1003:5:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1002:16:66"
            },
            "scope": 42595,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 42594,
            "nodeType": "VariableDeclaration",
            "src": "1316:25:66",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 42590,
              "nodeType": "StructuredDocumentation",
              "src": "1057:254:66",
              "text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
            },
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "1336:5:66",
            "scope": 42595,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 42591,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1316:7:66",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 42593,
              "length": {
                "hexValue": "3530",
                "id": 42592,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1324:2:66",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1316:11:66",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 42558,
              "name": "Initializable",
              "nameLocations": [
                "691:13:66"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 40469,
              "src": "691:13:66"
            },
            "id": 42559,
            "nodeType": "InheritanceSpecifier",
            "src": "691:13:66"
          }
        ],
        "canonicalName": "ContextUpgradeable",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 42557,
          "nodeType": "StructuredDocumentation",
          "src": "154:496:66",
          "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          42595,
          40469
        ],
        "name": "ContextUpgradeable",
        "nameLocation": "669:18:66",
        "scope": 42596,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 66
}